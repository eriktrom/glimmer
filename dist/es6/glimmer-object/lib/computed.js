import { intern } from 'glimmer-util';
import { ComputedReferenceBlueprint, Meta } from 'glimmer-reference';
import { EMPTY_CACHE } from './object';
import { Blueprint } from './mixin';
export class ComputedBlueprint extends Blueprint {
    constructor(accessor, deps = []) {
        super();
        this.metadata = {};
        this.accessor = accessor;
        this.deps = deps;
    }
    descriptor(target, key, classMeta) {
        classMeta.addReferenceTypeFor(key, ComputedReferenceBlueprint(key, this.deps));
        classMeta.addPropertyMetadata(key, this.metadata);
        classMeta.addSlotFor(key);
        return new Computed(this.accessor);
    }
    property(...paths) {
        this.deps = paths.map(d => d.split('.').map(intern));
        return this;
    }
    meta(object) {
        this.metadata = object;
        return this;
    }
    volatile() {
        return this;
    }
}
class Computed {
    constructor(accessor) {
        this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
        this.accessor = accessor;
    }
    define(prototype, key, home) {
        Object.defineProperty(prototype, key, wrapAccessor(home, key, this.accessor));
    }
}
function wrapAccessor(home, accessorName, _desc) {
    let superDesc = getPropertyDescriptor(home, accessorName);
    let originalGet;
    let originalSet;
    let desc = {
        enumerable: true,
        configurable: true,
    };
    if (_desc.get && _desc.get.length > 0) {
        originalGet = function () { return _desc.get.call(this, accessorName); };
    }
    else {
        originalGet = _desc.get;
    }
    if (_desc.set && _desc.set.length > 1) {
        originalSet = function (value) {
            return _desc.set.call(this, accessorName, value);
        };
    }
    else {
        originalSet = _desc.set;
    }
    let cacheGet = function () {
        if (Meta.exists(this)) {
            let slot = Meta.for(this).getSlots()[accessorName];
            if (slot !== EMPTY_CACHE)
                return slot;
        }
        return originalGet.call(this);
    };
    let cacheSet;
    if (originalSet) {
        cacheSet = function (value) {
            let meta = Meta.for(this);
            let slots = meta.getSlots();
            let ret = originalSet.call(this, value);
            if (ret !== undefined) {
                slots[accessorName] = ret;
            }
        };
    }
    else {
        cacheSet = function (value) {
            let meta = Meta.for(this);
            let slots = meta.getSlots();
            if (value !== undefined)
                slots[accessorName] = value;
        };
    }
    if (!superDesc || 'value' in superDesc) {
        desc.get = cacheGet;
        desc.set = cacheSet;
        return desc;
    }
    desc.get = function () {
        let lastSuper = this._super;
        this._super = function () {
            return superDesc.get.call(this);
        };
        try {
            return cacheGet.call(this);
        }
        finally {
            this._super = lastSuper;
        }
    };
    desc.set = function (val) {
        let lastSuper = this._super;
        this._super = function () {
            return superDesc.set.call(this, val);
        };
        try {
            return cacheSet.call(this, val);
        }
        finally {
            this._super = lastSuper;
        }
    };
    return desc;
}
function getPropertyDescriptor(subject, name) {
    var pd = Object.getOwnPropertyDescriptor(subject, name);
    var proto = Object.getPrototypeOf(subject);
    while (typeof pd === 'undefined' && proto !== null) {
        pd = Object.getOwnPropertyDescriptor(proto, name);
        proto = Object.getPrototypeOf(proto);
    }
    return pd;
}
export function computed(...args) {
    let last = args.pop();
    let deps = args;
    if (typeof last === 'function') {
        return new ComputedBlueprint({
            get: last
        }).property(...deps);
    }
    else if (typeof last === 'object') {
        return new ComputedBlueprint(last).property(...deps);
    }
    else {
        throw new TypeError("computed expects a function or an object as last argument");
    }
}
export function observer(...args) {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLW9iamVjdC9saWIvY29tcHV0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sY0FBYztPQUM5QyxFQUFFLDBCQUEwQixFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQjtPQUM3RCxFQUFFLFdBQVcsRUFBYSxNQUFNLFVBQVU7T0FDMUMsRUFBYyxTQUFTLEVBQUUsTUFBTSxTQUFTO0FBeUIvQyx1Q0FBdUMsU0FBUztJQUs5QyxZQUFZLFFBQTRCLEVBQUUsSUFBSSxHQUF1QixFQUFFO1FBQ3JFLE9BQU8sQ0FBQztRQUhGLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFJNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFjLEVBQUUsR0FBbUIsRUFBRSxTQUFvQjtRQUNsRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMvRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFHLEtBQWU7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FB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QUcsRUFBbUQsSUFBSTtTQUMzRCxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFxQixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLElBQUksU0FBUyxDQUFDLDJEQUEyRCxDQUFDLENBQUM7SUFDbkYsQ0FBQztBQUNILENBQUM7QUFFRCx5QkFBeUIsR0FBRyxJQUFJO0FBRWhDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcm5lZFN0cmluZywgaW50ZXJuIH0gZnJvbSAnZ2xpbW1lci11dGlsJztcbmltcG9ydCB7IENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50LCBNZXRhIH0gZnJvbSAnZ2xpbW1lci1yZWZlcmVuY2UnO1xuaW1wb3J0IHsgRU1QVFlfQ0FDSEUsIENsYXNzTWV0YSB9IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCB7IERlc2NyaXB0b3IsIEJsdWVwcmludCB9IGZyb20gJy4vbWl4aW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGVkR2V0Q2FsbGJhY2sge1xuICAoKTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2FjeUNvbXB1dGVkR2V0Q2FsbGJhY2sge1xuICAoa2V5OiBzdHJpbmcpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0ZWRTZXRDYWxsYmFjayB7XG4gICh2YWw6IGFueSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5Q29tcHV0ZWRTZXRDYWxsYmFjayB7XG4gIChrZXk6IHN0cmluZywgdmFsOiBhbnkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGVkRGVzY3JpcHRvciB7XG4gIGdldD86IENvbXB1dGVkR2V0Q2FsbGJhY2sgfCBMZWdhY3lDb21wdXRlZEdldENhbGxiYWNrO1xuICBzZXQ/OiBDb21wdXRlZFNldENhbGxiYWNrIHwgTGVnYWN5Q29tcHV0ZWRTZXRDYWxsYmFjaztcbn1cblxudHlwZSBDb21wdXRlZEFyZ3VtZW50ID0gQ29tcHV0ZWRHZXRDYWxsYmFjayB8IENvbXB1dGVkRGVzY3JpcHRvcjtcblxuZXhwb3J0IGNsYXNzIENvbXB1dGVkQmx1ZXByaW50IGV4dGVuZHMgQmx1ZXByaW50IHtcbiAgcHJpdmF0ZSBhY2Nlc3NvcjogQ29tcHV0ZWREZXNjcmlwdG9yO1xuICBwcml2YXRlIGRlcHM6IEludGVybmVkU3RyaW5nW11bXTtcbiAgcHJpdmF0ZSBtZXRhZGF0YTogT2JqZWN0ID0ge307XG5cbiAgY29uc3RydWN0b3IoYWNjZXNzb3I6IENvbXB1dGVkRGVzY3JpcHRvciwgZGVwczogSW50ZXJuZWRTdHJpbmdbXVtdID0gW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYWNjZXNzb3IgPSBhY2Nlc3NvcjtcbiAgICB0aGlzLmRlcHMgPSBkZXBzO1xuICB9XG5cbiAgZGVzY3JpcHRvcih0YXJnZXQ6IE9iamVjdCwga2V5OiBJbnRlcm5lZFN0cmluZywgY2xhc3NNZXRhOiBDbGFzc01ldGEpOiBEZXNjcmlwdG9yIHtcbiAgICBjbGFzc01ldGEuYWRkUmVmZXJlbmNlVHlwZUZvcihrZXksIENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50KGtleSwgdGhpcy5kZXBzKSk7XG4gICAgY2xhc3NNZXRhLmFkZFByb3BlcnR5TWV0YWRhdGEoa2V5LCB0aGlzLm1ldGFkYXRhKTtcbiAgICBjbGFzc01ldGEuYWRkU2xvdEZvcihrZXkpO1xuICAgIHJldHVybiBuZXcgQ29tcHV0ZWQodGhpcy5hY2Nlc3Nvcik7XG4gIH1cblxuICBwcm9wZXJ0eSguLi5wYXRoczogc3RyaW5nW10pIHtcbiAgICB0aGlzLmRlcHMgPSBwYXRocy5tYXAoZCA9PiBkLnNwbGl0KCcuJykubWFwKGludGVybikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWV0YShvYmplY3Q6IE9iamVjdCkge1xuICAgIHRoaXMubWV0YWRhdGEgPSBvYmplY3Q7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2b2xhdGlsZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5jbGFzcyBDb21wdXRlZCBpbXBsZW1lbnRzIERlc2NyaXB0b3Ige1xuICBlbnVtZXJhYmxlOiBib29sZWFuO1xuICBjb25maWd1cmFibGU6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBhY2Nlc3NvcjogQ29tcHV0ZWREZXNjcmlwdG9yO1xuICBcIjVkOTBmODRmLTkwOGUtNGE0Mi05NzQ5LTNkMGY1MjNjMjYyY1wiID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihhY2Nlc3NvcjogQ29tcHV0ZWREZXNjcmlwdG9yKSB7XG4gICAgdGhpcy5hY2Nlc3NvciA9IGFjY2Vzc29yO1xuICB9XG5cbiAgZGVmaW5lKHByb3RvdHlwZTogT2JqZWN0LCBrZXk6IEludGVybmVkU3RyaW5nLCBob21lOiBPYmplY3QpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBrZXksIHdyYXBBY2Nlc3Nvcihob21lLCBrZXksIHRoaXMuYWNjZXNzb3IpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwQWNjZXNzb3IoaG9tZTogT2JqZWN0LCBhY2Nlc3Nvck5hbWU6IEludGVybmVkU3RyaW5nLCBfZGVzYzogQ29tcHV0ZWREZXNjcmlwdG9yKTogUHJvcGVydHlEZXNjcmlwdG9yIHtcbiAgbGV0IHN1cGVyRGVzYyA9IGdldFByb3BlcnR5RGVzY3JpcHRvcihob21lLCBhY2Nlc3Nvck5hbWUpO1xuXG4gIGxldCBvcmlnaW5hbEdldDogQ29tcHV0ZWRHZXRDYWxsYmFjaztcbiAgbGV0IG9yaWdpbmFsU2V0OiBDb21wdXRlZFNldENhbGxiYWNrO1xuXG4gIGxldCBkZXNjOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gIH07XG5cbiAgaWYgKF9kZXNjLmdldCAmJiBfZGVzYy5nZXQubGVuZ3RoID4gMCkge1xuICAgIG9yaWdpbmFsR2V0ID0gZnVuY3Rpb24oKSB7IHJldHVybiBfZGVzYy5nZXQuY2FsbCh0aGlzLCBhY2Nlc3Nvck5hbWUpOyB9O1xuICB9IGVsc2Uge1xuICAgIG9yaWdpbmFsR2V0ID0gPENvbXB1dGVkR2V0Q2FsbGJhY2s+X2Rlc2MuZ2V0O1xuICB9XG5cbiAgaWYgKF9kZXNjLnNldCAmJiBfZGVzYy5zZXQubGVuZ3RoID4gMSkge1xuICAgIG9yaWdpbmFsU2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBfZGVzYy5zZXQuY2FsbCh0aGlzLCBhY2Nlc3Nvck5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG9yaWdpbmFsU2V0ID0gPENvbXB1dGVkR2V0Q2FsbGJhY2s+X2Rlc2Muc2V0O1xuICB9XG5cbiAgbGV0IGNhY2hlR2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKE1ldGEuZXhpc3RzKHRoaXMpKSB7XG4gICAgICBsZXQgc2xvdCA9IE1ldGEuZm9yKHRoaXMpLmdldFNsb3RzKClbPHN0cmluZz5hY2Nlc3Nvck5hbWVdO1xuICAgICAgaWYgKHNsb3QgIT09IEVNUFRZX0NBQ0hFKSByZXR1cm4gc2xvdDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3JpZ2luYWxHZXQuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBsZXQgY2FjaGVTZXQ7XG5cbiAgaWYgKG9yaWdpbmFsU2V0KSB7XG4gICAgY2FjaGVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbGV0IG1ldGEgPSBNZXRhLmZvcih0aGlzKTtcbiAgICAgIGxldCBzbG90cyA9IG1ldGEuZ2V0U2xvdHMoKTtcblxuICAgICAgbGV0IHJldCA9IG9yaWdpbmFsU2V0LmNhbGwodGhpcywgdmFsdWUpO1xuXG4gICAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2xvdHNbPHN0cmluZz5hY2Nlc3Nvck5hbWVdID0gcmV0O1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY2FjaGVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbGV0IG1ldGEgPSBNZXRhLmZvcih0aGlzKTtcbiAgICAgIGxldCBzbG90cyA9IG1ldGEuZ2V0U2xvdHMoKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBzbG90c1s8c3RyaW5nPmFjY2Vzc29yTmFtZV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFzdXBlckRlc2MgfHwgJ3ZhbHVlJyBpbiBzdXBlckRlc2MpIHtcbiAgICBkZXNjLmdldCA9IGNhY2hlR2V0O1xuICAgIGRlc2Muc2V0ID0gY2FjaGVTZXQ7XG4gICAgcmV0dXJuIGRlc2M7XG4gIH1cblxuICBkZXNjLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBsYXN0U3VwZXIgPSB0aGlzLl9zdXBlcjtcbiAgICB0aGlzLl9zdXBlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN1cGVyRGVzYy5nZXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWNoZUdldC5jYWxsKHRoaXMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9zdXBlciA9IGxhc3RTdXBlcjtcbiAgICB9XG4gIH07XG5cbiAgZGVzYy5zZXQgPSBmdW5jdGlvbih2YWwpIHtcbiAgICBsZXQgbGFzdFN1cGVyID0gdGhpcy5fc3VwZXI7XG4gICAgdGhpcy5fc3VwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdXBlckRlc2Muc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWNoZVNldC5jYWxsKHRoaXMsIHZhbCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX3N1cGVyID0gbGFzdFN1cGVyO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gZGVzYztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHN1YmplY3QsIG5hbWUpIHtcbiAgdmFyIHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzdWJqZWN0LCBuYW1lKTtcbiAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHN1YmplY3QpO1xuICB3aGlsZSAodHlwZW9mIHBkID09PSAndW5kZWZpbmVkJyAmJiBwcm90byAhPT0gbnVsbCkge1xuICAgIHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgbmFtZSk7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiBwZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkKGRlc2M6IENvbXB1dGVkRGVzY3JpcHRvcik6IENvbXB1dGVkQmx1ZXByaW50O1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlcjogQ29tcHV0ZWRHZXRDYWxsYmFjayB8IExlZ2FjeUNvbXB1dGVkR2V0Q2FsbGJhY2spOiBDb21wdXRlZEJsdWVwcmludDtcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZCguLi5hcmdzKTogQ29tcHV0ZWRCbHVlcHJpbnQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZCguLi5hcmdzKSB7XG4gIGxldCBsYXN0OiBDb21wdXRlZEFyZ3VtZW50ID0gYXJncy5wb3AoKTtcbiAgbGV0IGRlcHMgPSBhcmdzO1xuXG4gIGlmICh0eXBlb2YgbGFzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRCbHVlcHJpbnQoe1xuICAgICAgZ2V0OiA8Q29tcHV0ZWRHZXRDYWxsYmFjayB8IExlZ2FjeUNvbXB1dGVkR2V0Q2FsbGJhY2s+bGFzdFxuICAgIH0pLnByb3BlcnR5KC4uLmRlcHMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBsYXN0ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRCbHVlcHJpbnQoPENvbXB1dGVkRGVzY3JpcHRvcj5sYXN0KS5wcm9wZXJ0eSguLi5kZXBzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY29tcHV0ZWQgZXhwZWN0cyBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBhcyBsYXN0IGFyZ3VtZW50XCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlciguLi5hcmdzKSB7XG5cbn1cbiJdfQ==