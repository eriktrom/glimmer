import { Blueprint, Descriptor } from './mixin';
import { ComputedBlueprint } from './computed';
import { intern } from 'glimmer-util';
class AliasMethodDescriptor extends Descriptor {
    constructor(name) {
        super();
        this.name = name;
    }
    define(target, key, home) {
        let name = this.name;
        Object.defineProperty(target, key, {
            enumerable: true,
            configurable: true,
            get() {
                return this[name];
            }
        });
    }
}
class AliasMethodBlueprint extends Blueprint {
    constructor(name) {
        super();
        this.name = name;
    }
    descriptor(target, key, meta) {
        return new AliasMethodDescriptor(this.name);
    }
}
export function aliasMethod(name) {
    return new AliasMethodBlueprint(intern(name));
}
class AliasBlueprint extends ComputedBlueprint {
    constructor(name) {
        let parent = name.slice(0, -1);
        let last = name[name.length - 1];
        let get = function () {
            return name.reduce((obj, n) => obj[n], this);
        };
        let set = function (value) {
            let p = parent.reduce((obj, n) => obj[n], this);
            p[last] = value;
        };
        super({ get, set }, [name]);
        this.name = name;
    }
    descriptor(target, key, meta) {
        if (this.name[0] === key)
            throw new Error(`Setting alias '${key}' on self`);
        return super.descriptor(target, key, meta);
    }
}
export function alias(name) {
    return new AliasBlueprint(name.split('.').map(intern));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLW9iamVjdC9saWIvZGVzY3JpcHRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUztPQUV4QyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWTtPQUN2QyxFQUFrQixNQUFNLEVBQUUsTUFBTSxjQUFjO0FBRXJELG9DQUFvQyxVQUFVO0lBRzVDLFlBQVksSUFBb0I7UUFDOUIsT0FBTyxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFjLEVBQUUsR0FBbUIsRUFBRSxJQUFZO1FBQ3RELElBQUksSUFBSSxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFN0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQ2pDLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUc7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQixDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUM7QUFFRCxtQ0FBbUMsU0FBUztJQUcxQyxZQUFZLElBQW9CO1FBQzlCLE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBYyxFQUFFLEdBQW1CLEVBQUUsSUFBZTtRQUM3RCxNQUFNLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztBQUNILENBQUM7QUFFRCw0QkFBNEIsSUFBWTtJQUN0QyxNQUFNLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQsNkJBQTZCLGlCQUFpQjtJQUc1QyxZQUFZLElBQXNCO1FBQ2hDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFakMsSUFBSSxHQUFHLEdBQUc7WUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQztRQUVGLElBQUksR0FBRyxHQUFHLFVBQVMsS0FBSztZQUN0QixJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEQsQ0FBQyxDQUFTLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMxQixDQUFDLENBQUM7UUFFRixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQWMsRUFBRSxHQUFtQixFQUFFLElBQWU7UUFDN0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7WUFBQyxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztBQUNILENBQUM7QUFFRCxzQkFBc0IsSUFBWTtJQUNoQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZXByaW50LCBEZXNjcmlwdG9yIH0gZnJvbSAnLi9taXhpbic7XG5pbXBvcnQgeyBDbGFzc01ldGEgfSBmcm9tICcuL29iamVjdCc7XG5pbXBvcnQgeyBDb21wdXRlZEJsdWVwcmludCB9IGZyb20gJy4vY29tcHV0ZWQnO1xuaW1wb3J0IHsgSW50ZXJuZWRTdHJpbmcsIGludGVybiB9IGZyb20gJ2dsaW1tZXItdXRpbCc7XG5cbmNsYXNzIEFsaWFzTWV0aG9kRGVzY3JpcHRvciBleHRlbmRzIERlc2NyaXB0b3Ige1xuICBwcml2YXRlIG5hbWU6IEludGVybmVkU3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IEludGVybmVkU3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgZGVmaW5lKHRhcmdldDogT2JqZWN0LCBrZXk6IEludGVybmVkU3RyaW5nLCBob21lOiBPYmplY3QpIHtcbiAgICBsZXQgbmFtZSA9IDxzdHJpbmc+dGhpcy5uYW1lO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBBbGlhc01ldGhvZEJsdWVwcmludCBleHRlbmRzIEJsdWVwcmludCB7XG4gIHByaXZhdGUgbmFtZTogSW50ZXJuZWRTdHJpbmc7XG5cbiAgY29uc3RydWN0b3IobmFtZTogSW50ZXJuZWRTdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBkZXNjcmlwdG9yKHRhcmdldDogT2JqZWN0LCBrZXk6IEludGVybmVkU3RyaW5nLCBtZXRhOiBDbGFzc01ldGEpOiBEZXNjcmlwdG9yIHtcbiAgICByZXR1cm4gbmV3IEFsaWFzTWV0aG9kRGVzY3JpcHRvcih0aGlzLm5hbWUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGlhc01ldGhvZChuYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBBbGlhc01ldGhvZEJsdWVwcmludChpbnRlcm4obmFtZSkpO1xufVxuXG5jbGFzcyBBbGlhc0JsdWVwcmludCBleHRlbmRzIENvbXB1dGVkQmx1ZXByaW50IHtcbiAgcHJpdmF0ZSBuYW1lOiBJbnRlcm5lZFN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IEludGVybmVkU3RyaW5nW10pIHtcbiAgICBsZXQgcGFyZW50ID0gbmFtZS5zbGljZSgwLCAtMSk7XG4gICAgbGV0IGxhc3QgPSBuYW1lW25hbWUubGVuZ3RoIC0gMV07XG5cbiAgICBsZXQgZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmFtZS5yZWR1Y2UoKG9iaiwgbikgPT4gb2JqWzxzdHJpbmc+bl0sIHRoaXMpO1xuICAgIH07XG5cbiAgICBsZXQgc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxldCBwID0gcGFyZW50LnJlZHVjZSgob2JqLCBuKSA9PiBvYmpbPHN0cmluZz5uXSwgdGhpcyk7XG4gICAgICBwWzxzdHJpbmc+bGFzdF0gPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgc3VwZXIoeyBnZXQsIHNldCB9LCBbbmFtZV0pO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBkZXNjcmlwdG9yKHRhcmdldDogT2JqZWN0LCBrZXk6IEludGVybmVkU3RyaW5nLCBtZXRhOiBDbGFzc01ldGEpOiBEZXNjcmlwdG9yIHtcbiAgICBpZiAodGhpcy5uYW1lWzBdID09PSBrZXkpIHRocm93IG5ldyBFcnJvcihgU2V0dGluZyBhbGlhcyAnJHtrZXl9JyBvbiBzZWxmYCk7XG4gICAgcmV0dXJuIHN1cGVyLmRlc2NyaXB0b3IodGFyZ2V0LCBrZXksIG1ldGEpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGlhcyhuYW1lOiBzdHJpbmcpOiBBbGlhc0JsdWVwcmludCB7XG4gIHJldHVybiBuZXcgQWxpYXNCbHVlcHJpbnQobmFtZS5zcGxpdCgnLicpLm1hcChpbnRlcm4pKTtcbn1cbiJdfQ==