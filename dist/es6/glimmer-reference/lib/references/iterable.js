import { LinkedList, ListNode, dict, intern, symbol } from 'glimmer-util';
import UpdatableReference from './root';
export const REFERENCE_ITERATOR = symbol("reference-iterator");
class ListItem extends ListNode {
    constructor(value, key) {
        super(value);
        this.handled = true;
        this.key = key;
    }
    handle(value) {
        this.handled = true;
        this.value.update(value);
    }
}
export class ListManager {
    /* tslint:enable:no-unused-variable */
    constructor(array, keyPath) {
        /* tslint:disable:no-unused-variable */
        this.map = dict();
        this.list = new LinkedList();
        this.array = array;
        this.keyPath = keyPath;
    }
    iterator(target) {
        let { array, map, list, keyPath } = this;
        let keyFor;
        if (keyPath === '@index') {
            keyFor = (_, index) => {
                return String(index);
            };
        }
        else {
            keyFor = (item) => {
                return intern(item[keyPath]);
            };
        }
        return new ListIterator({ array: array.value(), keyFor, target, map, list });
    }
    sync(target) {
        let iterator = this.iterator(target);
        while (!iterator.next())
            ;
    }
}
var Phase;
(function (Phase) {
    Phase[Phase["FirstAppend"] = 0] = "FirstAppend";
    Phase[Phase["Append"] = 1] = "Append";
    Phase[Phase["Prune"] = 2] = "Prune";
    Phase[Phase["Done"] = 3] = "Done";
})(Phase || (Phase = {}));
export class ListIterator {
    constructor({ array, keyFor, target, map, list }) {
        /* tslint:disable:no-unused-variable */
        this.candidates = dict();
        this.arrayPosition = 0;
        this.phase = Phase.Append;
        this.array = array;
        this.keyFor = keyFor;
        this.target = target;
        this.map = map;
        this.list = list;
        if (list.isEmpty()) {
            this.phase = Phase.FirstAppend;
        }
        else {
            this.phase = Phase.Append;
        }
        this.listPosition = list.head();
    }
    advanceToKey(key) {
        let { listPosition, candidates, list } = this;
        let seek = listPosition;
        while (seek && seek.key !== key) {
            candidates[seek.key] = seek;
            seek = list.nextNode(seek);
        }
        this.listPosition = seek && list.nextNode(seek);
    }
    next() {
        while (true) {
            let handled = false;
            switch (this.phase) {
                case Phase.FirstAppend:
                    if (this.array.length <= this.arrayPosition) {
                        this.startPrune();
                    }
                    else {
                        handled = this.nextInitialAppend();
                    }
                    break;
                case Phase.Append:
                    handled = this.nextAppend();
                    break;
                case Phase.Prune:
                    this.nextPrune();
                    break;
                case Phase.Done:
                    this.nextDone();
                    return true;
            }
            if (handled)
                return false;
        }
    }
    nextInitialAppend() {
        let { array, arrayPosition, keyFor, listPosition, map } = this;
        let item = array[this.arrayPosition++];
        if (item === null || item === undefined)
            return;
        let key = keyFor(item, arrayPosition);
        this.nextInsert(map, listPosition, key, item);
        return true;
    }
    nextAppend() {
        let { keyFor, array, listPosition, arrayPosition, map } = this;
        if (array.length <= arrayPosition) {
            this.startPrune();
            return;
        }
        let item = array[this.arrayPosition++];
        if (item === null || item === undefined)
            return;
        let key = keyFor(item, arrayPosition);
        if (listPosition && listPosition.key === key) {
            this.nextRetain(listPosition, key, item);
            return false;
        }
        else if (map[key]) {
            this.nextMove(map, listPosition, key, item);
            return false;
        }
        else {
            this.nextInsert(map, listPosition, key, item);
            return true;
        }
    }
    nextRetain(current, key, item) {
        current.handle(item);
        this.listPosition = this.list.nextNode(current);
        this.target.retain(key, item);
    }
    nextMove(map, current, key, item) {
        let { candidates, list, target } = this;
        let found = map[key];
        found.handle(item);
        if (candidates[key]) {
            list.remove(found);
            list.insertBefore(found, current);
            target.move(found.key, found.value, current ? current.key : null);
        }
        else {
            this.advanceToKey(key);
        }
    }
    nextInsert(map, current, key, item) {
        let { list, target } = this;
        let reference = new UpdatableReference(item);
        let node = map[key] = new ListItem(reference, key);
        list.append(node);
        target.insert(node.key, node.value, current ? current.key : null);
    }
    startPrune() {
        this.phase = Phase.Prune;
        this.listPosition = this.list.head();
        return true;
    }
    nextPrune() {
        let { list, target } = this;
        if (this.listPosition === null) {
            this.phase = Phase.Done;
            return;
        }
        let node = this.listPosition;
        this.listPosition = list.nextNode(node);
        if (node.handled) {
            node.handled = false;
            return;
        }
        else {
            list.remove(node);
            delete this.map[node.key];
            target.delete(node.key);
            return;
        }
    }
    nextDone() {
        this.target.done();
    }
}
//# sourceMappingURL=data:application/json;base64,