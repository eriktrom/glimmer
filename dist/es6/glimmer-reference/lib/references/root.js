import { intern, dict } from 'glimmer-util';
import { PathReference } from './path';
import PushPullReference from './push-pull';
export default class RootReference extends PushPullReference {
    constructor(object) {
        super();
        this.chains = dict();
        this.object = object;
    }
    isDirty() { return true; }
    value() { return this.object; }
    update(object) {
        this.object = object;
        // this.notify();
    }
    get(prop) {
        var chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return (chains[prop] = new PathReference(this, prop));
    }
    chainFor(prop) {
        let chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return null;
    }
    path(string) {
        return string.split('.').reduce((ref, part) => ref.get(intern(part)), this);
    }
    referenceFromParts(parts) {
        return parts.reduce((ref, part) => ref.get(part), this);
    }
    label() {
        return '[reference Root]';
    }
}
export function referenceFromParts(path, parts) {
    return parts.reduce((ref, part) => ref.get(part), path);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItcmVmZXJlbmNlL2xpYi9yZWZlcmVuY2VzL3Jvb3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBa0IsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWM7T0FDcEQsRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRO09BRS9CLGlCQUFpQixNQUFNLGFBQWE7QUFFM0MsMkNBQTJDLGlCQUFpQjtJQUkxRCxZQUFZLE1BQVc7UUFDckIsT0FBTyxDQUFDO1FBSEYsV0FBTSxHQUFHLElBQUksRUFBaUIsQ0FBQztRQUlyQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsT0FBTyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTFCLEtBQUssS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFL0IsTUFBTSxDQUFDLE1BQVc7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsaUJBQWlCO0lBQ25CLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBb0I7UUFDdEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBUyxJQUFJLElBQUksTUFBTSxDQUFDO1lBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBUyxJQUFJLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQVMsSUFBSSxDQUFDLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFvQjtRQUMzQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFTLElBQUksSUFBSSxNQUFNLENBQUM7WUFBQyxNQUFNLENBQUMsTUFBTSxDQUFTLElBQUksQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQU07UUFDVCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQXVCO1FBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFrQixJQUFJLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0FBQ0gsQ0FBQztBQUVELG1DQUFtQyxJQUFvQixFQUFFLEtBQXVCO0lBQzlFLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcm5lZFN0cmluZywgaW50ZXJuLCBkaWN0IH0gZnJvbSAnZ2xpbW1lci11dGlsJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICcuL3BhdGgnO1xuaW1wb3J0IHsgUm9vdFJlZmVyZW5jZSBhcyBJUm9vdFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSBhcyBJUGF0aFJlZmVyZW5jZSB9IGZyb20gJ2dsaW1tZXItcmVmZXJlbmNlJztcbmltcG9ydCBQdXNoUHVsbFJlZmVyZW5jZSBmcm9tICcuL3B1c2gtcHVsbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb3RSZWZlcmVuY2UgZXh0ZW5kcyBQdXNoUHVsbFJlZmVyZW5jZSBpbXBsZW1lbnRzIElSb290UmVmZXJlbmNlLCBJUGF0aFJlZmVyZW5jZSB7XG4gIHByaXZhdGUgb2JqZWN0OiBhbnk7XG4gIHByaXZhdGUgY2hhaW5zID0gZGljdDxQYXRoUmVmZXJlbmNlPigpO1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogYW55KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgfVxuXG4gIGlzRGlydHkoKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgdmFsdWUoKSB7IHJldHVybiB0aGlzLm9iamVjdDsgfVxuXG4gIHVwZGF0ZShvYmplY3Q6IGFueSkge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgIC8vIHRoaXMubm90aWZ5KCk7XG4gIH1cblxuICBnZXQocHJvcDogSW50ZXJuZWRTdHJpbmcpOiBJUGF0aFJlZmVyZW5jZSB7XG4gICAgdmFyIGNoYWlucyA9IHRoaXMuY2hhaW5zO1xuICAgIGlmICg8c3RyaW5nPnByb3AgaW4gY2hhaW5zKSByZXR1cm4gY2hhaW5zWzxzdHJpbmc+cHJvcF07XG4gICAgcmV0dXJuIChjaGFpbnNbPHN0cmluZz5wcm9wXSA9IG5ldyBQYXRoUmVmZXJlbmNlKHRoaXMsIHByb3ApKTtcbiAgfVxuXG4gIGNoYWluRm9yKHByb3A6IEludGVybmVkU3RyaW5nKTogSVBhdGhSZWZlcmVuY2Uge1xuICAgIGxldCBjaGFpbnMgPSB0aGlzLmNoYWlucztcbiAgICBpZiAoPHN0cmluZz5wcm9wIGluIGNoYWlucykgcmV0dXJuIGNoYWluc1s8c3RyaW5nPnByb3BdO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcGF0aChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcuJykucmVkdWNlKChyZWYsIHBhcnQpID0+IHJlZi5nZXQoaW50ZXJuKHBhcnQpKSwgdGhpcyk7XG4gIH1cblxuICByZWZlcmVuY2VGcm9tUGFydHMocGFydHM6IEludGVybmVkU3RyaW5nW10pOiBJUGF0aFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgocmVmLCBwYXJ0KSA9PiByZWYuZ2V0KHBhcnQpLCA8SVBhdGhSZWZlcmVuY2U+dGhpcyk7XG4gIH1cblxuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgUm9vdF0nO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZlcmVuY2VGcm9tUGFydHMocGF0aDogSVBhdGhSZWZlcmVuY2UsIHBhcnRzOiBJbnRlcm5lZFN0cmluZ1tdKTogSVBhdGhSZWZlcmVuY2Uge1xuICByZXR1cm4gcGFydHMucmVkdWNlKChyZWYsIHBhcnQpID0+IHJlZi5nZXQocGFydCksIHBhdGgpO1xufSJdfQ==