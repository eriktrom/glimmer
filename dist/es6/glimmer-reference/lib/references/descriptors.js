import Meta from '../meta';
import PushPullReference from './push-pull';
export class PropertyReference {
    constructor(object, property, outer) {
        this.object = object;
        this.property = property;
    }
    isDirty() { return true; }
    value() { return this.object[this.property]; }
    destroy() { }
    label() {
        return '[reference Property]';
    }
}
export function ComputedReferenceBlueprint(property, dependencies) {
    return class ComputedReference extends PushPullReference {
        constructor(object, property, outer) {
            super();
            this.installed = false;
            this.object = object;
            this.property = property;
            this.dependencies = dependencies;
            this.outer = outer;
        }
        notify() {
            this.dirty = true;
            // this.outer.notify();
            super.notify();
        }
        value() {
            if (!this.installed) {
                let root = Meta.for(this.object).root();
                this.dependencies.forEach(dep => {
                    let ref = root.referenceFromParts(dep);
                    this._addSource(ref);
                    ref.value();
                });
                this.dirty = false;
                this.installed = true;
            }
            return this.object[this.property];
        }
        label() {
            return '[reference Computed]';
        }
    }
    ;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLXJlZmVyZW5jZS9saWIvcmVmZXJlbmNlcy9kZXNjcmlwdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxJQUFJLE1BQU0sU0FBUztPQUduQixpQkFBaUIsTUFBTSxhQUFhO0FBTTNDO0lBSUUsWUFBWSxNQUFXLEVBQUUsUUFBd0IsRUFBRSxLQUEwQjtRQUMzRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFCLEtBQUssS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBUyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sS0FBSSxDQUFDO0lBRVosS0FBSztRQUNILE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztJQUNoQyxDQUFDO0FBQ0gsQ0FBQztBQUVELDJDQUEyQyxRQUFRLEVBQUUsWUFBWTtJQUMvRCxNQUFNLENBQUMsZ0NBQWdDLGlCQUFpQjtRQU90RCxZQUFZLE1BQVcsRUFBRSxRQUF3QixFQUFFLEtBQTBCO1lBQzNFLE9BQU8sQ0FBQztZQUhGLGNBQVMsR0FBRyxLQUFLLENBQUM7WUFJeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDckIsQ0FBQztRQUVELE1BQU07WUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNsQix1QkFBdUI7WUFDdkIsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFFRCxLQUFLO1lBQ0gsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRXhDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUc7b0JBQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDckIsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN4QixDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFFRCxLQUFLO1lBQ0gsTUFBTSxDQUFDLHNCQUFzQixDQUFDO1FBQ2hDLENBQUM7SUFDSCxDQUFDO0lBQUEsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWV0YSBmcm9tICcuLi9tZXRhJztcbmltcG9ydCB7IFJlZmVyZW5jZSwgTm90aWZpYWJsZVJlZmVyZW5jZSB9IGZyb20gJ2dsaW1tZXItcmVmZXJlbmNlJztcbmltcG9ydCB7IEludGVybmVkU3RyaW5nIH0gZnJvbSAnZ2xpbW1lci11dGlsJztcbmltcG9ydCBQdXNoUHVsbFJlZmVyZW5jZSBmcm9tICcuL3B1c2gtcHVsbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5uZXJSZWZlcmVuY2VGYWN0b3J5IHtcbiAgbmV3IChvYmplY3Q6IGFueSwgcHJvcGVydHk6IEludGVybmVkU3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZSk6IFJlZmVyZW5jZTtcbn1cblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UmVmZXJlbmNlIGltcGxlbWVudHMgUmVmZXJlbmNlIHtcbiAgcHJpdmF0ZSBvYmplY3Q6IGFueTtcbiAgcHJpdmF0ZSBwcm9wZXJ0eTogSW50ZXJuZWRTdHJpbmc7XG5cbiAgY29uc3RydWN0b3Iob2JqZWN0OiBhbnksIHByb3BlcnR5OiBJbnRlcm5lZFN0cmluZywgb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2UpIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gIH1cblxuICBpc0RpcnR5KCkgeyByZXR1cm4gdHJ1ZTsgfVxuICB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMub2JqZWN0WzxzdHJpbmc+dGhpcy5wcm9wZXJ0eV07IH1cbiAgZGVzdHJveSgpIHt9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdbcmVmZXJlbmNlIFByb3BlcnR5XSc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50KHByb3BlcnR5LCBkZXBlbmRlbmNpZXMpIHtcbiAgcmV0dXJuIGNsYXNzIENvbXB1dGVkUmVmZXJlbmNlIGV4dGVuZHMgUHVzaFB1bGxSZWZlcmVuY2UgaW1wbGVtZW50cyBSZWZlcmVuY2Uge1xuICAgIHByaXZhdGUgb2JqZWN0OiBhbnk7XG4gICAgcHJpdmF0ZSBwcm9wZXJ0eTogSW50ZXJuZWRTdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXBlbmRlbmNpZXM6IEludGVybmVkU3RyaW5nW11bXTtcbiAgICBwcml2YXRlIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlO1xuICAgIHByaXZhdGUgaW5zdGFsbGVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmplY3Q6IGFueSwgcHJvcGVydHk6IEludGVybmVkU3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZSkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICB0aGlzLm91dGVyID0gb3V0ZXI7XG4gICAgfVxuXG4gICAgbm90aWZ5KCkge1xuICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgICAvLyB0aGlzLm91dGVyLm5vdGlmeSgpO1xuICAgICAgc3VwZXIubm90aWZ5KCk7XG4gICAgfVxuXG4gICAgdmFsdWUoKSB7XG4gICAgICBpZiAoIXRoaXMuaW5zdGFsbGVkKSB7XG4gICAgICAgIGxldCByb290ID0gTWV0YS5mb3IodGhpcy5vYmplY3QpLnJvb3QoKTtcblxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICAgICAgbGV0IHJlZiA9IHJvb3QucmVmZXJlbmNlRnJvbVBhcnRzKGRlcCk7XG4gICAgICAgICAgdGhpcy5fYWRkU291cmNlKHJlZik7XG4gICAgICAgICAgcmVmLnZhbHVlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5vYmplY3RbPHN0cmluZz50aGlzLnByb3BlcnR5XTtcbiAgICB9XG5cbiAgICBsYWJlbCgpIHtcbiAgICAgIHJldHVybiAnW3JlZmVyZW5jZSBDb21wdXRlZF0nO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==