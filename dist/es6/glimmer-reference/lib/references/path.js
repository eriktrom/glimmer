import { EMPTY_CACHE } from '../utils';
import { DictSet, dict } from 'glimmer-util';
import Meta from '../meta';
import ForkedReference from './forked';
import { PropertyReference } from './descriptors';
import PushPullReference from './push-pull';
class UnchainFromPath {
    constructor(set, child) {
        this.set = set;
        this.child = child;
    }
    destroy() {
        this.set.delete(this.child);
    }
}
export class PathReference extends PushPullReference {
    constructor(parent, property) {
        super();
        this.cache = EMPTY_CACHE;
        this.inner = null;
        this.chains = null;
        this.notifyChildren = null;
        this.lastParentValue = EMPTY_CACHE;
        this._guid = null;
        this.parent = parent;
        this.property = property;
    }
    isDirty() { return this.cache === EMPTY_CACHE || (this.inner && this.inner.isDirty()); }
    value() {
        if (!this.isDirty())
            return this.cache;
        let { lastParentValue, property, inner } = this;
        let parentValue = this._parentValue();
        if (parentValue === null || parentValue === undefined) {
            return (this.cache = undefined);
        }
        if (lastParentValue === parentValue) {
            inner = this.inner;
        }
        else {
            let ReferenceType = typeof parentValue === 'object' ? Meta.for(parentValue).referenceTypeFor(property) : PropertyReference;
            inner = this.inner = new ReferenceType(parentValue, property, this);
        }
        // if (typeof parentValue === 'object') {
        //   Meta.for(parentValue).addReference(property, this);
        // }
        return (this.cache = inner.value());
    }
    notify() {
        // this._notify();
        super.notify();
    }
    get(prop) {
        let chains = this._getChains();
        if (prop in chains)
            return chains[prop];
        return (chains[prop] = new PathReference(this, prop));
    }
    chain(child) {
        let notifySet = this._getNotifyChildren();
        notifySet.add(child);
        return new UnchainFromPath(notifySet, child);
    }
    fork() {
        return new ForkedReference(this);
    }
    label() {
        return '[reference Direct]';
    }
    _getNotifyChildren() {
        if (this.notifyChildren)
            return this.notifyChildren;
        return (this.notifyChildren = new DictSet());
    }
    _getChains() {
        if (this.chains)
            return this.chains;
        return (this.chains = dict());
    }
    _parentValue() {
        var parent = this.parent.value();
        this.lastParentValue = parent;
        return parent;
    }
}
//# sourceMappingURL=data:application/json;base64,