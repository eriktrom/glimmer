import { PropertyReference } from './references/descriptors';
import RootReference from './references/root';
import { DictSet, dict } from 'glimmer-util';
const NOOP_DESTROY = { destroy() { } };
class ConstPath {
    constructor(parent, property) {
        this.parent = parent;
    }
    chain() { return NOOP_DESTROY; }
    isDirty() { return false; }
    destroy() { }
    notify() { }
    value() {
        return this.parent[this.property];
    }
    get(prop) {
        return new ConstPath(this.parent[this.property], prop);
    }
}
class ConstRoot {
    constructor(value) {
        this.dirty = false;
        this.inner = value;
    }
    update(inner) {
        this.inner = inner;
        this.dirty = true;
    }
    chain() { return NOOP_DESTROY; }
    isDirty() { return this.dirty; }
    destroy() { }
    notify() { }
    value() {
        this.dirty = false;
        return this.inner;
    }
    referenceFromParts(parts) {
        throw new Error("Not implemented");
    }
    chainFor(prop) {
        throw new Error("Not implemented");
    }
    get(prop) {
        return new ConstPath(this.inner, prop);
    }
}
class ConstMeta /*implements IMeta*/ {
    constructor(object) {
        this.object = object;
    }
    root() {
        return new ConstRoot(this.object);
    }
}
export const CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";
const hasOwnProperty = Object.hasOwnProperty;
class Meta {
    constructor(object, { RootReferenceFactory, DefaultPathReferenceFactory }) {
        this.references = null;
        this.slots = null;
        this.referenceTypes = null;
        this.propertyMetadata = null;
        this.object = object;
        this.RootReferenceFactory = RootReferenceFactory || RootReference;
        this.DefaultPathReferenceFactory = DefaultPathReferenceFactory || PropertyReference;
    }
    static for(obj) {
        if (obj === null || obj === undefined)
            return new Meta(obj, {});
        if (hasOwnProperty.call(obj, '_meta') && obj._meta)
            return obj._meta;
        if (!Object.isExtensible(obj))
            return new ConstMeta(obj);
        let MetaToUse = Meta;
        if (obj.constructor && obj.constructor[CLASS_META]) {
            let classMeta = obj.constructor[CLASS_META];
            MetaToUse = classMeta.InstanceMetaConstructor;
        }
        else if (obj[CLASS_META]) {
            MetaToUse = obj[CLASS_META].InstanceMetaConstructor;
        }
        return (obj._meta = new MetaToUse(obj, {}));
    }
    static exists(obj) {
        return typeof obj === 'object' && obj._meta;
    }
    static metadataForProperty(key) {
        return null;
    }
    addReference(property, reference) {
        var refs = this.references = this.references || dict();
        var set = refs[property] = refs[property] || new DictSet();
        set.add(reference);
    }
    addReferenceTypeFor(property, type) {
        this.referenceTypes = this.referenceTypes || dict();
        this.referenceTypes[property] = type;
    }
    referenceTypeFor(property) {
        if (!this.referenceTypes)
            return PropertyReference;
        return this.referenceTypes[property] || PropertyReference;
    }
    removeReference(property, reference) {
        if (!this.references)
            return;
        var set = this.references[property];
        set.delete(reference);
    }
    getReferenceTypes() {
        this.referenceTypes = this.referenceTypes || dict();
        return this.referenceTypes;
    }
    referencesFor(property) {
        if (!this.references)
            return;
        return this.references[property];
    }
    getSlots() {
        return (this.slots = this.slots || dict());
    }
    root() {
        return (this.rootCache = this.rootCache || new this.RootReferenceFactory(this.object));
    }
}
export default Meta;
export function metaFor(obj) {
    return Meta.for(obj);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItcmVmZXJlbmNlL2xpYi9tZXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEI7T0FDckQsYUFBYSxNQUFNLG1CQUFtQjtPQUl0QyxFQUFRLE9BQU8sRUFBZ0IsSUFBSSxFQUFFLE1BQU0sY0FBYztBQVloRSxNQUFNLFlBQVksR0FBRyxFQUFFLE9BQU8sS0FBSSxDQUFDLEVBQUUsQ0FBQztBQUV0QztJQUlFLFlBQVksTUFBVyxFQUFFLFFBQXdCO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLEtBQUssTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDaEMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNCLE9BQU8sS0FBSSxDQUFDO0lBQ1osTUFBTSxLQUFJLENBQUM7SUFFWCxLQUFLO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBb0I7UUFDdEIsTUFBTSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7QUFDSCxDQUFDO0FBRUQ7SUFJRSxZQUFZLEtBQUs7UUFGVCxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBR3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBVTtRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxLQUFLLEtBQUssTUFB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R0FBRyxJQUFJLENBQUMsVUFBVSxDQUFTLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQXdCLENBQUM7UUFDMUUsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELGFBQWEsQ0FBQyxRQUF3QjtRQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQVMsUUFBUSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSTtRQUNGLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RixDQUFDO0FBQ0gsQ0FBQztBQUVELGVBQWUsSUFBSSxDQUFDO0FBTXBCLHdCQUF3QixHQUFRO0lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eVJlZmVyZW5jZSB9IGZyb20gJy4vcmVmZXJlbmNlcy9kZXNjcmlwdG9ycyc7XG5pbXBvcnQgUm9vdFJlZmVyZW5jZSBmcm9tICcuL3JlZmVyZW5jZXMvcm9vdCc7XG5pbXBvcnQgeyBNZXRhT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgSW50ZXJuZWRTdHJpbmcgfSBmcm9tICdnbGltbWVyLXV0aWwnO1xuXG5pbXBvcnQgeyBEaWN0LCBEaWN0U2V0LCBIYXNHdWlkLCBTZXQsIGRpY3QgfSBmcm9tICdnbGltbWVyLXV0aWwnO1xuXG5pbXBvcnQge1xuICBSb290UmVmZXJlbmNlRmFjdG9yeSxcbiAgUGF0aFJlZmVyZW5jZUZhY3RvcnksXG4gIFBhdGhSZWZlcmVuY2UgYXMgSVBhdGhSZWZlcmVuY2UsXG4gIE1ldGEgYXMgSU1ldGEsXG4gIFJvb3RSZWZlcmVuY2UgYXMgSVJvb3RSZWZlcmVuY2Vcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7IElubmVyUmVmZXJlbmNlRmFjdG9yeSB9IGZyb20gJy4vcmVmZXJlbmNlcy9kZXNjcmlwdG9ycyc7XG5cbmNvbnN0IE5PT1BfREVTVFJPWSA9IHsgZGVzdHJveSgpIHt9IH07XG5cbmNsYXNzIENvbnN0UGF0aCBpbXBsZW1lbnRzIElQYXRoUmVmZXJlbmNlIHtcbiAgcHJpdmF0ZSBwYXJlbnQ6IGFueTtcbiAgcHJpdmF0ZSBwcm9wZXJ0eTogSW50ZXJuZWRTdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBhbnksIHByb3BlcnR5OiBJbnRlcm5lZFN0cmluZykge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB9XG5cbiAgY2hhaW4oKSB7IHJldHVybiBOT09QX0RFU1RST1k7IH1cbiAgaXNEaXJ0eSgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGRlc3Ryb3koKSB7fVxuICBub3RpZnkoKSB7fVxuXG4gIHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudFs8c3RyaW5nPnRoaXMucHJvcGVydHldO1xuICB9XG5cbiAgZ2V0KHByb3A6IEludGVybmVkU3RyaW5nKTogSVBhdGhSZWZlcmVuY2Uge1xuICAgIHJldHVybiBuZXcgQ29uc3RQYXRoKHRoaXMucGFyZW50WzxzdHJpbmc+dGhpcy5wcm9wZXJ0eV0sIHByb3ApO1xuICB9XG59XG5cbmNsYXNzIENvbnN0Um9vdCBpbXBsZW1lbnRzIElSb290UmVmZXJlbmNlIHtcbiAgcHJpdmF0ZSBpbm5lcjogYW55O1xuICBwcml2YXRlIGRpcnR5ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLmlubmVyID0gdmFsdWU7XG4gIH1cblxuICB1cGRhdGUoaW5uZXI6IGFueSkge1xuICAgIHRoaXMuaW5uZXIgPSBpbm5lcjtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfVxuXG4gIGNoYWluKCkgeyByZXR1cm4gTk9PUF9ERVNUUk9ZOyB9XG4gIGlzRGlydHkoKSB7IHJldHVybiB0aGlzLmRpcnR5OyB9XG4gIGRlc3Ryb3koKSB7fVxuICBub3RpZnkoKSB7fVxuXG4gIHZhbHVlKCk6IGFueSB7XG4gICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmlubmVyO1xuICB9XG5cbiAgcmVmZXJlbmNlRnJvbVBhcnRzKHBhcnRzOiBJbnRlcm5lZFN0cmluZ1tdKTogSVBhdGhSZWZlcmVuY2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxuXG4gIGNoYWluRm9yKHByb3A6IEludGVybmVkU3RyaW5nKTogSVBhdGhSZWZlcmVuY2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxuXG4gIGdldChwcm9wOiBJbnRlcm5lZFN0cmluZyk6IElQYXRoUmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0UGF0aCh0aGlzLmlubmVyLCBwcm9wKTtcbiAgfVxufVxuXG5jbGFzcyBDb25zdE1ldGEgLyppbXBsZW1lbnRzIElNZXRhKi8ge1xuICBwcml2YXRlIG9iamVjdDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogYW55KSB7XG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gIH1cblxuICByb290KCk6IElSb290UmVmZXJlbmNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0Um9vdCh0aGlzLm9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IENMQVNTX01FVEEgPSBcImRmOGJlNGM4LTRlODktNDRlMi1hOGY5LTU1MGM4ZGFjZGNhN1wiO1xuXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcblxuY2xhc3MgTWV0YSBpbXBsZW1lbnRzIElNZXRhLCBIYXNHdWlkIHtcbiAgc3RhdGljIGZvcihvYmo6IGFueSk6IElNZXRhIHtcbiAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IE1ldGEob2JqLCB7fSk7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCAnX21ldGEnKSAmJiBvYmouX21ldGEpIHJldHVybiBvYmouX21ldGE7XG4gICAgaWYgKCFPYmplY3QuaXNFeHRlbnNpYmxlKG9iaikpIHJldHVybiA8YW55Pm5ldyBDb25zdE1ldGEob2JqKTtcblxuICAgIGxldCBNZXRhVG9Vc2U6IHR5cGVvZiBNZXRhID0gTWV0YTtcblxuICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yWzxzdHJpbmc+Q0xBU1NfTUVUQV0pIHtcbiAgICAgIGxldCBjbGFzc01ldGE6IENsYXNzTWV0YSA9IG9iai5jb25zdHJ1Y3Rvcls8c3RyaW5nPkNMQVNTX01FVEFdO1xuICAgICAgTWV0YVRvVXNlID0gY2xhc3NNZXRhLkluc3RhbmNlTWV0YUNvbnN0cnVjdG9yO1xuICAgIH0gZWxzZSBpZiAob2JqWzxzdHJpbmc+Q0xBU1NfTUVUQV0pIHtcbiAgICAgIE1ldGFUb1VzZSA9IG9ials8c3RyaW5nPkNMQVNTX01FVEFdLkluc3RhbmNlTWV0YUNvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIHJldHVybiAob2JqLl9tZXRhID0gbmV3IE1ldGFUb1VzZShvYmosIHt9KSk7XG4gIH1cblxuICBzdGF0aWMgZXhpc3RzKG9iajogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iai5fbWV0YTtcbiAgfVxuXG4gIHN0YXRpYyBtZXRhZGF0YUZvclByb3BlcnR5KGtleTogSW50ZXJuZWRTdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBvYmplY3Q6IGFueTtcbiAgcHJpdmF0ZSBSb290UmVmZXJlbmNlRmFjdG9yeTogUm9vdFJlZmVyZW5jZUZhY3Rvcnk7XG4gIHByaXZhdGUgRGVmYXVsdFBhdGhSZWZlcmVuY2VGYWN0b3J5OiBJbm5lclJlZmVyZW5jZUZhY3Rvcnk7XG4gIHByaXZhdGUgcm9vdENhY2hlOiBJUm9vdFJlZmVyZW5jZTtcbiAgcHJpdmF0ZSByZWZlcmVuY2VzOiBEaWN0PERpY3RTZXQ8SVBhdGhSZWZlcmVuY2UgJiBIYXNHdWlkPj4gPSBudWxsO1xuICBwdWJsaWMgX2d1aWQ7XG4gIHByb3RlY3RlZCBzbG90czogRGljdDxhbnk+ID0gbnVsbDtcbiAgcHJvdGVjdGVkIHJlZmVyZW5jZVR5cGVzOiBEaWN0PElubmVyUmVmZXJlbmNlRmFjdG9yeT4gPSBudWxsO1xuICBwcm90ZWN0ZWQgcHJvcGVydHlNZXRhZGF0YTogRGljdDxhbnk+ID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihvYmplY3Q6IGFueSwgeyBSb290UmVmZXJlbmNlRmFjdG9yeSwgRGVmYXVsdFBhdGhSZWZlcmVuY2VGYWN0b3J5IH06IE1ldGFPcHRpb25zKSB7XG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgdGhpcy5Sb290UmVmZXJlbmNlRmFjdG9yeSA9IFJvb3RSZWZlcmVuY2VGYWN0b3J5IHx8IFJvb3RSZWZlcmVuY2U7XG4gICAgdGhpcy5EZWZhdWx0UGF0aFJlZmVyZW5jZUZhY3RvcnkgPSBEZWZhdWx0UGF0aFJlZmVyZW5jZUZhY3RvcnkgfHwgUHJvcGVydHlSZWZlcmVuY2U7XG4gIH1cblxuICBhZGRSZWZlcmVuY2UocHJvcGVydHk6IEludGVybmVkU3RyaW5nLCByZWZlcmVuY2U6IElQYXRoUmVmZXJlbmNlICYgSGFzR3VpZCkge1xuICAgIHZhciByZWZzID0gdGhpcy5yZWZlcmVuY2VzID0gdGhpcy5yZWZlcmVuY2VzIHx8IGRpY3Q8RGljdFNldDxJUGF0aFJlZmVyZW5jZSAmIEhhc0d1aWQ+PigpO1xuICAgIHZhciBzZXQgPSByZWZzWzxzdHJpbmc+cHJvcGVydHldID0gcmVmc1s8c3RyaW5nPnByb3BlcnR5XSB8fCBuZXcgRGljdFNldDxJUGF0aFJlZmVyZW5jZSAmIEhhc0d1aWQ+KCk7XG4gICAgc2V0LmFkZChyZWZlcmVuY2UpO1xuICB9XG5cbiAgYWRkUmVmZXJlbmNlVHlwZUZvcihwcm9wZXJ0eTogSW50ZXJuZWRTdHJpbmcsIHR5cGU6IFBhdGhSZWZlcmVuY2VGYWN0b3J5KSB7XG4gICAgdGhpcy5yZWZlcmVuY2VUeXBlcyA9IHRoaXMucmVmZXJlbmNlVHlwZXMgfHwgZGljdDxQYXRoUmVmZXJlbmNlRmFjdG9yeT4oKTtcbiAgICB0aGlzLnJlZmVyZW5jZVR5cGVzWzxzdHJpbmc+cHJvcGVydHldID0gdHlwZTtcbiAgfVxuXG4gIHJlZmVyZW5jZVR5cGVGb3IocHJvcGVydHk6IEludGVybmVkU3RyaW5nKTogSW5uZXJSZWZlcmVuY2VGYWN0b3J5IHtcbiAgICBpZiAoIXRoaXMucmVmZXJlbmNlVHlwZXMpIHJldHVybiBQcm9wZXJ0eVJlZmVyZW5jZTtcbiAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VUeXBlc1s8c3RyaW5nPnByb3BlcnR5XSB8fCBQcm9wZXJ0eVJlZmVyZW5jZTtcbiAgfVxuXG4gIHJlbW92ZVJlZmVyZW5jZShwcm9wZXJ0eTogSW50ZXJuZWRTdHJpbmcsIHJlZmVyZW5jZTogSVBhdGhSZWZlcmVuY2UgJiBIYXNHdWlkKSB7XG4gICAgaWYgKCF0aGlzLnJlZmVyZW5jZXMpIHJldHVybjtcbiAgICB2YXIgc2V0ID0gdGhpcy5yZWZlcmVuY2VzWzxzdHJpbmc+cHJvcGVydHldO1xuICAgIHNldC5kZWxldGUocmVmZXJlbmNlKTtcbiAgfVxuXG4gIGdldFJlZmVyZW5jZVR5cGVzKCk6IERpY3Q8SW5uZXJSZWZlcmVuY2VGYWN0b3J5PiB7XG4gICAgdGhpcy5yZWZlcmVuY2VUeXBlcyA9IHRoaXMucmVmZXJlbmNlVHlwZXMgfHwgZGljdDxQYXRoUmVmZXJlbmNlRmFjdG9yeT4oKTtcbiAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VUeXBlcztcbiAgfVxuXG4gIHJlZmVyZW5jZXNGb3IocHJvcGVydHk6IEludGVybmVkU3RyaW5nKTogU2V0PElQYXRoUmVmZXJlbmNlPiB7XG4gICAgaWYgKCF0aGlzLnJlZmVyZW5jZXMpIHJldHVybjtcbiAgICByZXR1cm4gdGhpcy5yZWZlcmVuY2VzWzxzdHJpbmc+cHJvcGVydHldO1xuICB9XG5cbiAgZ2V0U2xvdHMoKSB7XG4gICAgcmV0dXJuICh0aGlzLnNsb3RzID0gdGhpcy5zbG90cyB8fCBkaWN0KCkpO1xuICB9XG5cbiAgcm9vdCgpOiBJUm9vdFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuICh0aGlzLnJvb3RDYWNoZSA9IHRoaXMucm9vdENhY2hlIHx8IG5ldyB0aGlzLlJvb3RSZWZlcmVuY2VGYWN0b3J5KHRoaXMub2JqZWN0KSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWV0YTtcblxuaW50ZXJmYWNlIENsYXNzTWV0YSB7XG4gIEluc3RhbmNlTWV0YUNvbnN0cnVjdG9yOiB0eXBlb2YgTWV0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ldGFGb3Iob2JqOiBhbnkpOiBJTWV0YSB7XG4gIHJldHVybiBNZXRhLmZvcihvYmopO1xufVxuIl19