import { clear, move } from './bounds';
import { ElementStack } from './builder';
import { Stack, LinkedList, dict } from 'glimmer-util';
import { ConstReference } from 'glimmer-reference';
import { EvaluatedArgs } from './compiled/expressions/args';
export class VM {
    constructor(env, scope, elementStack) {
        this.scopeStack = new Stack();
        this.updatingOpcodeStack = new Stack();
        this.listBlockStack = new Stack();
        this.frame = new FrameStack();
        this.env = env;
        this.elementStack = elementStack;
        this.scopeStack.push(scope);
    }
    static initial(env, { elementStack, self, size }) {
        let scope = env.createRootScope(size).init({ self });
        return new VM(env, scope, elementStack);
    }
    goto(op) {
        this.frame.goto(op);
    }
    enter(ops) {
        this.stack().openBlock();
        let updating = new LinkedList();
        let tryOpcode = new TryOpcode({ ops, vm: this, updating });
        this.didEnter(tryOpcode, updating);
    }
    enterWithKey(key, ops) {
        this.stack().openBlock();
        let updating = new LinkedList();
        let tryOpcode = new TryOpcode({ ops, vm: this, updating });
        this.listBlockStack.current.map[key] = tryOpcode;
        this.didEnter(tryOpcode, updating);
    }
    enterList(manager, ops) {
        let updating = new LinkedList();
        this.stack().openBlockList(updating);
        let opcode = new ListBlockOpcode({ ops, vm: this, updating, manager });
        this.listBlockStack.push(opcode);
        this.didEnter(opcode, updating);
    }
    didEnter(opcode, updating) {
        this.updateWith(opcode);
        this.updatingOpcodeStack.push(updating);
    }
    exit() {
        this.stack().closeBlock();
        this.updatingOpcodeStack.pop();
    }
    exitList() {
        this.exit();
        this.listBlockStack.pop();
    }
    updateWith(opcode) {
        this.updatingOpcodeStack.current.insertBefore(opcode, null);
    }
    stack() {
        return this.elementStack;
    }
    scope() {
        return this.scopeStack.current;
    }
    pushFrame(ops, args, templates, frameDidPop) {
        this.frame.push(ops);
        if (args)
            this.frame.setArgs(args);
        if (templates)
            this.frame.setTemplates(templates);
        if (frameDidPop)
            this.frame.setPopHandler(frameDidPop);
    }
    popFrame() {
        let { frame } = this;
        frame.pop();
        let current = frame.getCurrent();
        if (current === null)
            return;
    }
    pushChildScope() {
        this.scopeStack.push(this.scopeStack.current.child());
    }
    popScope() {
        this.scopeStack.pop();
    }
    /// SCOPE HELPERS
    getSelf() {
        return this.scope().getSelf();
    }
    referenceForSymbol(symbol) {
        return this.scope().getSymbol(symbol);
    }
    /// EXECUTION
    execute(opcodes, initialize) {
        let { elementStack, frame, updatingOpcodeStack, env } = this;
        let self = this.scope().getSelf();
        elementStack.openBlock();
        updatingOpcodeStack.push(new LinkedList());
        frame.push(opcodes);
        if (initialize)
            initialize(this);
        let opcode;
        while (frame.hasOpcodes()) {
            if (opcode = frame.nextStatement())
                opcode.evaluate(this);
        }
        return new RenderResult(updatingOpcodeStack.pop(), elementStack.closeBlock(), env.getDOM(), self);
    }
    evaluateOpcode(opcode) {
        opcode.evaluate(this);
    }
    invoke(template, args, templates) {
        this.elementStack.openBlock();
        let evaledArgs = args.evaluate(this);
        template.compile(this.env);
        this.pushFrame(template.ops, evaledArgs, templates, this);
    }
    frameDidPop() {
        this.elementStack.closeBlock();
    }
    evaluateOperand(expr) {
        this.frame.setOperand(expr.evaluate(this));
    }
    evaluateArgs(args) {
        let evaledArgs = this.frame.setArgs(args.evaluate(this));
        this.frame.setOperand(evaledArgs.positional.at(0));
    }
    bindArgs(positionalParams, namedParams) {
        let args = this.frame.getArgs();
        if (!args)
            return;
        let { positional, named } = args;
        let scope = this.scope();
        if (positionalParams) {
            for (let i = 0; i < positionalParams.length; i++) {
                let symbol = positionalParams[i];
                if (symbol !== 0) {
                    scope.bindSymbol(symbol, positional.at(i));
                }
            }
        }
        if (namedParams) {
            Object.keys(namedParams).forEach(p => {
                scope.bindSymbol(namedParams[p], named.get(p));
            });
        }
    }
    setTemplates(templates) {
        this.frame.setTemplates(templates);
    }
    invokeTemplate(name) {
        let template = this.frame.getTemplates()[name].raw;
        template.compile(this.env);
        this.pushFrame(template.ops);
    }
}
export default VM;
export class UpdatingVM {
    constructor(dom) {
        this.frameStack = new Stack();
        this.dom = dom;
    }
    execute(opcodes, handler) {
        let { frameStack } = this;
        this.try(opcodes, handler);
        while (true) {
            if (frameStack.isEmpty())
                break;
            let opcode = this.frameStack.current.nextStatement();
            if (opcode === null) {
                this.frameStack.pop();
                continue;
            }
            opcode.evaluate(this);
        }
    }
    try(ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(this, ops, handler));
    }
    throw(initialize) {
        this.frameStack.current.handleException(initialize);
    }
    evaluateOpcode(opcode) {
        opcode.evaluate(this);
    }
}
class BlockOpcode {
    constructor({ ops, vm, updating }) {
        this.type = "block";
        this.next = null;
        this.prev = null;
        this.ops = ops;
        this.updating = updating;
        this.env = vm.env;
        this.scope = vm.scope();
        this.bounds = vm.stack().block();
    }
    parentElement() {
        return this.bounds.parentElement();
    }
    firstNode() {
        return this.bounds.firstNode();
    }
    lastNode() {
        return this.bounds.lastNode();
    }
    evaluate(vm) {
        vm.try(this.updating, null);
    }
}
class TryOpcode extends BlockOpcode {
    constructor(...args) {
        super(...args);
        this.type = "try";
    }
    evaluate(vm) {
        vm.try(this.updating, this);
    }
    handleException(initialize) {
        let stack = new ElementStack({
            dom: this.env.getDOM(),
            parentNode: this.bounds.parentElement(),
            nextSibling: initialize ? this.bounds.lastNode().nextSibling : clear(this.bounds)
        });
        let vm = new VM(this.env, this.scope, stack);
        let result = vm.execute(this.ops, initialize);
        if (!initialize) {
            this.updating = result.opcodes();
        }
        this.bounds = result;
    }
}
class ListRevalidationDelegate {
    constructor(opcode) {
        let { map, updating } = opcode;
        this.opcode = opcode;
        this.map = map;
        this.updating = updating;
    }
    insert(key, item, before) {
        let { map, opcode, updating } = this;
        let nextSibling = null;
        let reference = null;
        if (before) {
            reference = map[before];
            nextSibling = reference.bounds.firstNode();
        }
        let vm = opcode.vmForInsertion(nextSibling);
        let tryOpcode;
        vm.execute(opcode.ops, vm => {
            vm.frame.setArgs(EvaluatedArgs.positional([item]));
            vm.frame.setOperand(item);
            vm.frame.setCondition(new ConstReference(true));
            vm.frame.setKey(key);
            tryOpcode = new TryOpcode({
                vm,
                ops: opcode.ops,
                updating: vm.updatingOpcodeStack.current
            });
        });
        updating.insertBefore(tryOpcode, reference);
        map[key] = tryOpcode;
    }
    retain(key, item) {
    }
    move(key, item, before) {
        let { map, updating } = this;
        let entry = map[key];
        let reference = map[before] || null;
        if (before) {
            move(entry, reference.firstNode());
        }
        else {
            move(entry, this.opcode.lastNode());
        }
        updating.remove(entry);
        updating.insertBefore(entry, reference);
    }
    delete(key) {
        let { map } = this;
        let opcode = map[key];
        clear(opcode);
        this.updating.remove(opcode);
        delete map[key];
    }
    done() {
        // this.vm.registers.condition = new ConstReference(false);
    }
}
class ListBlockOpcode extends BlockOpcode {
    constructor(options) {
        super(options);
        this.type = "list-block";
        this.map = dict();
        this.manager = options.manager;
    }
    firstNode() {
        let head = this.updating.head();
        if (head) {
            return head.firstNode();
        }
        else {
            return this.lastNode();
        }
    }
    lastNode() {
        return this.bounds.lastNode();
    }
    evaluate(vm) {
        // Revalidate list somehow....
        let delegate = new ListRevalidationDelegate(this);
        this.manager.sync(delegate);
        // Run now-updated updating opcodes
        super.evaluate(vm);
    }
    vmForInsertion(nextSibling) {
        let stack = new ElementStack({
            dom: this.env.getDOM(),
            parentNode: this.bounds.parentElement(),
            nextSibling: nextSibling || this.bounds.lastNode()
        });
        return new VM(this.env, this.scope, stack);
    }
}
class UpdatingVMFrame {
    constructor(vm, ops, handler) {
        this.vm = vm;
        this.ops = ops;
        this.current = ops.head();
        this.exceptionHandler = handler;
    }
    nextStatement() {
        let { current, ops } = this;
        if (current)
            this.current = ops.nextNode(current);
        return current;
    }
    handleException(initialize) {
        this.exceptionHandler.handleException(initialize);
    }
}
export class RenderResult {
    constructor(updating, bounds, dom, self) {
        this.updating = updating;
        this.bounds = bounds;
        this.dom = dom;
        this.self = self;
    }
    rerender(self) {
        let vm = new UpdatingVM(this.dom);
        if (self !== undefined) {
            this.self.update(self);
        }
        vm.execute(this.updating, this);
    }
    parentElement() {
        return this.bounds.parentElement();
    }
    firstNode() {
        return this.bounds.firstNode();
    }
    lastNode() {
        return this.bounds.lastNode();
    }
    opcodes() {
        return this.updating;
    }
    handleException() {
        throw "this should never happen";
    }
}
class Frame {
    constructor(ops) {
        this.operand = null;
        this.args = null;
        this.condition = null;
        this.iterator = null;
        this.key = null;
        this.templates = null;
        this.popHandler = null;
        this.ops = ops;
        this.op = ops.head();
    }
}
class FrameStack {
    constructor() {
        this.frames = [];
        this.frame = undefined;
    }
    push(ops) {
        let frame = (this.frame === undefined) ? (this.frame = 0) : ++this.frame;
        if (this.frames.length <= frame) {
            this.frames.push(null);
        }
        this.frames[frame] = new Frame(ops);
    }
    pop() {
        let popHandler = this.getPopHandler();
        if (popHandler)
            popHandler.frameDidPop();
        let { frames, frame } = this;
        frames[frame] = null;
        this.frame = frame === 0 ? undefined : frame - 1;
    }
    getOps() {
        return this.frames[this.frame].ops;
    }
    getCurrent() {
        return this.frames[this.frame].op;
    }
    setCurrent(op) {
        return this.frames[this.frame].op = op;
    }
    getOperand() {
        return this.frames[this.frame].operand;
    }
    setOperand(operand) {
        return this.frames[this.frame].operand = operand;
    }
    getArgs() {
        return this.frames[this.frame].args;
    }
    setArgs(args) {
        return this.frames[this.frame].args = args;
    }
    getCondition() {
        return this.frames[this.frame].condition;
    }
    setCondition(condition) {
        return this.frames[this.frame].condition = condition;
    }
    getIterator() {
        return this.frames[this.frame].iterator;
    }
    setIterator(iterator) {
        return this.frames[this.frame].iterator = iterator;
    }
    getKey() {
        return this.frames[this.frame].key;
    }
    setKey(key) {
        return this.frames[this.frame].key = key;
    }
    getTemplates() {
        return this.frames[this.frame].templates;
    }
    setTemplates(templates) {
        return this.frames[this.frame].templates = templates;
    }
    getPopHandler() {
        return this.frames[this.frame].popHandler;
    }
    setPopHandler(handler) {
        return this.frames[this.frame].popHandler = handler;
    }
    goto(op) {
        this.setCurrent(op);
    }
    hasOpcodes() {
        return this.frame !== undefined;
    }
    nextStatement() {
        let op = this.frames[this.frame].op;
        let ops = this.getOps();
        if (op) {
            this.setCurrent(ops.nextNode(op));
            return op;
        }
        else {
            this.pop();
            return null;
        }
    }
}
var Slots;
(function (Slots) {
    Slots[Slots["Ops"] = 0] = "Ops";
    Slots[Slots["Current"] = 1] = "Current";
    Slots[Slots["Operand"] = 2] = "Operand";
    Slots[Slots["Args"] = 3] = "Args";
    Slots[Slots["Condition"] = 4] = "Condition";
    Slots[Slots["Iterator"] = 5] = "Iterator";
    Slots[Slots["Key"] = 6] = "Key";
    Slots[Slots["Templates"] = 7] = "Templates";
})(Slots || (Slots = {}));
//# sourceMappingURL=data:application/json;base64,