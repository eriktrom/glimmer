import { YieldSyntax } from "./syntax/core";
import { NULL_REFERENCE } from './references';
import { ConstReference } from 'glimmer-reference';
import { intern, installGuid } from 'glimmer-util';
export class Scope {
    constructor(parent, references) {
        this.references = references;
        this.parent = parent;
    }
    static root(parent, size = 0) {
        let refs = new Array(size + 1);
        for (let i = 0; i <= size; i++) {
            refs[i] = NULL_REFERENCE;
        }
        return new Scope(parent, refs);
    }
    init({ self }) {
        this.references[0] = self;
        return this;
    }
    getSelf() {
        return this.references[0];
    }
    getSymbol(symbol) {
        return this.references[symbol];
    }
    bindSymbol(symbol, value) {
        this.references[symbol] = value;
    }
    child() {
        return new Scope(this, this.references.slice());
    }
}
export class Environment {
    constructor(dom, meta) {
        this.createdComponents = [];
        this.createdHooks = [];
        this.updatedComponents = [];
        this.updatedHooks = [];
        this.dom = dom;
        this.meta = meta;
    }
    getDOM() { return this.dom; }
    getIdentity(object) {
        return intern(installGuid(object) + '');
    }
    createRootScope(size) {
        return Scope.root(null, size);
    }
    statement(statement) {
        let type = statement.type;
        if (type === 'append') {
            let append = statement;
            let unknown = append.value.type === 'unknown' ? append.value : null;
            let helper = append.value.type === 'helper' ? append.value : null;
            if (unknown && unknown.simplePath() === 'yield') {
                return new YieldSyntax({ args: null });
            }
            else if (helper && helper.ref.simplePath() === 'yield') {
                return new YieldSyntax({ args: helper.args });
            }
        }
        return statement;
    }
    begin() {
        this.createdComponents = [];
        this.createdHooks = [];
        this.updatedComponents = [];
        this.updatedHooks = [];
    }
    didCreate(component, hooks) {
        this.createdComponents.push(component);
        this.createdHooks.push(hooks);
    }
    didUpdate(component, hooks) {
        this.updatedComponents.push(component);
        this.updatedHooks.push(hooks);
    }
    commit() {
        this.createdComponents.forEach((component, i) => {
            let hooks = this.createdHooks[i];
            hooks.didInsertElement(component);
            hooks.didRender(component);
        });
        this.updatedComponents.forEach((component, i) => {
            let hooks = this.updatedHooks[i];
            hooks.didUpdate(component);
            hooks.didRender(component);
        });
    }
    iteratorFor(iterable) {
        let position = 0;
        let len = iterable.value().length;
        return {
            next() {
                if (position >= len)
                    return { done: true, value: undefined };
                position++;
                return {
                    done: false,
                    value: iterable.get(intern("" + (position - 1)))
                };
            }
        };
    }
}
export default Environment;
export function helper(h) {
    return new ConstReference(h);
}
//# sourceMappingURL=data:application/json;base64,