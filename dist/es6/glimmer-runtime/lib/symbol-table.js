import { dict, assign } from 'glimmer-util';
export default class SymbolTable {
    constructor(parent, template) {
        this.locals = dict();
        this.size = 1;
        this.parent = parent;
        this.top = parent ? parent.top : this;
        this.template = template;
    }
    cloneFor(template) {
        let table = new SymbolTable(this.parent, template);
        table.locals = assign({}, this.locals);
        table.size = this.size;
        return table;
    }
    initPositional(positional) {
        if (positional)
            positional.forEach(s => this.putPositional(s));
        return this;
    }
    initNamed(named) {
        if (named)
            named.forEach(s => this.locals[s] = this.size++);
        return this;
    }
    putNamed(names) {
        let top = this.top;
        names.forEach(s => top.putSingleNamed(s));
    }
    get(name) {
        let { locals, parent } = this;
        let symbol = locals[name];
        if (!symbol && parent) {
            symbol = parent.get(name);
        }
        return symbol;
    }
    isTop() {
        return this.top === this;
    }
    putSingleNamed(name) {
        if (!this.locals[name]) {
            this.locals[name] = this.size++;
            this.template.named = this.template.named || [];
            this.template.named.push(name);
        }
    }
    putPositional(name) {
        let position = this.locals[name];
        if (!position) {
            position = this.locals[name] = this.top.size++;
        }
        return position;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9sLXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2xpbW1lci1ydW50aW1lL2xpYi9zeW1ib2wtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBa0IsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWM7QUFHM0Q7SUFPRSxZQUFZLE1BQW1CLEVBQUUsUUFBcUI7UUFIOUMsV0FBTSxHQUFHLElBQUksRUFBVSxDQUFDO1FBQ3pCLFNBQUksR0FBRyxDQUFDLENBQUM7UUFHZCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQXFCO1FBQzVCLElBQUksS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxjQUFjLENBQUMsVUFBNEI7UUFDekMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQXVCO1FBQy9CLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFcEUsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBdUI7UUFDOUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNuQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFvQjtRQUN0QixJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUU5QixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQVMsSUFBSSxDQUFDLENBQUM7UUFFbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRU8sY0FBYyxDQUFDLElBQW9CO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBUyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDO0lBQ0gsQ0FBQztJQUVPLGFBQWEsQ0FBQyxJQUFvQjtRQUN4QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFTLElBQUksQ0FBQyxDQUFDO1FBRXpDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNkLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFTLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDekQsQ0FBQztRQUVELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEIsQ0FBQztBQUNILENBQUM7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEludGVybmVkU3RyaW5nLCBkaWN0LCBhc3NpZ24gfSBmcm9tICdnbGltbWVyLXV0aWwnO1xuaW1wb3J0IHsgUmF3VGVtcGxhdGUgfSBmcm9tICcuL2NvbXBpbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3ltYm9sVGFibGUge1xuICBwcml2YXRlIHBhcmVudDogU3ltYm9sVGFibGU7XG4gIHByaXZhdGUgdG9wOiBTeW1ib2xUYWJsZTtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTogUmF3VGVtcGxhdGU7XG4gIHByaXZhdGUgbG9jYWxzID0gZGljdDxudW1iZXI+KCk7XG4gIHB1YmxpYyBzaXplID0gMTtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IFN5bWJvbFRhYmxlLCB0ZW1wbGF0ZTogUmF3VGVtcGxhdGUpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnRvcCA9IHBhcmVudCA/IHBhcmVudC50b3AgOiB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgfVxuXG4gIGNsb25lRm9yKHRlbXBsYXRlOiBSYXdUZW1wbGF0ZSk6IFN5bWJvbFRhYmxlIHtcbiAgICBsZXQgdGFibGUgPSBuZXcgU3ltYm9sVGFibGUodGhpcy5wYXJlbnQsIHRlbXBsYXRlKTtcbiAgICB0YWJsZS5sb2NhbHMgPSBhc3NpZ24oe30sIHRoaXMubG9jYWxzKTtcbiAgICB0YWJsZS5zaXplID0gdGhpcy5zaXplO1xuICAgIHJldHVybiB0YWJsZTtcbiAgfVxuXG4gIGluaXRQb3NpdGlvbmFsKHBvc2l0aW9uYWw6IEludGVybmVkU3RyaW5nW10pOiB0aGlzIHtcbiAgICBpZiAocG9zaXRpb25hbCkgcG9zaXRpb25hbC5mb3JFYWNoKHMgPT4gdGhpcy5wdXRQb3NpdGlvbmFsKHMpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGluaXROYW1lZChuYW1lZDogSW50ZXJuZWRTdHJpbmdbXSk6IHRoaXMge1xuICAgIGlmIChuYW1lZCkgbmFtZWQuZm9yRWFjaChzID0+IHRoaXMubG9jYWxzWzxzdHJpbmc+c10gPSB0aGlzLnNpemUrKyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1dE5hbWVkKG5hbWVzOiBJbnRlcm5lZFN0cmluZ1tdKSB7XG4gICAgbGV0IHRvcCA9IHRoaXMudG9wO1xuICAgIG5hbWVzLmZvckVhY2gocyA9PiB0b3AucHV0U2luZ2xlTmFtZWQocykpO1xuICB9XG5cbiAgZ2V0KG5hbWU6IEludGVybmVkU3RyaW5nKTogbnVtYmVyIHtcbiAgICBsZXQgeyBsb2NhbHMsIHBhcmVudCB9ID0gdGhpcztcblxuICAgIGxldCBzeW1ib2wgPSBsb2NhbHNbPHN0cmluZz5uYW1lXTtcblxuICAgIGlmICghc3ltYm9sICYmIHBhcmVudCkge1xuICAgICAgc3ltYm9sID0gcGFyZW50LmdldChuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ltYm9sO1xuICB9XG5cbiAgaXNUb3AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9wID09PSB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBwdXRTaW5nbGVOYW1lZChuYW1lOiBJbnRlcm5lZFN0cmluZykge1xuICAgIGlmICghdGhpcy5sb2NhbHNbPHN0cmluZz5uYW1lXSkge1xuICAgICAgdGhpcy5sb2NhbHNbPHN0cmluZz5uYW1lXSA9IHRoaXMuc2l6ZSsrO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5uYW1lZCA9IHRoaXMudGVtcGxhdGUubmFtZWQgfHwgW107XG4gICAgICB0aGlzLnRlbXBsYXRlLm5hbWVkLnB1c2gobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwdXRQb3NpdGlvbmFsKG5hbWU6IEludGVybmVkU3RyaW5nKTogbnVtYmVyIHtcbiAgICBsZXQgcG9zaXRpb24gPSB0aGlzLmxvY2Fsc1s8c3RyaW5nPm5hbWVdO1xuXG4gICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgcG9zaXRpb24gPSB0aGlzLmxvY2Fsc1s8c3RyaW5nPm5hbWVdID0gdGhpcy50b3Auc2l6ZSsrO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxufVxuIl19