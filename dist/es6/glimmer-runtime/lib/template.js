import { LinkedList } from 'glimmer-util';
import { UpdatableReference } from 'glimmer-reference';
import { RawTemplate } from './compiler';
import { ElementStack } from './builder';
import VM from './vm';
import Scanner from './scanner';
export default class Template {
    constructor({ meta, children, root, position, locals, named, program, spec, isEmpty }) {
        this.meta = meta || {};
        this.children = children;
        this.root = root || null;
        this.position = position === undefined ? null : position;
        this.arity = locals ? locals.length : 0;
        this.raw = new RawTemplate({ ops: null, locals, named, program });
        this.spec = spec || null;
        this.isEmpty = isEmpty === true ? isEmpty : program.isEmpty();
        Object.seal(this);
    }
    static fromSpec(specs) {
        let scanner = new Scanner(specs);
        return scanner.scan();
    }
    static fromList(program) {
        return new Template({
            program,
            root: null,
            position: null,
            meta: null,
            locals: null,
            isEmpty: program.isEmpty(),
            spec: null
        });
    }
    static fromStatements(statements) {
        let program = new LinkedList();
        statements.forEach(s => program.append(s));
        return new Template({
            program,
            root: null,
            position: null,
            meta: null,
            locals: null,
            isEmpty: statements.length === 0,
            spec: null
        });
    }
    prettyPrint() {
        function pretty(obj) {
            if (typeof obj.prettyPrint === 'function')
                return obj.prettyPrint();
            else
                throw new Error(`Cannot pretty print ${obj.constructor.name}`);
        }
        return this.root.map(template => {
            return template.raw.program.toArray().map(statement => pretty(statement));
        });
    }
    render(self, env, options, blockArguments = null) {
        let elementStack = new ElementStack({ dom: env.getDOM(), parentNode: options.appendTo, nextSibling: null });
        let vm = VM.initial(env, { self: new UpdatableReference(self), elementStack, size: this.raw.symbolTable.size });
        this.raw.compile(env);
        return vm.execute(this.raw.ops);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLXJ1bnRpbWUvbGliL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEVBQWtCLFVBQVUsRUFBRSxNQUFNLGNBQWM7T0FDbEQsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQjtPQUUvQyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVk7T0FFakMsRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXO09BQ2pDLEVBQUUsTUFBTSxNQUFNO09BQ2QsT0FBTyxNQUFNLFdBQVc7QUF3Qi9CO0lBMkNFLFlBQVksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBbUI7UUFDcEcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsS0FBSyxTQUFTLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxLQUFLLElBQUksR0FBRyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQXBERCxPQUFPLFFBQVEsQ0FBQyxLQUFZO1FBQzFCLElBQUksT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELE9BQU8sUUFBUSxDQUFDLE9BQWdCO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLFFBQVEsQ0FBQztZQUNsQixPQUFPO1lBQ1AsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsSUFBSTtZQUNkLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFLElBQUk7WUFDWixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUMxQixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPLGNBQWMsQ0FBQyxVQUE2QjtRQUNqRCxJQUFJLE9BQU8sR0FBRyxJQUFJLFVBQVUsRUFBbUIsQ0FBQztRQUNoRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0MsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDO1lBQ2xCLE9BQU87WUFDUCxJQUFJLEVBQUUsSUFBSTtZQUNWLFFBQVEsRUFBRSxJQUFJO1lBQ2QsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsSUFBSTtZQUNaLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDaEMsSUFBSSxFQUFFLElBQUk7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBd0JELFdBQVc7UUFDVCxnQkFBZ0IsR0FBRztZQUNqQixFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEUsSUFBSTtnQkFBQyxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRO1lBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFTLEVBQUUsR0FBZ0IsRUFBRSxPQUFzQixFQUFFLGNBQWMsR0FBUSxJQUFJO1FBQ3BGLElBQUksWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUM1RyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVoSCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7QUFDSCxDQUFDO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcm5lZFN0cmluZywgTGlua2VkTGlzdCB9IGZyb20gJ2dsaW1tZXItdXRpbCc7XG5pbXBvcnQgeyBVcGRhdGFibGVSZWZlcmVuY2UgfSBmcm9tICdnbGltbWVyLXJlZmVyZW5jZSc7XG5pbXBvcnQgeyBQcm9ncmFtLCBTdGF0ZW1lbnRTeW50YXggfSBmcm9tICcuL3N5bnRheCc7XG5pbXBvcnQgeyBSYXdUZW1wbGF0ZSB9IGZyb20gJy4vY29tcGlsZXInO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuL2Vudmlyb25tZW50JztcbmltcG9ydCB7IEVsZW1lbnRTdGFjayB9IGZyb20gJy4vYnVpbGRlcic7XG5pbXBvcnQgVk0gZnJvbSAnLi92bSc7XG5pbXBvcnQgU2Nhbm5lciBmcm9tICcuL3NjYW5uZXInO1xuXG5pbnRlcmZhY2UgVGVtcGxhdGVPcHRpb25zIHtcbiAgbWV0YT86IE9iamVjdDtcbiAgcm9vdD86IFRlbXBsYXRlW107XG4gIHBhcmVudD86IFRlbXBsYXRlO1xuICBjaGlsZHJlbj86IFRlbXBsYXRlW107XG4gIHBvc2l0aW9uPzogbnVtYmVyO1xuICBsb2NhbHM/OiBJbnRlcm5lZFN0cmluZ1tdO1xuICBuYW1lZD86IEludGVybmVkU3RyaW5nW107XG4gIHByb2dyYW0/OiBQcm9ncmFtO1xuICBzcGVjPzogYW55O1xuICBpc0VtcHR5PzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFJlbmRlck9wdGlvbnMge1xuICBob3N0T3B0aW9ucz86IE9iamVjdDtcbiAgYXBwZW5kVG86IEVsZW1lbnQ7XG59XG5cbmludGVyZmFjZSBFdmFsdWF0ZU9wdGlvbnMge1xuICBuZXh0U2libGluZz86IE5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbXBsYXRlIHtcbiAgc3RhdGljIGZyb21TcGVjKHNwZWNzOiBhbnlbXSk6IFRlbXBsYXRlIHtcbiAgICBsZXQgc2Nhbm5lciA9IG5ldyBTY2FubmVyKHNwZWNzKTtcbiAgICByZXR1cm4gc2Nhbm5lci5zY2FuKCk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUxpc3QocHJvZ3JhbTogUHJvZ3JhbSk6IFRlbXBsYXRlIHtcbiAgICByZXR1cm4gbmV3IFRlbXBsYXRlKHtcbiAgICAgIHByb2dyYW0sXG4gICAgICByb290OiBudWxsLFxuICAgICAgcG9zaXRpb246IG51bGwsXG4gICAgICBtZXRhOiBudWxsLFxuICAgICAgbG9jYWxzOiBudWxsLFxuICAgICAgaXNFbXB0eTogcHJvZ3JhbS5pc0VtcHR5KCksXG4gICAgICBzcGVjOiBudWxsXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZnJvbVN0YXRlbWVudHMoc3RhdGVtZW50czogU3RhdGVtZW50U3ludGF4W10pOiBUZW1wbGF0ZSB7XG4gICAgbGV0IHByb2dyYW0gPSBuZXcgTGlua2VkTGlzdDxTdGF0ZW1lbnRTeW50YXg+KCk7XG4gICAgc3RhdGVtZW50cy5mb3JFYWNoKHMgPT4gcHJvZ3JhbS5hcHBlbmQocykpO1xuXG4gICAgcmV0dXJuIG5ldyBUZW1wbGF0ZSh7XG4gICAgICBwcm9ncmFtLFxuICAgICAgcm9vdDogbnVsbCxcbiAgICAgIHBvc2l0aW9uOiBudWxsLFxuICAgICAgbWV0YTogbnVsbCxcbiAgICAgIGxvY2FsczogbnVsbCxcbiAgICAgIGlzRW1wdHk6IHN0YXRlbWVudHMubGVuZ3RoID09PSAwLFxuICAgICAgc3BlYzogbnVsbFxuICAgIH0pO1xuICB9XG5cbiAgbWV0YTogT2JqZWN0O1xuICBwYXJlbnQ6IFRlbXBsYXRlO1xuICBjaGlsZHJlbjogVGVtcGxhdGVbXTtcbiAgcm9vdDogVGVtcGxhdGVbXTtcbiAgcG9zaXRpb246IG51bWJlcjtcbiAgYXJpdHk6IG51bWJlcjtcbiAgc3BlYzogYW55W107XG4gIGlzRW1wdHk6IGJvb2xlYW47XG4gIHJhdzogUmF3VGVtcGxhdGU7XG5cbiAgY29uc3RydWN0b3IoeyBtZXRhLCBjaGlsZHJlbiwgcm9vdCwgcG9zaXRpb24sIGxvY2FscywgbmFtZWQsIHByb2dyYW0sIHNwZWMsIGlzRW1wdHkgfTogVGVtcGxhdGVPcHRpb25zKSB7XG4gICAgdGhpcy5tZXRhID0gbWV0YSB8fCB7fTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5yb290ID0gcm9vdCB8fCBudWxsO1xuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBvc2l0aW9uO1xuICAgIHRoaXMuYXJpdHkgPSBsb2NhbHMgPyBsb2NhbHMubGVuZ3RoIDogMDtcbiAgICB0aGlzLnJhdyA9IG5ldyBSYXdUZW1wbGF0ZSh7IG9wczogbnVsbCwgbG9jYWxzLCBuYW1lZCwgcHJvZ3JhbSB9KTtcbiAgICB0aGlzLnNwZWMgPSBzcGVjIHx8IG51bGw7XG4gICAgdGhpcy5pc0VtcHR5ID0gaXNFbXB0eSA9PT0gdHJ1ZSA/IGlzRW1wdHkgOiBwcm9ncmFtLmlzRW1wdHkoKTtcbiAgICBPYmplY3Quc2VhbCh0aGlzKTtcbiAgfVxuXG4gIHByZXR0eVByaW50KCkge1xuICAgIGZ1bmN0aW9uIHByZXR0eShvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLnByZXR0eVByaW50ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gb2JqLnByZXR0eVByaW50KCk7XG4gICAgICBlbHNlIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHByZXR0eSBwcmludCAke29iai5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJvb3QubWFwKHRlbXBsYXRlID0+IHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5yYXcucHJvZ3JhbS50b0FycmF5KCkubWFwKHN0YXRlbWVudCA9PiBwcmV0dHkoc3RhdGVtZW50KSk7XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoc2VsZjogYW55LCBlbnY6IEVudmlyb25tZW50LCBvcHRpb25zOiBSZW5kZXJPcHRpb25zLCBibG9ja0FyZ3VtZW50czogYW55W109bnVsbCkge1xuICAgIGxldCBlbGVtZW50U3RhY2sgPSBuZXcgRWxlbWVudFN0YWNrKHsgZG9tOiBlbnYuZ2V0RE9NKCksIHBhcmVudE5vZGU6IG9wdGlvbnMuYXBwZW5kVG8sIG5leHRTaWJsaW5nOiBudWxsIH0pO1xuICAgIGxldCB2bSA9IFZNLmluaXRpYWwoZW52LCB7IHNlbGY6IG5ldyBVcGRhdGFibGVSZWZlcmVuY2Uoc2VsZiksIGVsZW1lbnRTdGFjaywgc2l6ZTogdGhpcy5yYXcuc3ltYm9sVGFibGUuc2l6ZSB9KTtcblxuICAgIHRoaXMucmF3LmNvbXBpbGUoZW52KTtcbiAgICByZXR1cm4gdm0uZXhlY3V0ZSh0aGlzLnJhdy5vcHMpO1xuICB9XG59Il19