export class PrettyPrint {
    constructor(type, operation, params = null, hash = null, templates = null) {
        this.type = type;
        this.operation = operation;
        this.params = params;
        this.hash = hash;
        this.templates = templates;
    }
}
class Syntax {
    constructor() {
        this.next = null;
        this.prev = null;
    }
    static fromSpec(spec, templates) {
        throw new Error(`You need to implement fromSpec on ${this}`);
    }
    prettyPrint() {
        return `<${this.type}>`;
    }
}
export default Syntax;
export class StatementSyntax extends Syntax {
    static fromSpec(spec, templates) {
        throw new Error(`You need to implement fromSpec on ${this}`);
    }
    prettyPrint() {
        return new PrettyPrint(this.type, this.type);
    }
    clone() {
        // not type safe but the alternative is extreme boilerplate per
        // syntax subclass.
        return new this.constructor(this);
    }
}
export const ATTRIBUTE_SYNTAX = "e1185d30-7cac-4b12-b26a-35327d905d92";
export class AttributeSyntax extends StatementSyntax {
}
export class ExpressionSyntax extends Syntax {
    prettyPrint() {
        return `${this.type}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2xpbW1lci1ydW50aW1lL2xpYi9zeW50YXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBO0lBT0UsWUFBWSxJQUFZLEVBQUUsU0FBaUIsRUFBRSxNQUFNLEdBQXFCLElBQUksRUFBRSxJQUFJLEdBQXlCLElBQUksRUFBRSxTQUFTLEdBQWUsSUFBSTtRQUMzSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDO0FBQ0gsQ0FBQztBQU1EO0lBQUE7UUFNUyxTQUFJLEdBQU0sSUFBSSxDQUFDO1FBQ2YsU0FBSSxHQUFNLElBQUksQ0FBQztJQUt4QixDQUFDO0lBWEMsT0FBTyxRQUFRLENBQUMsSUFBUyxFQUFFLFNBQXFCO1FBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQU1ELFdBQVc7UUFDVCxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDMUIsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLE1BQU0sQ0FBQztBQUV0QixxQ0FBOEMsTUFBTTtJQUNsRCxPQUFPLFFBQVEsQ0FBQyxJQUFTLEVBQUUsU0FBcUI7UUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsV0FBVztRQUNULE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsS0FBSztRQUNILCtEQUErRDtRQUMvRCxtQkFBbUI7UUFDbkIsTUFBTSxDQUFDLElBQXVCLElBQUksQ0FBQyxXQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztBQUdILENBQUM7QUFJRCxhQUFhLGdCQUFnQixHQUFHLHNDQUFzQyxDQUFDO0FBRXZFLHFDQUE4QyxlQUFlO0FBTzdELENBQUM7QUFFRCxzQ0FBK0MsTUFBTTtJQUduRCxXQUFXO1FBQ1QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7QUFHSCxDQUFDO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWN0LCBMaW5rZWRMaXN0Tm9kZSwgU2xpY2UsIEludGVybmVkU3RyaW5nIH0gZnJvbSAnZ2xpbW1lci11dGlsJztcbmltcG9ydCBUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCBDb21waWxlciBmcm9tICcuL2NvbXBpbGVyJztcbmltcG9ydCB7IEVudmlyb25tZW50IH0gZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuL2NvbXBpbGVkL2V4cHJlc3Npb25zJztcblxuZXhwb3J0IHR5cGUgUHJldHR5UHJpbnRWYWx1ZSA9IFByZXR0eVByaW50IHwgc3RyaW5nIHwgc3RyaW5nW10gfCBQcmV0dHlQcmludFZhbHVlQXJyYXkgfCBQcmV0dHlQcmludFZhbHVlRGljdDtcblxuaW50ZXJmYWNlIFByZXR0eVByaW50VmFsdWVBcnJheSBleHRlbmRzIEFycmF5PFByZXR0eVByaW50VmFsdWU+IHtcblxufVxuXG5pbnRlcmZhY2UgUHJldHR5UHJpbnRWYWx1ZURpY3QgZXh0ZW5kcyBEaWN0PFByZXR0eVByaW50VmFsdWU+IHtcblxufVxuXG5leHBvcnQgY2xhc3MgUHJldHR5UHJpbnQge1xuICB0eXBlOiBzdHJpbmc7XG4gIG9wZXJhdGlvbjogc3RyaW5nO1xuICBwYXJhbXM6IFByZXR0eVByaW50VmFsdWVbXTtcbiAgaGFzaDogRGljdDxQcmV0dHlQcmludFZhbHVlPjtcbiAgdGVtcGxhdGVzOiBEaWN0PG51bWJlcj47XG5cbiAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBvcGVyYXRpb246IHN0cmluZywgcGFyYW1zOiBQcmV0dHlQcmludFZhbHVlW109bnVsbCwgaGFzaDogRGljdDxQcmV0dHlQcmludFZhbHVlPj1udWxsLCB0ZW1wbGF0ZXM6IERpY3Q8bnVtYmVyPj1udWxsKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLmhhc2ggPSBoYXNoO1xuICAgIHRoaXMudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJldHR5UHJpbnRhYmxlIHtcbiAgcHJldHR5UHJpbnQoKTogUHJldHR5UHJpbnQ7XG59XG5cbmFic3RyYWN0IGNsYXNzIFN5bnRheDxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgTGlua2VkTGlzdE5vZGUge1xuICBzdGF0aWMgZnJvbVNwZWMoc3BlYzogYW55LCB0ZW1wbGF0ZXM6IFRlbXBsYXRlW10pOiBTeW50YXg8YW55PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbmVlZCB0byBpbXBsZW1lbnQgZnJvbVNwZWMgb24gJHt0aGlzfWApO1xuICB9XG5cbiAgcHVibGljIHR5cGU6IHN0cmluZztcbiAgcHVibGljIG5leHQ6IFQgPSBudWxsO1xuICBwdWJsaWMgcHJldjogVCA9IG51bGw7XG5cbiAgcHJldHR5UHJpbnQoKTogUHJldHR5UHJpbnRWYWx1ZSB7XG4gICAgcmV0dXJuIGA8JHt0aGlzLnR5cGV9PmA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3ludGF4O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RhdGVtZW50U3ludGF4IGV4dGVuZHMgU3ludGF4PFN0YXRlbWVudFN5bnRheD4ge1xuICBzdGF0aWMgZnJvbVNwZWMoc3BlYzogYW55LCB0ZW1wbGF0ZXM6IFRlbXBsYXRlW10pOiBTdGF0ZW1lbnRTeW50YXgge1xuICAgIHRocm93IG5ldyBFcnJvcihgWW91IG5lZWQgdG8gaW1wbGVtZW50IGZyb21TcGVjIG9uICR7dGhpc31gKTtcbiAgfVxuXG4gIHByZXR0eVByaW50KCk6IGFueSB7XG4gICAgcmV0dXJuIG5ldyBQcmV0dHlQcmludCh0aGlzLnR5cGUsIHRoaXMudHlwZSk7XG4gIH1cblxuICBjbG9uZSgpOiB0aGlzIHtcbiAgICAvLyBub3QgdHlwZSBzYWZlIGJ1dCB0aGUgYWx0ZXJuYXRpdmUgaXMgZXh0cmVtZSBib2lsZXJwbGF0ZSBwZXJcbiAgICAvLyBzeW50YXggc3ViY2xhc3MuXG4gICAgcmV0dXJuIG5ldyAoPG5ldyAoYW55KSA9PiBhbnk+dGhpcy5jb25zdHJ1Y3RvcikodGhpcyk7XG4gIH1cblxuICBhYnN0cmFjdCBjb21waWxlKG9wY29kZXM6IENvbXBpbGVyLCBlbnY6IEVudmlyb25tZW50KTtcbn1cblxuZXhwb3J0IHR5cGUgUHJvZ3JhbSA9IFNsaWNlPFN0YXRlbWVudFN5bnRheD47XG5cbmV4cG9ydCBjb25zdCBBVFRSSUJVVEVfU1lOVEFYID0gXCJlMTE4NWQzMC03Y2FjLTRiMTItYjI2YS0zNTMyN2Q5MDVkOTJcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF0dHJpYnV0ZVN5bnRheCBleHRlbmRzIFN0YXRlbWVudFN5bnRheCB7XG4gIFwiZTExODVkMzAtN2NhYy00YjEyLWIyNmEtMzUzMjdkOTA1ZDkyXCI6IGJvb2xlYW47XG4gIG5hbWU6IEludGVybmVkU3RyaW5nO1xuICBuYW1lc3BhY2U6IEludGVybmVkU3RyaW5nO1xuXG4gIGFic3RyYWN0IHRvTG9va3VwKCk6IHsgc3ludGF4OiBBdHRyaWJ1dGVTeW50YXgsIHN5bWJvbDogSW50ZXJuZWRTdHJpbmcgfTtcbiAgYWJzdHJhY3QgdmFsdWVTeW50YXgoKTogRXhwcmVzc2lvblN5bnRheDtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV4cHJlc3Npb25TeW50YXggZXh0ZW5kcyBTeW50YXg8RXhwcmVzc2lvblN5bnRheD4ge1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuXG4gIHByZXR0eVByaW50KCk6IFByZXR0eVByaW50VmFsdWUge1xuICAgIHJldHVybiBgJHt0aGlzLnR5cGV9YDtcbiAgfVxuXG4gIGFic3RyYWN0IGNvbXBpbGUoY29tcGlsZXI6IENvbXBpbGVyKTogQ29tcGlsZWRFeHByZXNzaW9uO1xufSJdfQ==