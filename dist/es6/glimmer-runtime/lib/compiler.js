import { ListSlice, LinkedList } from 'glimmer-util';
import { BindArgsOpcode } from './compiled/opcodes/vm';
import { ATTRIBUTE_SYNTAX } from './syntax';
import Template from './template';
import { OpenElement, OpenPrimitiveElement, CloseElement } from './syntax/core';
export class RawTemplate {
    constructor({ ops, locals, named, program }) {
        this.ops = null;
        this.symbolTable = null;
        this.ops = ops;
        this.locals = locals;
        this.named = named;
        this.program = program || null;
    }
    cloneWith(callback) {
        let { program, locals, named } = this;
        let newProgram = LinkedList.fromSlice(program);
        let template = new RawTemplate({
            ops: null,
            locals: locals && locals.slice(),
            named: named && named.slice(),
            program: newProgram
        });
        template.symbolTable = this.symbolTable.cloneFor(template);
        callback(newProgram, template.symbolTable);
        return template;
    }
    compile(env) {
        this.compileSyntax(env);
    }
    compileSyntax(env) {
        this.ops = this.ops || new Compiler(this, env).compile();
    }
    isTop() {
        return this.symbolTable.isTop();
    }
    hasLocals() {
        return !!(this.locals || this.named);
    }
}
export default class Compiler {
    constructor(template, env) {
        this.env = env;
        this.template = template;
        this.current = template.program.head();
        this.ops = new LinkedList();
        this.symbolTable = template.symbolTable;
    }
    compile() {
        let { template, ops, env } = this;
        let { program } = template;
        if (template.hasLocals())
            ops.append(new BindArgsOpcode(this.template));
        while (this.current) {
            let current = this.current;
            this.current = program.nextNode(current);
            env.statement(current).compile(this, env);
        }
        return ops;
    }
    append(op) {
        this.ops.append(op);
    }
    getSymbol(name) {
        return this.symbolTable.get(name);
    }
    sliceAttributes() {
        let { template: { program } } = this;
        let begin = null;
        let end = null;
        while (this.current[ATTRIBUTE_SYNTAX]) {
            let current = this.current;
            this.current = program.nextNode(current);
            begin = begin || current;
            end = current;
        }
        return new ListSlice(begin, end);
    }
    templateFromTagContents() {
        let { template: { program } } = this;
        let begin = null;
        let end = null;
        let nesting = 1;
        while (true) {
            let current = this.current;
            this.current = program.nextNode(current);
            if (current instanceof CloseElement && --nesting === 0) {
                break;
            }
            begin = begin || current;
            end = current;
            if (current instanceof OpenElement || current instanceof OpenPrimitiveElement) {
                nesting++;
            }
        }
        let slice = new ListSlice(begin, end);
        return Template.fromList(ListSlice.toList(slice));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLXJ1bnRpbWUvbGliL2NvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEVBQVMsU0FBUyxFQUFFLFVBQVUsRUFBZ0MsTUFBTSxjQUFjO09BRWxGLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCO09BQy9DLEVBQUUsZ0JBQWdCLEVBQTZDLE1BQU0sVUFBVTtPQUUvRSxRQUFRLE1BQU0sWUFBWTtPQUMxQixFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlO0FBVS9FO0lBT0UsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBc0I7UUFMeEQsUUFBRyxHQUFVLElBQUksQ0FBQztRQUNsQixnQkFBVyxHQUFnQixJQUFJLENBQUM7UUFLckMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVELFNBQVMsQ0FBQyxRQUE0RTtRQUNwRixJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFdEMsSUFBSSxVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxJQUFJLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FBQztZQUM3QixHQUFHLEVBQUUsSUFBSTtZQUNULE1BQU0sRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQyxLQUFLLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDN0IsT0FBTyxFQUFFLFVBQVU7U0FDcEIsQ0FBQyxD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ZXJuZWRTdHJpbmcsIGFzc2VydCwgZGljdCB9IGZyb20gJ2dsaW1tZXItdXRpbCc7XG5pbXBvcnQgeyBPcFNlcSwgT3BTZXFCdWlsZGVyLCBPcGNvZGUgfSBmcm9tICcuL29wY29kZXMnO1xuaW1wb3J0IHsgQmluZEFyZ3NPcGNvZGUgfSBmcm9tICcuL2NvbXBpbGVkL29wY29kZXMvdm0nO1xuaW1wb3J0IHsgQVRUUklCVVRFX1NZTlRBWCwgUHJvZ3JhbSwgU3RhdGVtZW50U3ludGF4LCBBdHRyaWJ1dGVTeW50YXggfSBmcm9tICcuL3N5bnRheCc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IFRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgT3BlbkVsZW1lbnQsIE9wZW5QcmltaXRpdmVFbGVtZW50LCBDbG9zZUVsZW1lbnQgfSBmcm9tICcuL3N5bnRheC9jb3JlJztcbmltcG9ydCBTeW1ib2xUYWJsZSBmcm9tICcuL3N5bWJvbC10YWJsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF3VGVtcGxhdGVPcHRpb25zIHtcbiAgb3BzOiBPcFNlcTtcbiAgbG9jYWxzOiBJbnRlcm5lZFN0cmluZ1tdO1xuICBuYW1lZDogSW50ZXJuZWRTdHJpbmdbXTtcbiAgcHJvZ3JhbT86IFByb2dyYW07XG59XG5cbmV4cG9ydCBjbGFzcyBSYXdUZW1wbGF0ZSB7XG4gIHB1YmxpYyBwcm9ncmFtOiBQcm9ncmFtO1xuICBwdWJsaWMgb3BzOiBPcFNlcSA9IG51bGw7XG4gIHB1YmxpYyBzeW1ib2xUYWJsZTogU3ltYm9sVGFibGUgPSBudWxsO1xuICBwdWJsaWMgbG9jYWxzOiBJbnRlcm5lZFN0cmluZ1tdO1xuICBwdWJsaWMgbmFtZWQ6IEludGVybmVkU3RyaW5nW107XG5cbiAgY29uc3RydWN0b3IoeyBvcHMsIGxvY2FscywgbmFtZWQsIHByb2dyYW0gfTogUmF3VGVtcGxhdGVPcHRpb25zKSB7XG4gICAgdGhpcy5vcHMgPSBvcHM7XG4gICAgdGhpcy5sb2NhbHMgPSBsb2NhbHM7XG4gICAgdGhpcy5uYW1lZCA9IG5hbWVkO1xuICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW0gfHwgbnVsbDtcbiAgfVxuXG4gIGNsb25lV2l0aChjYWxsYmFjazogKGJ1aWxkZXI6IExpbmtlZExpc3Q8U3RhdGVtZW50U3ludGF4PiwgdGFibGU6IFN5bWJvbFRhYmxlKSA9PiB2b2lkKTogUmF3VGVtcGxhdGUge1xuICAgIGxldCB7IHByb2dyYW0sIGxvY2FscywgbmFtZWQgfSA9IHRoaXM7XG5cbiAgICBsZXQgbmV3UHJvZ3JhbSA9IExpbmtlZExpc3QuZnJvbVNsaWNlKHByb2dyYW0pO1xuXG4gICAgbGV0IHRlbXBsYXRlID0gbmV3IFJhd1RlbXBsYXRlKHtcbiAgICAgIG9wczogbnVsbCxcbiAgICAgIGxvY2FsczogbG9jYWxzICYmIGxvY2Fscy5zbGljZSgpLFxuICAgICAgbmFtZWQ6IG5hbWVkICYmIG5hbWVkLnNsaWNlKCksXG4gICAgICBwcm9ncmFtOiBuZXdQcm9ncmFtXG4gICAgfSk7XG5cbiAgICB0ZW1wbGF0ZS5zeW1ib2xUYWJsZSA9IHRoaXMuc3ltYm9sVGFibGUuY2xvbmVGb3IodGVtcGxhdGUpO1xuICAgIGNhbGxiYWNrKG5ld1Byb2dyYW0sIHRlbXBsYXRlLnN5bWJvbFRhYmxlKTtcblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIGNvbXBpbGUoZW52OiBFbnZpcm9ubWVudCkge1xuICAgIHRoaXMuY29tcGlsZVN5bnRheChlbnYpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21waWxlU3ludGF4KGVudjogRW52aXJvbm1lbnQpIHtcbiAgICB0aGlzLm9wcyA9IHRoaXMub3BzIHx8IG5ldyBDb21waWxlcih0aGlzLCBlbnYpLmNvbXBpbGUoKTtcbiAgfVxuXG4gIGlzVG9wKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbFRhYmxlLmlzVG9wKCk7XG4gIH1cblxuICBoYXNMb2NhbHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHRoaXMubG9jYWxzIHx8IHRoaXMubmFtZWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBpbGVyIHtcbiAgcHVibGljIGVudjogRW52aXJvbm1lbnQ7XG4gIHByaXZhdGUgdGVtcGxhdGU6IFJhd1RlbXBsYXRlO1xuICBwcml2YXRlIGN1cnJlbnQ6IFN0YXRlbWVudFN5bnRheDtcbiAgcHJpdmF0ZSBvcHM6IE9wU2VxQnVpbGRlcjtcbiAgcHJpdmF0ZSBzeW1ib2xUYWJsZTogU3ltYm9sVGFibGU7XG5cbiAgY29uc3RydWN0b3IodGVtcGxhdGU6IFJhd1RlbXBsYXRlLCBlbnY6IEVudmlyb25tZW50KSB7XG4gICAgdGhpcy5lbnYgPSBlbnY7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIHRoaXMuY3VycmVudCA9IHRlbXBsYXRlLnByb2dyYW0uaGVhZCgpO1xuICAgIHRoaXMub3BzID0gbmV3IExpbmtlZExpc3Q8T3Bjb2RlPigpO1xuICAgIHRoaXMuc3ltYm9sVGFibGUgPSB0ZW1wbGF0ZS5zeW1ib2xUYWJsZTtcbiAgfVxuXG4gIGNvbXBpbGUoKTogT3BTZXFCdWlsZGVyIHtcbiAgICBsZXQgeyB0ZW1wbGF0ZSwgb3BzLCBlbnYgfSA9IHRoaXM7XG4gICAgbGV0IHsgcHJvZ3JhbSB9ID0gdGVtcGxhdGU7XG5cbiAgICBpZiAodGVtcGxhdGUuaGFzTG9jYWxzKCkpIG9wcy5hcHBlbmQobmV3IEJpbmRBcmdzT3Bjb2RlKHRoaXMudGVtcGxhdGUpKTtcblxuICAgIHdoaWxlICh0aGlzLmN1cnJlbnQpIHtcbiAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgdGhpcy5jdXJyZW50ID0gcHJvZ3JhbS5uZXh0Tm9kZShjdXJyZW50KTtcbiAgICAgIGVudi5zdGF0ZW1lbnQoY3VycmVudCkuY29tcGlsZSh0aGlzLCBlbnYpO1xuICAgIH1cblxuICAgIHJldHVybiBvcHM7XG4gIH1cblxuICBhcHBlbmQob3A6IE9wY29kZSkge1xuICAgIHRoaXMub3BzLmFwcGVuZChvcCk7XG4gIH1cblxuICBnZXRTeW1ib2wobmFtZTogSW50ZXJuZWRTdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnN5bWJvbFRhYmxlLmdldChuYW1lKTtcbiAgfVxuXG4gIHNsaWNlQXR0cmlidXRlcygpOiBTbGljZTxBdHRyaWJ1dGVTeW50YXg+IHtcbiAgICBsZXQgeyB0ZW1wbGF0ZTogeyBwcm9ncmFtIH0gfSA9IHRoaXM7XG5cbiAgICBsZXQgYmVnaW46IEF0dHJpYnV0ZVN5bnRheCA9IG51bGw7XG4gICAgbGV0IGVuZDogQXR0cmlidXRlU3ludGF4ID0gbnVsbDtcblxuICAgIHdoaWxlICh0aGlzLmN1cnJlbnRbQVRUUklCVVRFX1NZTlRBWF0pIHtcbiAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgdGhpcy5jdXJyZW50ID0gcHJvZ3JhbS5uZXh0Tm9kZShjdXJyZW50KTtcbiAgICAgIGJlZ2luID0gYmVnaW4gfHwgPEF0dHJpYnV0ZVN5bnRheD5jdXJyZW50O1xuICAgICAgZW5kID0gPEF0dHJpYnV0ZVN5bnRheD5jdXJyZW50O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTGlzdFNsaWNlKGJlZ2luLCBlbmQpO1xuICB9XG5cbiAgdGVtcGxhdGVGcm9tVGFnQ29udGVudHMoKTogVGVtcGxhdGUge1xuICAgIGxldCB7IHRlbXBsYXRlOiB7IHByb2dyYW0gfSB9ID0gdGhpcztcblxuICAgIGxldCBiZWdpbjogU3RhdGVtZW50U3ludGF4ID0gbnVsbDtcbiAgICBsZXQgZW5kOiBTdGF0ZW1lbnRTeW50YXggPSBudWxsO1xuICAgIGxldCBuZXN0aW5nID0gMTtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgIHRoaXMuY3VycmVudCA9IHByb2dyYW0ubmV4dE5vZGUoY3VycmVudCk7XG5cbiAgICAgIGlmIChjdXJyZW50IGluc3RhbmNlb2YgQ2xvc2VFbGVtZW50ICYmIC0tbmVzdGluZyA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYmVnaW4gPSBiZWdpbiB8fCBjdXJyZW50O1xuICAgICAgZW5kID0gY3VycmVudDtcblxuICAgICAgaWYgKGN1cnJlbnQgaW5zdGFuY2VvZiBPcGVuRWxlbWVudCB8fCBjdXJyZW50IGluc3RhbmNlb2YgT3BlblByaW1pdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgbmVzdGluZysrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzbGljZSA9IG5ldyBMaXN0U2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgcmV0dXJuIFRlbXBsYXRlLmZyb21MaXN0KExpc3RTbGljZS50b0xpc3Qoc2xpY2UpKTtcbiAgfVxufSJdfQ==