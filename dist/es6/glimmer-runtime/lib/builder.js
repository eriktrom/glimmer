import { Stack, assert } from 'glimmer-util';
import { PushPullReference } from 'glimmer-reference';
class First {
    constructor(node) {
        this.node = node;
    }
    firstNode() {
        return this.node;
    }
}
class Last {
    constructor(node) {
        this.node = node;
    }
    lastNode() {
        return this.node;
    }
}
export class ClassList extends PushPullReference {
    constructor(...args) {
        super(...args);
        this.list = [];
    }
    append(reference) {
        this.list.push(reference);
        // this._addSource(reference);
    }
    value() {
        if (this.list.length === 0)
            return null;
        return this.list.map(i => i.value()).join(' ');
    }
}
class BlockStackElement {
    constructor() {
        this.firstNode = null;
        this.lastNode = null;
    }
}
export class ElementStack {
    constructor({ dom, parentNode, nextSibling }) {
        this.classList = null;
        this.elementStack = new Stack();
        this.nextSiblingStack = new Stack();
        this.classListStack = new Stack();
        this.blockStack = new Stack();
        this.dom = dom;
        this.element = parentNode;
        this.nextSibling = nextSibling;
        if (nextSibling && !(nextSibling instanceof Node))
            throw new Error("NOPE");
        this.elementStack.push(this.element);
        this.nextSiblingStack.push(this.nextSibling);
    }
    block() {
        return this.blockStack.current;
    }
    pushElement(element) {
        this.elementStack.push(element);
        this.classListStack.push(null);
        this.nextSiblingStack.push(null);
        this.element = element;
        this.classList = null;
        this.nextSibling = null;
    }
    popElement() {
        let { elementStack, nextSiblingStack, classListStack } = this;
        let topElement = elementStack.pop();
        nextSiblingStack.pop();
        classListStack.pop();
        this.element = elementStack.current;
        this.nextSibling = nextSiblingStack.current;
        this.classList = classListStack.current;
        return topElement;
    }
    pushBlock() {
        let tracker = new BlockTracker(this.element);
        if (this.blockStack.current !== null)
            this.blockStack.current.newBounds(tracker);
        this.blockStack.push(tracker);
    }
    pushBlockList(list) {
        let tracker = new BlockListTracker(this.element, list);
        if (this.blockStack.current !== null)
            this.blockStack.current.newBounds(tracker);
        this.blockStack.push(tracker);
    }
    popBlock() {
        this.blockStack.current.finalize(this);
        return this.blockStack.pop();
    }
    openElement(tag) {
        let element = this.dom.createElement(tag, this.element);
        this.pushElement(element);
        this.blockStack.current.openElement(element);
        return element;
    }
    openBlock() {
        this.pushBlock();
    }
    closeBlock() {
        return this.popBlock();
    }
    openBlockList(list) {
        this.pushBlockList(list);
    }
    newBounds(bounds) {
        this.blockStack.current.newBounds(bounds);
    }
    appendText(string) {
        let { dom } = this;
        let text = dom.createTextNode(string);
        dom.insertBefore(this.element, text, this.nextSibling);
        this.blockStack.current.newNode(text);
        return text;
    }
    appendComment(string) {
        let { dom } = this;
        let comment = dom.createComment(string);
        dom.insertBefore(this.element, comment, this.nextSibling);
        this.blockStack.current.newNode(comment);
        return comment;
    }
    insertHTMLBefore(nextSibling, html) {
        if (!(this.element instanceof HTMLElement)) {
            throw new Error(`You cannot insert HTML (using triple-curlies or htmlSafe) into an SVG context: ${this.element.tagName}`);
        }
        let bounds = this.dom.insertHTMLBefore(this.element, nextSibling, html);
        this.blockStack.current.newBounds(bounds);
        return bounds;
    }
    setAttribute(name, value) {
        this.dom.setAttribute(this.element, name, value);
    }
    setAttributeNS(name, value, namespace) {
        this.dom.setAttributeNS(this.element, name, value, namespace);
    }
    addClass(ref) {
        let classList = this.classList;
        if (classList === null) {
            classList = this.classList = new ClassList();
            this.classListStack.push(classList);
        }
        classList.append(ref);
    }
    closeElement() {
        let { classList } = this;
        this.blockStack.current.closeElement();
        let child = this.popElement();
        this.dom.insertBefore(this.element, child, this.nextSibling);
        let classNames = classList ? classList.value() : null;
        if (classNames !== null) {
            this.dom.setAttribute(child, 'class', classNames);
        }
        return { element: child, classList, classNames };
    }
    appendHTML(html) {
        return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    }
}
class BlockTracker {
    constructor(parent) {
        this.first = null;
        this.last = null;
        this.nesting = 0;
        this.parent = parent;
    }
    parentElement() {
        return this.parent;
    }
    firstNode() {
        return this.first && this.first.firstNode();
    }
    lastNode() {
        return this.last && this.last.lastNode();
    }
    openElement(element) {
        this.newNode(element);
        this.nesting++;
    }
    closeElement() {
        this.nesting--;
    }
    newNode(node) {
        if (this.nesting !== 0)
            return;
        if (!this.first) {
            this.first = new First(node);
        }
        this.last = new Last(node);
    }
    newBounds(bounds) {
        if (this.nesting !== 0)
            return;
        if (!this.first) {
            this.first = bounds;
        }
        this.last = bounds;
    }
    finalize(stack) {
        if (!this.first) {
            stack.appendComment('');
        }
    }
}
class BlockListTracker {
    constructor(parent, boundList) {
        this.last = null;
        this.parent = parent;
        this.boundList = boundList;
    }
    parentElement() {
        return this.parent;
    }
    firstNode() {
        let head = this.boundList.head();
        return head ? head.firstNode() : this.last;
    }
    lastNode() {
        return this.last;
    }
    openElement(element) {
        assert(false, 'Cannot openElement directly inside a block list');
    }
    closeElement() {
        assert(false, 'Cannot closeElement directly inside a block list');
    }
    newNode(node) {
        assert(false, 'Cannot create a new node directly inside a block list');
    }
    newBounds(bounds) {
    }
    finalize(stack) {
        let { dom, element: parent, nextSibling } = stack;
        let comment = dom.createComment('');
        dom.insertBefore(parent, comment, nextSibling);
        this.last = comment;
    }
}
//# sourceMappingURL=data:application/json;base64,