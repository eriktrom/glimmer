import { ConstReference } from 'glimmer-reference';
export default class CompiledValue {
    constructor({ value }) {
        this.type = "value";
        this.reference = new ValueReference(value);
    }
    clone() {
        return new CompiledValue({ value: this.reference.value() });
    }
    evaluate(vm) {
        return this.reference;
    }
}
class ValueReference extends ConstReference {
    get(key) {
        let { children } = this;
        let child = children[key];
        if (!child) {
            child = children[key] = new ValueReference(this.inner[key]);
        }
        return child;
    }
    isDirty() { return false; }
    value() { return this.inner; }
    destroy() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLXJ1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL3ZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUVPLEVBQUUsY0FBYyxFQUFpQixNQUFNLG1CQUFtQjtBQUdqRTtJQUlFLFlBQVksRUFBRSxLQUFLLEVBQWtCO1FBSDlCLFNBQUksR0FBRyxPQUFPLENBQUM7UUFJcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQU07UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0FBQ0gsQ0FBQztBQUVELDZCQUE2QixjQUFjO0lBSXpDLEdBQUcsQ0FBQyxHQUFtQjtRQUNyQixJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBUyxHQUFHLENBQUMsQ0FBQztRQUVsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDWCxLQUFLLEdBQUcsUUFBUSxDQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5RSxDQUFDO1FBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxPQUFPLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0IsS0FBSyxLQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuQyxPQUFPLEtBQUksQ0FBQztBQUNkLENBQUM7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWTSBmcm9tICcuLi8uLi92bSc7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQgeyBDb25zdFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSB9IGZyb20gJ2dsaW1tZXItcmVmZXJlbmNlJztcbmltcG9ydCB7IEludGVybmVkU3RyaW5nLCBEaWN0IH0gZnJvbSAnZ2xpbW1lci11dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZWRWYWx1ZSBpbXBsZW1lbnRzIENvbXBpbGVkRXhwcmVzc2lvbiB7XG4gIHB1YmxpYyB0eXBlID0gXCJ2YWx1ZVwiO1xuICBwcml2YXRlIHJlZmVyZW5jZTogVmFsdWVSZWZlcmVuY2U7XG5cbiAgY29uc3RydWN0b3IoeyB2YWx1ZSB9OiB7IHZhbHVlOiBhbnkgfSkge1xuICAgIHRoaXMucmVmZXJlbmNlID0gbmV3IFZhbHVlUmVmZXJlbmNlKHZhbHVlKTtcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29tcGlsZWRWYWx1ZSh7IHZhbHVlOiB0aGlzLnJlZmVyZW5jZS52YWx1ZSgpIH0pO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlO1xuICB9XG59XG5cbmNsYXNzIFZhbHVlUmVmZXJlbmNlIGV4dGVuZHMgQ29uc3RSZWZlcmVuY2U8YW55PiBpbXBsZW1lbnRzIFBhdGhSZWZlcmVuY2Uge1xuICBwcm90ZWN0ZWQgaW5uZXI6IGFueTtcbiAgcHJvdGVjdGVkIGNoaWxkcmVuOiBEaWN0PFZhbHVlUmVmZXJlbmNlPjtcblxuICBnZXQoa2V5OiBJbnRlcm5lZFN0cmluZykge1xuICAgIGxldCB7IGNoaWxkcmVuIH0gPSB0aGlzO1xuICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuWzxzdHJpbmc+a2V5XTtcblxuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5bPHN0cmluZz5rZXldID0gbmV3IFZhbHVlUmVmZXJlbmNlKHRoaXMuaW5uZXJbPHN0cmluZz5rZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cblxuICBpc0RpcnR5KCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgdmFsdWUoKTogYW55IHsgcmV0dXJuIHRoaXMuaW5uZXI7IH1cbiAgZGVzdHJveSgpIHt9XG59Il19