import { NULL_REFERENCE } from '../../references';
export class CompiledPositionalArgs {
    static create({ values }) {
        if (values.length) {
            return new CompiledNonEmptyPositionalArgs({ values });
        }
        else {
            return COMPILED_EMPTY_POSITIONAL_ARGS;
        }
    }
}
class CompiledNonEmptyPositionalArgs extends CompiledPositionalArgs {
    constructor({ values }) {
        super();
        this.type = "named-args";
        this.values = values;
    }
    evaluate(vm) {
        let { values } = this;
        let valueReferences = values.map((value, i) => {
            return value.evaluate(vm);
        });
        return EvaluatedPositionalArgs.create({ values: valueReferences });
    }
}
export const COMPILED_EMPTY_POSITIONAL_ARGS = new (class extends CompiledPositionalArgs {
    constructor(...args) {
        super(...args);
        this.type = "empty-named-args";
    }
    evaluate(vm) {
        return EvaluatedPositionalArgs.empty();
    }
}
);
export class EvaluatedPositionalArgs {
    static empty() {
        return EVALUATED_EMPTY_POSITIONAL_ARGS;
    }
    static create({ values }) {
        return new NonEmptyEvaluatedPositionalArgs({ values });
    }
    forEach(callback) {
        let values = this.values;
        values.forEach((key, i) => callback(values[i]));
    }
}
class NonEmptyEvaluatedPositionalArgs extends EvaluatedPositionalArgs {
    constructor({ values }) {
        super();
        this.values = values;
    }
    at(index) {
        return this.values[index];
    }
    value() {
        return this.values.map(v => v.value());
    }
}
export const EVALUATED_EMPTY_POSITIONAL_ARGS = new (class extends EvaluatedPositionalArgs {
    at() {
        return NULL_REFERENCE;
    }
    value() {
        return null;
    }
}
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25hbC1hcmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2xpbW1lci1ydW50aW1lL2xpYi9jb21waWxlZC9leHByZXNzaW9ucy9wb3NpdGlvbmFsLWFyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0I7QUFLakQ7SUFDRSxPQUFPLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBb0M7UUFDeEQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLElBQUksOEJBQThCLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQztRQUN4QyxDQUFDO0lBQ0gsQ0FBQztBQUlILENBQUM7QUFFRCw2Q0FBNkMsc0JBQXNCO0lBSWpFLFlBQVksRUFBRSxNQUFNLEVBQW9DO1FBQ3RELE9BQU8sQ0FBQztRQUpILFNBQUksR0FBRyxZQUFZLENBQUM7UUFLekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUV0QixJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEMsTUFBTSxDQUFnQixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7QUFDSCxDQUFDO0FBRUQsYUFBYSw4QkFBOEIsR0FBRyxJQUFJLENBQUMsY0FBYyxzQkFBc0I7SUFBcEM7UUFBYyxlQUFzQjtRQUM5RSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFLbkMsQ0FBQztJQUhDLFFBQVEsQ0FBQyxFQUFFO1FBQ1QsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pDLENBQUM7QUFDSCxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUg7SUFDRSxPQUFPLEtBQUs7UUFDVixNQUFNLENBQUMsK0JBQStCLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU8sTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUErQjtRQUNuRCxNQUFNLENBQUMsSUFBSSwrQkFBK0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUtELE9BQU8sQ0FBQyxRQUF3QztRQUM5QyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7QUFJSCxDQUFDO0FBRUQsOENBQThDLHVCQUF1QjtJQUduRSxZQUFZLEVBQUUsTUFBTSxFQUErQjtRQUNqRCxPQUFPLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsRUFBRSxDQUFDLEtBQWE7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztBQUNILENBQUM7QUFFRCxhQUFhLCtCQUErQixHQUFHLElBQUksQ0FBQyxjQUFjLHVCQUF1QjtJQUN2RixFQUFFO1FBQ0EsTUFBTSxDQUFDLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5VTExfUkVGRVJFTkNFIH0gZnJvbSAnLi4vLi4vcmVmZXJlbmNlcyc7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQgVk0gZnJvbSAnLi4vLi4vdm0nO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJ2dsaW1tZXItcmVmZXJlbmNlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICBzdGF0aWMgY3JlYXRlKHsgdmFsdWVzIH06IHsgdmFsdWVzOiBDb21waWxlZEV4cHJlc3Npb25bXSB9KTogQ29tcGlsZWRQb3NpdGlvbmFsQXJncyB7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgQ29tcGlsZWROb25FbXB0eVBvc2l0aW9uYWxBcmdzKHsgdmFsdWVzIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gIGFic3RyYWN0IGV2YWx1YXRlKHZtOiBWTSk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzO1xufVxuXG5jbGFzcyBDb21waWxlZE5vbkVtcHR5UG9zaXRpb25hbEFyZ3MgZXh0ZW5kcyBDb21waWxlZFBvc2l0aW9uYWxBcmdzIHtcbiAgcHVibGljIHR5cGUgPSBcIm5hbWVkLWFyZ3NcIjtcbiAgcHVibGljIHZhbHVlczogQ29tcGlsZWRFeHByZXNzaW9uW107XG5cbiAgY29uc3RydWN0b3IoeyB2YWx1ZXMgfTogeyB2YWx1ZXM6IENvbXBpbGVkRXhwcmVzc2lvbltdIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3Mge1xuICAgIGxldCB7IHZhbHVlcyB9ID0gdGhpcztcblxuICAgIGxldCB2YWx1ZVJlZmVyZW5jZXMgPSB2YWx1ZXMubWFwKCh2YWx1ZSwgaSkgPT4ge1xuICAgICAgcmV0dXJuIDxQYXRoUmVmZXJlbmNlPnZhbHVlLmV2YWx1YXRlKHZtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncy5jcmVhdGUoeyB2YWx1ZXM6IHZhbHVlUmVmZXJlbmNlcyB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTID0gbmV3IChjbGFzcyBleHRlbmRzIENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICBwdWJsaWMgdHlwZSA9IFwiZW1wdHktbmFtZWQtYXJnc1wiO1xuXG4gIGV2YWx1YXRlKHZtKTogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3Mge1xuICAgIHJldHVybiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncy5lbXB0eSgpO1xuICB9XG59KTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgc3RhdGljIGVtcHR5KCk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICByZXR1cm4gRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUoeyB2YWx1ZXMgfTogeyB2YWx1ZXM6IFBhdGhSZWZlcmVuY2VbXSB9KSB7XG4gICAgcmV0dXJuIG5ldyBOb25FbXB0eUV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzKHsgdmFsdWVzIH0pO1xuICB9XG5cbiAgcHVibGljIHR5cGU6IHN0cmluZztcbiAgcHVibGljIHZhbHVlczogUGF0aFJlZmVyZW5jZVtdO1xuXG4gIGZvckVhY2goY2FsbGJhY2s6ICh2YWx1ZTogUGF0aFJlZmVyZW5jZSkgPT4gdm9pZCkge1xuICAgIGxldCB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcbiAgICB2YWx1ZXMuZm9yRWFjaCgoa2V5LCBpKSA9PiBjYWxsYmFjayh2YWx1ZXNbaV0pKTtcbiAgfVxuXG4gIGFic3RyYWN0IGF0KGluZGV4OiBudW1iZXIpOiBQYXRoUmVmZXJlbmNlO1xuICBhYnN0cmFjdCB2YWx1ZSgpOiBhbnlbXTtcbn1cblxuY2xhc3MgTm9uRW1wdHlFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyBleHRlbmRzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgcHVibGljIHZhbHVlczogUGF0aFJlZmVyZW5jZVtdO1xuXG4gIGNvbnN0cnVjdG9yKHsgdmFsdWVzIH06IHsgdmFsdWVzOiBQYXRoUmVmZXJlbmNlW10gfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gIH1cblxuICBhdChpbmRleDogbnVtYmVyKTogUGF0aFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzW2luZGV4XTtcbiAgfVxuXG4gIHZhbHVlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMubWFwKHYgPT4gdi52YWx1ZSgpKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUyA9IG5ldyAoY2xhc3MgZXh0ZW5kcyBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gIGF0KCk6IFBhdGhSZWZlcmVuY2Uge1xuICAgIHJldHVybiBOVUxMX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufSk7Il19