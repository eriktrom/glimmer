import { COMPILED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_POSITIONAL_ARGS, CompiledPositionalArgs, EvaluatedPositionalArgs } from './positional-args';
import { COMPILED_EMPTY_NAMED_ARGS, EVALUATED_EMPTY_NAMED_ARGS, CompiledNamedArgs, EvaluatedNamedArgs } from './named-args';
export class CompiledArgs {
    static create({ positional, named }) {
        if (positional === COMPILED_EMPTY_POSITIONAL_ARGS && named === COMPILED_EMPTY_NAMED_ARGS) {
            return COMPILED_EMPTY_ARGS;
        }
        else {
            return new CompiledNonEmptyArgs({ positional, named });
        }
    }
    static empty() {
        return COMPILED_EMPTY_ARGS;
    }
}
class CompiledNonEmptyArgs extends CompiledArgs {
    constructor({ positional, named }) {
        super();
        this.type = "named-args";
        this.positional = positional;
        this.named = named;
    }
    evaluate(vm) {
        return EvaluatedArgs.create({
            positional: this.positional.evaluate(vm),
            named: this.named.evaluate(vm)
        });
    }
}
export const COMPILED_EMPTY_ARGS = new (class extends CompiledArgs {
    constructor(...args) {
        super(...args);
        this.type = "empty-named-args";
    }
    evaluate(vm) {
        return EvaluatedArgs.empty();
    }
}
);
export class EvaluatedArgs {
    static empty() {
        return EMPTY_EVALUATED_ARGS;
    }
    static create(options) {
        return new NonEmptyEvaluatedArgs(options);
    }
    static positional(values) {
        return new NonEmptyEvaluatedArgs({ positional: EvaluatedPositionalArgs.create({ values }), named: EvaluatedNamedArgs.empty() });
    }
}
class NonEmptyEvaluatedArgs extends EvaluatedArgs {
    constructor({ positional, named }) {
        super();
        this.positional = positional;
        this.named = named;
    }
}
export const EMPTY_EVALUATED_ARGS = new (class extends EvaluatedArgs {
    constructor(...args) {
        super(...args);
        this.positional = EVALUATED_EMPTY_POSITIONAL_ARGS;
        this.named = EVALUATED_EMPTY_NAMED_ARGS;
    }
}
);
export { CompiledPositionalArgs, EvaluatedPositionalArgs, CompiledNamedArgs, EvaluatedNamedArgs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxFQUFFLDhCQUE4QixFQUFFLCtCQUErQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CO09BQzdJLEVBQUUseUJBQXlCLEVBQUUsMEJBQTBCLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxjQUFjO0FBUzNIO0lBS0UsT0FBTyxNQUFNLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFzQjtRQUNyRCxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssOEJBQThCLElBQUksS0FBSyxLQUFNLHlCQUF5QixDQUFDLENBQUMsQ0FBQztZQUMxRixNQUFNLENBQUMsbUJBQW1CLENBQUM7UUFDN0IsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sS0FBSztRQUNWLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0FBR0gsQ0FBQztBQUVELG1DQUFtQyxZQUFZO0lBSzdDLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFzQjtRQUNuRCxPQUFPLENBQUM7UUFMSCxTQUFJLEdBQUcsWUFBWSxDQUFDO1FBTXpCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBTTtRQUNiLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1lBQzFCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDeEMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUMvQixDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQztBQUVELGFBQWEsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGNBQWMsWUFBWTtJQUExQjtRQUFjLGVBQVk7UUFDekQsU0FBSSxHQUFHLGtCQUFrQixDQUFDO0lBS25DLENBQUM7SUFIQyxRQUFRLENBQUMsRUFBRTtRQUNULE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQztBQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFPSDtJQUNFLE9BQU8sS0FBSztRQUNWLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUMsT0FBNkI7UUFDekMsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE9BQU8sVUFBVSxDQUFDLE1BQXVCO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFDLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsSSxDQUFDO0FBS0gsQ0FBQztBQUVELG9DQUFvQyxhQUFhO0lBQy9DLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUF3QjtRQUNyRCxPQUFPLENBQUM7UUFDUixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0FBQ0gsQ0FBQztBQUVELGFBQWEsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsYUFBYTtJQUEzQjtRQUFjLGVBQWE7UUFDM0QsZUFBVSxHQUFHLCtCQUErQixDQUFDO1FBQzdDLFVBQUssR0FBRywwQkFBMEIsQ0FBQztJQUM1QyxDQUFDO0FBQUQsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVILFNBQVMsc0JBQXNCLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsa0JBQWtCLEdBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIH0gZnJvbSAnLi9wb3NpdGlvbmFsLWFyZ3MnO1xuaW1wb3J0IHsgQ09NUElMRURfRU1QVFlfTkFNRURfQVJHUywgRVZBTFVBVEVEX0VNUFRZX05BTUVEX0FSR1MsIENvbXBpbGVkTmFtZWRBcmdzLCBFdmFsdWF0ZWROYW1lZEFyZ3MgfSBmcm9tICcuL25hbWVkLWFyZ3MnO1xuaW1wb3J0IFZNIGZyb20gJy4uLy4uL3ZtJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICdnbGltbWVyLXJlZmVyZW5jZSc7XG5cbmludGVyZmFjZSBDb21waWxlZEFyZ09wdGlvbnMge1xuICBwb3NpdGlvbmFsOiBDb21waWxlZFBvc2l0aW9uYWxBcmdzO1xuICBuYW1lZDogQ29tcGlsZWROYW1lZEFyZ3M7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21waWxlZEFyZ3Mge1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgcG9zaXRpb25hbDogQ29tcGlsZWRQb3NpdGlvbmFsQXJncztcbiAgcHVibGljIG5hbWVkOiBDb21waWxlZE5hbWVkQXJncztcblxuICBzdGF0aWMgY3JlYXRlKHsgcG9zaXRpb25hbCwgbmFtZWQgfTogQ29tcGlsZWRBcmdPcHRpb25zKTogQ29tcGlsZWRBcmdzIHtcbiAgICBpZiAocG9zaXRpb25hbCA9PT0gQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTICYmIG5hbWVkID09PSAgQ09NUElMRURfRU1QVFlfTkFNRURfQVJHUykge1xuICAgICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX0FSR1M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQ29tcGlsZWROb25FbXB0eUFyZ3MoeyBwb3NpdGlvbmFsLCBuYW1lZCB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZW1wdHkoKTogQ29tcGlsZWRBcmdzIHtcbiAgICByZXR1cm4gQ09NUElMRURfRU1QVFlfQVJHUztcbiAgfVxuXG4gIGFic3RyYWN0IGV2YWx1YXRlKHZtOiBWTSk6IEV2YWx1YXRlZEFyZ3M7XG59XG5cbmNsYXNzIENvbXBpbGVkTm9uRW1wdHlBcmdzIGV4dGVuZHMgQ29tcGlsZWRBcmdzIHtcbiAgcHVibGljIHR5cGUgPSBcIm5hbWVkLWFyZ3NcIjtcbiAgcHVibGljIHBvc2l0aW9uYWw6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3M7XG4gIHB1YmxpYyBuYW1lZDogQ29tcGlsZWROYW1lZEFyZ3M7XG5cbiAgY29uc3RydWN0b3IoeyBwb3NpdGlvbmFsLCBuYW1lZCB9OiBDb21waWxlZEFyZ09wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMucG9zaXRpb25hbCA9IHBvc2l0aW9uYWw7XG4gICAgdGhpcy5uYW1lZCA9IG5hbWVkO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIEV2YWx1YXRlZEFyZ3MuY3JlYXRlKHtcbiAgICAgIHBvc2l0aW9uYWw6IHRoaXMucG9zaXRpb25hbC5ldmFsdWF0ZSh2bSksXG4gICAgICBuYW1lZDogdGhpcy5uYW1lZC5ldmFsdWF0ZSh2bSlcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ09NUElMRURfRU1QVFlfQVJHUyA9IG5ldyAoY2xhc3MgZXh0ZW5kcyBDb21waWxlZEFyZ3Mge1xuICBwdWJsaWMgdHlwZSA9IFwiZW1wdHktbmFtZWQtYXJnc1wiO1xuXG4gIGV2YWx1YXRlKHZtKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIEV2YWx1YXRlZEFyZ3MuZW1wdHkoKTtcbiAgfVxufSk7XG5cbmludGVyZmFjZSBFdmFsdWF0ZWRBcmdzT3B0aW9ucyB7XG4gIHBvc2l0aW9uYWw6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzO1xuICBuYW1lZDogRXZhbHVhdGVkTmFtZWRBcmdzO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXZhbHVhdGVkQXJncyB7XG4gIHN0YXRpYyBlbXB0eSgpOiBFdmFsdWF0ZWRBcmdzIHtcbiAgICByZXR1cm4gRU1QVFlfRVZBTFVBVEVEX0FSR1M7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKG9wdGlvbnM6IEV2YWx1YXRlZEFyZ3NPcHRpb25zKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIG5ldyBOb25FbXB0eUV2YWx1YXRlZEFyZ3Mob3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgcG9zaXRpb25hbCh2YWx1ZXM6IFBhdGhSZWZlcmVuY2VbXSk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBuZXcgTm9uRW1wdHlFdmFsdWF0ZWRBcmdzKHsgcG9zaXRpb25hbDogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MuY3JlYXRlKHsgdmFsdWVzIH0pLCBuYW1lZDogRXZhbHVhdGVkTmFtZWRBcmdzLmVtcHR5KCkgfSk7XG4gIH1cblxuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgcG9zaXRpb25hbDogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3M7XG4gIHB1YmxpYyBuYW1lZDogRXZhbHVhdGVkTmFtZWRBcmdzO1xufVxuXG5jbGFzcyBOb25FbXB0eUV2YWx1YXRlZEFyZ3MgZXh0ZW5kcyBFdmFsdWF0ZWRBcmdzIHtcbiAgY29uc3RydWN0b3IoeyBwb3NpdGlvbmFsLCBuYW1lZCB9OiBFdmFsdWF0ZWRBcmdzT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wb3NpdGlvbmFsID0gcG9zaXRpb25hbDtcbiAgICB0aGlzLm5hbWVkID0gbmFtZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0VWQUxVQVRFRF9BUkdTID0gbmV3IChjbGFzcyBleHRlbmRzIEV2YWx1YXRlZEFyZ3Mge1xuICBwdWJsaWMgcG9zaXRpb25hbCA9IEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gIHB1YmxpYyBuYW1lZCA9IEVWQUxVQVRFRF9FTVBUWV9OQU1FRF9BUkdTO1xufSk7XG5cbmV4cG9ydCB7IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLCBDb21waWxlZE5hbWVkQXJncywgRXZhbHVhdGVkTmFtZWRBcmdzIH07Il19