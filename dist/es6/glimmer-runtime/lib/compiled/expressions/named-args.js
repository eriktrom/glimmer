import { NULL_REFERENCE } from '../../references';
import { dict } from 'glimmer-util';
export class CompiledNamedArgs {
    static create({ keys, values }) {
        if (keys.length) {
            return new CompiledNonEmptyNamedArgs({ keys, values });
        }
        else {
            return COMPILED_EMPTY_NAMED_ARGS;
        }
    }
}
class CompiledNonEmptyNamedArgs extends CompiledNamedArgs {
    constructor({ keys, values }) {
        super();
        this.type = "named-args";
        this.keys = keys;
        this.values = values;
    }
    evaluate(vm) {
        let { keys, values } = this;
        let valueReferences = values.map((value, i) => {
            return value.evaluate(vm);
        });
        return EvaluatedNamedArgs.create({ keys, values: valueReferences });
    }
}
export const COMPILED_EMPTY_NAMED_ARGS = new (class extends CompiledNamedArgs {
    constructor(...args) {
        super(...args);
        this.type = "empty-named-args";
    }
    evaluate(vm) {
        return EvaluatedNamedArgs.empty();
    }
}
);
export class EvaluatedNamedArgs {
    static empty() {
        return EVALUATED_EMPTY_NAMED_ARGS;
    }
    static create({ keys, values }) {
        return new NonEmptyEvaluatedNamedArgs({ keys, values });
    }
    forEach(callback) {
        let { keys, values } = this;
        keys.forEach((key, i) => callback(key, values[i]));
    }
}
class NonEmptyEvaluatedNamedArgs extends EvaluatedNamedArgs {
    constructor({ keys, values }) {
        super();
        let map = dict();
        values.forEach((v, i) => map[keys[i]] = v);
        this.keys = keys;
        this.values = values;
        this.map = map;
    }
    get(key) {
        return this.map[key];
    }
    value() {
        let hash = dict();
        let refs = this.values;
        this.keys.forEach((k, i) => {
            hash[k] = refs[i].value();
        });
        return hash;
    }
}
export const EVALUATED_EMPTY_NAMED_ARGS = new (class extends EvaluatedNamedArgs {
    get() {
        return NULL_REFERENCE;
    }
    value() {
        return null;
    }
}
);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZWQtYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvbmFtZWQtYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQjtPQUkxQyxFQUF3QixJQUFJLEVBQUUsTUFBTSxjQUFjO0FBRXpEO0lBQ0UsT0FBTyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUE0RDtRQUN0RixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQztBQUlILENBQUM7QUFFRCx3Q0FBd0MsaUJBQWlCO0lBS3ZELFlBQVksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUE0RDtRQUNwRixPQUFPLENBQUM7UUFMSCxTQUFJLEdBQUcsWUFBWSxDQUFDO1FBTXpCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBTTtRQUNiLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRTVCLElBQUksZUFBZSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN4QyxNQUFNLENBQWdCLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7QUFDSCxDQUFDO0FBRUQsYUFBYSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxpQkFBaUI7SUFBL0I7UUFBYyxlQUFpQjtRQUNwRSxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFLbkMsQ0FBQztJQUhDLFFBQVEsQ0FBQyxFQUFFO1FBQ1QsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BDLENBQUM7QUFDSCxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUg7SUFDRSxPQUFPLEtBQUs7UUFDVixNQUFNLENBQUMsMEJBQTBCLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU8sTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBdUQ7UUFDakYsTUFBTSxDQUFDLElBQUksMEJBQTBCLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBTUQsT0FBTyxDQUFDLFFBQTZEO1FBQ25FLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0FBSUgsQ0FBQztBQUVELHlDQUF5QyxrQkFBa0I7SUFLekQsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQXVEO1FBQy9FLE9BQU8sQ0FBQztRQUVSLElBQUksR0FBRyxHQUFHLElBQUksRUFBaUIsQ0FBQztRQUVoQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFtQjtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7QUFDSCxDQUFDO0FBRUQsYUFBYSwwQkFBMEIsR0FBRyxJQUFJLENBQUMsY0FBYyxrQkFBa0I7SUFDN0UsR0FBRztRQUNELE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUFBQSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOVUxMX1JFRkVSRU5DRSB9IGZyb20gJy4uLy4uL3JlZmVyZW5jZXMnO1xuaW1wb3J0IHsgQ29tcGlsZWRFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMnO1xuaW1wb3J0IFZNIGZyb20gJy4uLy4uL3ZtJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICdnbGltbWVyLXJlZmVyZW5jZSc7XG5pbXBvcnQgeyBJbnRlcm5lZFN0cmluZywgRGljdCwgZGljdCB9IGZyb20gJ2dsaW1tZXItdXRpbCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21waWxlZE5hbWVkQXJncyB7XG4gIHN0YXRpYyBjcmVhdGUoeyBrZXlzLCB2YWx1ZXMgfTogeyBrZXlzOiBJbnRlcm5lZFN0cmluZ1tdLCB2YWx1ZXM6IENvbXBpbGVkRXhwcmVzc2lvbltdIH0pOiBDb21waWxlZE5hbWVkQXJncyB7XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBpbGVkTm9uRW1wdHlOYW1lZEFyZ3MoeyBrZXlzLCB2YWx1ZXMgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gIGFic3RyYWN0IGV2YWx1YXRlKHZtOiBWTSk6IEV2YWx1YXRlZE5hbWVkQXJncztcbn1cblxuY2xhc3MgQ29tcGlsZWROb25FbXB0eU5hbWVkQXJncyBleHRlbmRzIENvbXBpbGVkTmFtZWRBcmdzIHtcbiAgcHVibGljIHR5cGUgPSBcIm5hbWVkLWFyZ3NcIjtcbiAgcHVibGljIGtleXM6IEludGVybmVkU3RyaW5nW107XG4gIHB1YmxpYyB2YWx1ZXM6IENvbXBpbGVkRXhwcmVzc2lvbltdO1xuXG4gIGNvbnN0cnVjdG9yKHsga2V5cywgdmFsdWVzIH06IHsga2V5czogSW50ZXJuZWRTdHJpbmdbXSwgdmFsdWVzOiBDb21waWxlZEV4cHJlc3Npb25bXSB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmtleXMgPSBrZXlzO1xuICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogRXZhbHVhdGVkTmFtZWRBcmdzIHtcbiAgICBsZXQgeyBrZXlzLCB2YWx1ZXMgfSA9IHRoaXM7XG5cbiAgICBsZXQgdmFsdWVSZWZlcmVuY2VzID0gdmFsdWVzLm1hcCgodmFsdWUsIGkpID0+IHtcbiAgICAgIHJldHVybiA8UGF0aFJlZmVyZW5jZT52YWx1ZS5ldmFsdWF0ZSh2bSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gRXZhbHVhdGVkTmFtZWRBcmdzLmNyZWF0ZSh7IGtleXMsIHZhbHVlczogdmFsdWVSZWZlcmVuY2VzIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTID0gbmV3IChjbGFzcyBleHRlbmRzIENvbXBpbGVkTmFtZWRBcmdzIHtcbiAgcHVibGljIHR5cGUgPSBcImVtcHR5LW5hbWVkLWFyZ3NcIjtcblxuICBldmFsdWF0ZSh2bSk6IEV2YWx1YXRlZE5hbWVkQXJncyB7XG4gICAgcmV0dXJuIEV2YWx1YXRlZE5hbWVkQXJncy5lbXB0eSgpO1xuICB9XG59KTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV2YWx1YXRlZE5hbWVkQXJncyB7XG4gIHN0YXRpYyBlbXB0eSgpOiBFdmFsdWF0ZWROYW1lZEFyZ3Mge1xuICAgIHJldHVybiBFVkFMVUFURURfRU1QVFlfTkFNRURfQVJHUztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUoeyBrZXlzLCB2YWx1ZXMgfTogeyBrZXlzOiBJbnRlcm5lZFN0cmluZ1tdLCB2YWx1ZXM6IFBhdGhSZWZlcmVuY2VbXSB9KSB7XG4gICAgcmV0dXJuIG5ldyBOb25FbXB0eUV2YWx1YXRlZE5hbWVkQXJncyh7IGtleXMsIHZhbHVlcyB9KTtcbiAgfVxuXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gIHB1YmxpYyB2YWx1ZXM6IFBhdGhSZWZlcmVuY2VbXTtcbiAgcHVibGljIGtleXM6IEludGVybmVkU3RyaW5nW107XG5cbiAgZm9yRWFjaChjYWxsYmFjazogKGtleTogSW50ZXJuZWRTdHJpbmcsIHZhbHVlOiBQYXRoUmVmZXJlbmNlKSA9PiB2b2lkKSB7XG4gICAgbGV0IHsga2V5cywgdmFsdWVzIH0gPSB0aGlzO1xuICAgIGtleXMuZm9yRWFjaCgoa2V5LCBpKSA9PiBjYWxsYmFjayhrZXksIHZhbHVlc1tpXSkpO1xuICB9XG5cbiAgYWJzdHJhY3QgZ2V0KGtleTogSW50ZXJuZWRTdHJpbmcpOiBQYXRoUmVmZXJlbmNlO1xuICBhYnN0cmFjdCB2YWx1ZSgpOiBEaWN0PGFueT47XG59XG5cbmNsYXNzIE5vbkVtcHR5RXZhbHVhdGVkTmFtZWRBcmdzIGV4dGVuZHMgRXZhbHVhdGVkTmFtZWRBcmdzIHtcbiAgcHVibGljIHZhbHVlczogUGF0aFJlZmVyZW5jZVtdO1xuICBwdWJsaWMga2V5czogSW50ZXJuZWRTdHJpbmdbXTtcbiAgcHVibGljIG1hcDogRGljdDxQYXRoUmVmZXJlbmNlPjtcblxuICBjb25zdHJ1Y3Rvcih7IGtleXMsIHZhbHVlcyB9OiB7IGtleXM6IEludGVybmVkU3RyaW5nW10sIHZhbHVlczogUGF0aFJlZmVyZW5jZVtdIH0pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgbGV0IG1hcCA9IGRpY3Q8UGF0aFJlZmVyZW5jZT4oKTtcblxuICAgIHZhbHVlcy5mb3JFYWNoKCh2LCBpKSA9PiBtYXBbPHN0cmluZz5rZXlzW2ldXSA9IHYpO1xuXG4gICAgdGhpcy5rZXlzID0ga2V5cztcbiAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICB0aGlzLm1hcCA9IG1hcDtcbiAgfVxuXG4gIGdldChrZXk6IEludGVybmVkU3RyaW5nKTogUGF0aFJlZmVyZW5jZSB7XG4gICAgcmV0dXJuIHRoaXMubWFwWzxzdHJpbmc+a2V5XTtcbiAgfVxuXG4gIHZhbHVlKCk6IERpY3Q8YW55PiB7XG4gICAgbGV0IGhhc2ggPSBkaWN0KCk7XG4gICAgbGV0IHJlZnMgPSB0aGlzLnZhbHVlcztcblxuICAgIHRoaXMua2V5cy5mb3JFYWNoKChrLCBpKSA9PiB7XG4gICAgICBoYXNoWzxzdHJpbmc+a10gPSByZWZzW2ldLnZhbHVlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRVZBTFVBVEVEX0VNUFRZX05BTUVEX0FSR1MgPSBuZXcgKGNsYXNzIGV4dGVuZHMgRXZhbHVhdGVkTmFtZWRBcmdzIHtcbiAgZ2V0KCk6IFBhdGhSZWZlcmVuY2Uge1xuICAgIHJldHVybiBOVUxMX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IERpY3Q8YW55PiB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn0pOyJdfQ==