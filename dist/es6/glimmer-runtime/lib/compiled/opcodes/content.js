import { clear } from '../../bounds';
class ContentOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
class UpdatingContentOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
export class AppendOpcode extends ContentOpcode {
    evaluate(vm) {
        let reference = vm.frame.getOperand();
        let value = reference.value();
        let node = vm.stack().appendText(value);
        vm.updateWith(new UpdateAppendOpcode(reference, value, node));
    }
}
export class UpdateAppendOpcode extends UpdatingContentOpcode {
    constructor(reference, lastValue, textNode) {
        super();
        this.reference = reference;
        this.lastValue = lastValue;
        this.textNode = textNode;
    }
    evaluate() {
        let val = this.reference.value();
        if (val !== this.lastValue) {
            this.lastValue = this.textNode.nodeValue = val;
        }
    }
}
export class TrustingAppendOpcode extends ContentOpcode {
    evaluate(vm) {
        let reference = vm.frame.getOperand();
        let value = reference.value();
        let bounds = vm.stack().insertHTMLBefore(null, value);
        vm.updateWith(new UpdateTrustingAppendOpcode(reference, value, bounds));
    }
}
export class UpdateTrustingAppendOpcode extends UpdatingContentOpcode {
    constructor(reference, lastValue, bounds) {
        super();
        this.reference = reference;
        this.lastValue = lastValue;
        this.bounds = bounds;
    }
    evaluate(vm) {
        let val = this.reference.value();
        if (val !== this.lastValue) {
            let parent = this.bounds.parentElement();
            let nextSibling = clear(this.bounds);
            this.bounds = vm.dom.insertHTMLBefore(parent, nextSibling, val);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItcnVudGltZS9saWIvY29tcGlsZWQvb3Bjb2Rlcy9jb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUdlLEVBQUUsS0FBSyxFQUFFLE1BQU0sY0FBYztBQUU1QztJQUFBO1FBRVMsU0FBSSxHQUFHLElBQUksQ0FBQztRQUNaLFNBQUksR0FBRyxJQUFJLENBQUM7SUFHckIsQ0FBQztBQUFELENBQUM7QUFFRDtJQUFBO1FBRVMsU0FBSSxHQUFHLElBQUksQ0FBQztRQUNaLFNBQUksR0FBRyxJQUFJLENBQUM7SUFHckIsQ0FBQztBQUFELENBQUM7QUFFRCxrQ0FBa0MsYUFBYTtJQUM3QyxRQUFRLENBQUMsRUFBTTtRQUNiLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0FBQ0gsQ0FBQztBQUVELHdDQUF3QyxxQkFBcUI7SUFLM0QsWUFBWSxTQUF3QixFQUFFLFNBQWlCLEVBQUUsUUFBYztRQUNyRSxPQUFPLENBQUM7UUFDUixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFakMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO1FBQ2pELENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUVELDBDQUEwQyxhQUFhO0lBQ3JELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN0QyxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksMEJBQTBCLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7QUFDSCxDQUFDO0FBRUQsZ0RBQWdELHFCQUFxQjtJQUtuRSxZQUFZLFNBQXdCLEVBQUUsU0FBaUIsRUFBRSxNQUFjO1FBQ3JFLE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxRQUFRLENBQUMsRUFBYztRQUNyQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWpDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLE1BQU0sR0FBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN0RCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3Bjb2RlLCBVcGRhdGluZ09wY29kZSB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuaW1wb3J0IHsgVk0sIFVwZGF0aW5nVk0gfSBmcm9tICcuLi8uLi92bSc7XG5pbXBvcnQgeyBQYXRoUmVmZXJlbmNlIH0gZnJvbSAnZ2xpbW1lci1yZWZlcmVuY2UnO1xuaW1wb3J0IEJvdW5kcywgeyBjbGVhciB9IGZyb20gJy4uLy4uL2JvdW5kcyc7XG5cbmFic3RyYWN0IGNsYXNzIENvbnRlbnRPcGNvZGUgaW1wbGVtZW50cyBPcGNvZGUge1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgbmV4dCA9IG51bGw7XG4gIHB1YmxpYyBwcmV2ID0gbnVsbDtcblxuICBhYnN0cmFjdCBldmFsdWF0ZSh2bTogVk0pO1xufVxuXG5hYnN0cmFjdCBjbGFzcyBVcGRhdGluZ0NvbnRlbnRPcGNvZGUgaW1wbGVtZW50cyBVcGRhdGluZ09wY29kZSB7XG4gIHB1YmxpYyB0eXBlOiBzdHJpbmc7XG4gIHB1YmxpYyBuZXh0ID0gbnVsbDtcbiAgcHVibGljIHByZXYgPSBudWxsO1xuXG4gIGFic3RyYWN0IGV2YWx1YXRlKHZtOiBVcGRhdGluZ1ZNKTtcbn1cblxuZXhwb3J0IGNsYXNzIEFwcGVuZE9wY29kZSBleHRlbmRzIENvbnRlbnRPcGNvZGUge1xuICBldmFsdWF0ZSh2bTogVk0pIHtcbiAgICBsZXQgcmVmZXJlbmNlID0gdm0uZnJhbWUuZ2V0T3BlcmFuZCgpO1xuICAgIGxldCB2YWx1ZSA9IHJlZmVyZW5jZS52YWx1ZSgpO1xuICAgIGxldCBub2RlID0gdm0uc3RhY2soKS5hcHBlbmRUZXh0KHZhbHVlKTtcbiAgICB2bS51cGRhdGVXaXRoKG5ldyBVcGRhdGVBcHBlbmRPcGNvZGUocmVmZXJlbmNlLCB2YWx1ZSwgbm9kZSkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVBcHBlbmRPcGNvZGUgZXh0ZW5kcyBVcGRhdGluZ0NvbnRlbnRPcGNvZGUge1xuICBwcml2YXRlIHJlZmVyZW5jZTogUGF0aFJlZmVyZW5jZTtcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IHN0cmluZztcbiAgcHJpdmF0ZSB0ZXh0Tm9kZTogVGV4dDtcblxuICBjb25zdHJ1Y3RvcihyZWZlcmVuY2U6IFBhdGhSZWZlcmVuY2UsIGxhc3RWYWx1ZTogc3RyaW5nLCB0ZXh0Tm9kZTogVGV4dCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XG4gICAgdGhpcy5sYXN0VmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgdGhpcy50ZXh0Tm9kZSA9IHRleHROb2RlO1xuICB9XG5cbiAgZXZhbHVhdGUoKSB7XG4gICAgbGV0IHZhbCA9IHRoaXMucmVmZXJlbmNlLnZhbHVlKCk7XG5cbiAgICBpZiAodmFsICE9PSB0aGlzLmxhc3RWYWx1ZSkge1xuICAgICAgdGhpcy5sYXN0VmFsdWUgPSB0aGlzLnRleHROb2RlLm5vZGVWYWx1ZSA9IHZhbDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRydXN0aW5nQXBwZW5kT3Bjb2RlIGV4dGVuZHMgQ29udGVudE9wY29kZSB7XG4gIGV2YWx1YXRlKHZtOiBWTSkge1xuICAgIGxldCByZWZlcmVuY2UgPSB2bS5mcmFtZS5nZXRPcGVyYW5kKCk7XG4gICAgbGV0IHZhbHVlID0gcmVmZXJlbmNlLnZhbHVlKCk7XG5cbiAgICBsZXQgYm91bmRzID0gdm0uc3RhY2soKS5pbnNlcnRIVE1MQmVmb3JlKG51bGwsIHZhbHVlKTtcbiAgICB2bS51cGRhdGVXaXRoKG5ldyBVcGRhdGVUcnVzdGluZ0FwcGVuZE9wY29kZShyZWZlcmVuY2UsIHZhbHVlLCBib3VuZHMpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRlVHJ1c3RpbmdBcHBlbmRPcGNvZGUgZXh0ZW5kcyBVcGRhdGluZ0NvbnRlbnRPcGNvZGUge1xuICBwcml2YXRlIHJlZmVyZW5jZTogUGF0aFJlZmVyZW5jZTtcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IHN0cmluZztcbiAgcHJpdmF0ZSBib3VuZHM6IEJvdW5kcztcblxuICBjb25zdHJ1Y3RvcihyZWZlcmVuY2U6IFBhdGhSZWZlcmVuY2UsIGxhc3RWYWx1ZTogc3RyaW5nLCBib3VuZHM6IEJvdW5kcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XG4gICAgdGhpcy5sYXN0VmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgdGhpcy5ib3VuZHMgPSBib3VuZHM7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVXBkYXRpbmdWTSkge1xuICAgIGxldCB2YWwgPSB0aGlzLnJlZmVyZW5jZS52YWx1ZSgpO1xuXG4gICAgaWYgKHZhbCAhPT0gdGhpcy5sYXN0VmFsdWUpIHtcbiAgICAgIGxldCBwYXJlbnQgPSA8SFRNTEVsZW1lbnQ+dGhpcy5ib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICAgICAgbGV0IG5leHRTaWJsaW5nID0gY2xlYXIodGhpcy5ib3VuZHMpO1xuICAgICAgdGhpcy5ib3VuZHMgPSB2bS5kb20uaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCB2YWwpO1xuICAgIH1cbiAgfVxufSJdfQ==