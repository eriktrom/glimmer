import { ListSlice, dict, assign } from 'glimmer-util';
class VMOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
class VMUpdatingOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
export class PushChildScopeOpcode extends VMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "push-child-scope";
    }
    evaluate(vm) {
        vm.pushChildScope();
    }
}
export class PopScopeOpcode extends VMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "pop-scope";
    }
    evaluate(vm) {
        vm.popScope();
    }
}
export class PutValue extends VMOpcode {
    constructor(expression) {
        super();
        this.type = "put-value";
        this.expression = expression;
    }
    evaluate(vm) {
        vm.evaluateOperand(this.expression);
    }
}
export class PutArgsOpcode extends VMOpcode {
    constructor(args) {
        super();
        this.type = "put-args";
        this.args = args;
    }
    evaluate(vm) {
        vm.evaluateArgs(this.args);
    }
}
export class BindArgsOpcode extends VMOpcode {
    constructor(template) {
        super();
        this.type = "bind-args";
        this.positional = [0, 0, 0, 0, 0, 0, 0, 0, 0];
        if (template.locals) {
            template.locals.forEach((name, i) => {
                this.positional[i] = template.symbolTable.get(name);
            });
        }
        if (template.isTop() && template.named) {
            this.named = template.named.reduce((obj, name) => assign(obj, { [name]: template.symbolTable.get(name) }), dict());
        }
        else {
            this.named = dict();
        }
    }
    evaluate(vm) {
        vm.bindArgs(this.positional, this.named);
    }
}
export class EnterOpcode extends VMOpcode {
    constructor(begin, end) {
        super();
        this.type = "enter";
        this.slice = new ListSlice(begin, end);
    }
    evaluate(vm) {
        vm.enter(this.slice);
    }
}
export class ExitOpcode extends VMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "exit";
    }
    evaluate(vm) {
        vm.exit();
    }
}
export class NoopOpcode extends VMOpcode {
    constructor(label) {
        super();
        this.type = "noop";
        this.label = null;
        if (label)
            this.label = label;
    }
    evaluate(vm) {
    }
}
export class EvaluateOpcode extends VMOpcode {
    constructor(template) {
        super();
        this.type = "evaluate";
        this.template = template;
    }
    evaluate(vm) {
        this.template.compile(vm.env);
        vm.pushFrame(this.template.ops, vm.frame.getArgs());
    }
}
export class TestOpcode extends VMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "test";
    }
    evaluate(vm) {
        vm.frame.setCondition(vm.frame.getOperand());
    }
}
export class JumpOpcode extends VMOpcode {
    constructor(target) {
        super();
        this.type = "jump";
        this.target = target;
    }
    evaluate(vm) {
        vm.goto(this.target);
    }
}
export class JumpIfOpcode extends JumpOpcode {
    constructor(...args) {
        super(...args);
        this.type = "jump-if";
    }
    evaluate(vm) {
        let reference = vm.frame.getCondition();
        let value = reference.value();
        if (value) {
            super.evaluate(vm);
            vm.updateWith(new Assert(reference));
        }
        else {
            vm.updateWith(new AssertFalse(reference));
        }
    }
}
export class JumpUnlessOpcode extends JumpOpcode {
    constructor(...args) {
        super(...args);
        this.type = "jump-unless";
    }
    evaluate(vm) {
        let reference = vm.frame.getCondition();
        let value = reference.value();
        if (value) {
            vm.updateWith(new Assert(reference));
        }
        else {
            super.evaluate(vm);
            vm.updateWith(new AssertFalse(reference));
        }
    }
}
export class Assert extends VMUpdatingOpcode {
    constructor(reference) {
        super();
        this.type = "assert";
        this.reference = reference;
    }
    evaluate(vm) {
        if (!this.reference.value()) {
            vm.throw();
        }
    }
}
export class AssertFalse extends VMUpdatingOpcode {
    constructor(reference) {
        super();
        this.type = "assert";
        this.reference = reference;
    }
    evaluate(vm) {
        if (this.reference.value()) {
            vm.throw();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,