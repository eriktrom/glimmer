class DOMOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
class DOMUpdatingOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
export class TextOpcode extends DOMOpcode {
    constructor(text) {
        super();
        this.type = "text";
        this.text = text;
    }
    evaluate(vm) {
        vm.stack().appendText(this.text);
    }
}
export class OpenPrimitiveElementOpcode extends DOMOpcode {
    constructor(tag) {
        super();
        this.type = "open-primitive-element";
        this.tag = tag;
    }
    evaluate(vm) {
        vm.stack().openElement(this.tag);
    }
}
export class CloseElementOpcode extends DOMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "close-element";
    }
    evaluate(vm) {
        let { element, classList, classNames } = vm.stack().closeElement();
        if (classList) {
            vm.updateWith(new UpdateAttributeOpcode(element, "class", classList, classNames));
        }
    }
}
export class StaticAttrOpcode extends DOMOpcode {
    constructor(attr) {
        super();
        this.type = "static-attr";
        this.name = attr.name;
        this.value = attr.value;
        this.namespace = attr.namespace;
    }
    evaluate(vm) {
        let { name, value, namespace } = this;
        if (this.namespace) {
            vm.stack().setAttributeNS(name, value, namespace);
        }
        else {
            vm.stack().setAttribute(name, value);
        }
    }
}
export class DynamicAttrOpcode extends DOMOpcode {
    constructor(attr) {
        super();
        this.type = "dynamic-attr";
        this.name = attr.name;
        this.namespace = attr.namespace;
    }
    evaluate(vm) {
        let { name, namespace } = this;
        let reference = vm.frame.getOperand();
        let value = reference.value();
        if (this.namespace) {
            vm.stack().setAttributeNS(name, value, namespace);
        }
        else {
            vm.stack().setAttribute(name, value);
        }
        vm.updateWith(new UpdateAttributeOpcode(vm.stack().element, name, reference, value));
    }
}
export class UpdateAttributeOpcode extends DOMUpdatingOpcode {
    constructor(element, name, reference, lastValue, namespace) {
        super();
        this.type = "update-attribute";
        this.element = element;
        this.name = name;
        this.reference = reference;
        this.lastValue = lastValue;
        this.namespace = namespace;
    }
    evaluate(vm) {
        let value = this.reference.value();
        if (value !== this.lastValue) {
            if (this.namespace) {
                vm.dom.setAttributeNS(this.element, this.name, value, this.namespace);
            }
            else {
                vm.dom.setAttribute(this.element, this.name, value);
            }
            this.lastValue = value;
        }
    }
}
export class DynamicPropOpcode extends DOMOpcode {
    constructor(attr) {
        super();
        this.type = "dynamic-prop";
        this.name = attr.name;
    }
    evaluate(vm) {
        let { name } = this;
        let element = vm.stack().element;
        let reference = vm.frame.getOperand();
        let value = reference.value();
        element[name] = value;
        vm.updateWith(new UpdatePropertyOpcode(element, name, reference, value));
    }
}
export class UpdatePropertyOpcode extends DOMUpdatingOpcode {
    constructor(element, name, reference, lastValue) {
        super();
        this.type = "update-property";
        this.element = element;
        this.name = name;
        this.reference = reference;
        this.lastValue = lastValue;
    }
    evaluate(vm) {
        let value = this.reference.value();
        if (value !== this.lastValue) {
            this.lastValue = this.element[this.name] = value;
        }
    }
}
export class AddClassOpcode extends DOMOpcode {
    constructor(...args) {
        super(...args);
        this.type = "add-class";
    }
    evaluate(vm) {
        vm.stack().addClass(vm.frame.getOperand());
    }
}
export class CommentOpcode extends DOMOpcode {
    constructor(comment) {
        super();
        this.type = "comment";
        this.value = comment.value;
    }
    evaluate(vm) {
        vm.stack().appendComment(this.value);
    }
}
//# sourceMappingURL=data:application/json;base64,