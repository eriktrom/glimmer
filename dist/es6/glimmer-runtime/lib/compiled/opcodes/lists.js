import { EvaluatedArgs } from '../expressions/args';
import { LITERAL, ListSlice, assert } from 'glimmer-util';
import { ConstReference, ListManager } from 'glimmer-reference';
class ListOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
class ListUpdatingOpcode {
    constructor() {
        this.next = null;
        this.prev = null;
    }
}
export class EnterListOpcode extends ListOpcode {
    constructor(start, end) {
        super();
        this.type = "enter-list";
        this.slice = new ListSlice(start, end);
    }
    evaluate(vm) {
        let listRef = vm.frame.getOperand();
        let keyPath = vm.frame.getArgs().named.get(LITERAL("key")).value();
        let manager = new ListManager(listRef /* WTF */, keyPath);
        let delegate = new IterateDelegate(vm);
        vm.frame.setIterator(manager.iterator(delegate));
        vm.enterList(manager, this.slice);
    }
}
export class ExitListOpcode extends ListOpcode {
    constructor(...args) {
        super(...args);
        this.type = "exit-list";
    }
    evaluate(vm) {
        vm.exitList();
    }
}
export class EnterWithKeyOpcode extends ListOpcode {
    constructor(start, end) {
        super();
        this.type = "enter-with-key";
        this.slice = new ListSlice(start, end);
    }
    evaluate(vm) {
        vm.enterWithKey(vm.frame.getKey(), this.slice);
    }
}
const TRUE_REF = new ConstReference(true);
const FALSE_REF = new ConstReference(false);
class IterateDelegate {
    constructor(vm) {
        this.vm = vm;
    }
    insert(key, item, before) {
        let { vm } = this;
        assert(!before, "Insertion should be append-only on initial render");
        vm.frame.setArgs(EvaluatedArgs.positional([item]));
        vm.frame.setOperand(item);
        vm.frame.setCondition(TRUE_REF);
        vm.frame.setKey(key);
    }
    retain(key, item) {
        assert(false, "Insertion should be append-only on initial render");
    }
    move(key, item, before) {
        assert(false, "Insertion should be append-only on initial render");
    }
    delete(key) {
        assert(false, "Insertion should be append-only on initial render");
    }
    done() {
        this.vm.frame.setCondition(FALSE_REF);
    }
}
export class NextIterOpcode extends ListOpcode {
    constructor(end) {
        super();
        this.type = "next-iter";
        this.end = end;
    }
    evaluate(vm) {
        if (vm.frame.getIterator().next()) {
            vm.goto(this.end);
        }
    }
}
class ReiterateOpcode extends ListUpdatingOpcode {
    constructor(initialize) {
        super();
        this.type = "reiterate";
        this.initialize = initialize;
    }
    evaluate(vm) {
        vm.throw(this.initialize);
    }
}
//# sourceMappingURL=data:application/json;base64,