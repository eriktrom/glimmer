import TemplateVisitor from "./template-visitor";
import { assert } from "./utils";
import { getAttrNamespace, dict } from "glimmer-util";
import { isHelper } from "glimmer-syntax";
class Template {
    constructor() {
        this.statements = null;
        this.locals = null;
        this.named = null;
        this.meta = null;
        this.arity = null;
    }
}
class JavaScriptCompiler {
    constructor(opcodes) {
        this.locals = null;
        this.namedAttrs = dict();
        this.opcodes = opcodes;
        this.output = [];
        this.expressions = [];
        this.templates = [];
    }
    static process(opcodes) {
        let compiler = new JavaScriptCompiler(opcodes);
        compiler.process();
        return compiler.templates;
    }
    process() {
        this.opcodes.forEach(([opcode, ...args]) => {
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](...args);
        });
    }
    /// Nesting
    startProgram([program]) {
        this.locals = program.blockParams;
    }
    endProgram() {
        let template = new Template();
        let attrs = Object.keys(this.namedAttrs);
        if (this.locals.length) {
            template.locals = this.locals;
            this.locals = [];
        }
        if (attrs.length) {
            template.named = attrs;
            this.namedAttrs = dict();
        }
        template.statements = this.output;
        this.output = [];
        this.templates.push(template);
    }
    /// Statements
    text(content) {
        this.push('text', content);
    }
    append(trusted) {
        this.push('append', this.popExpression(), trusted);
    }
    comment(value) {
        this.push('comment', value);
    }
    modifier(path) {
        let params = this.popExpression();
        let hash = this.popExpression();
        this.push('modifier', path, params, hash);
    }
    block(path, template, inverse) {
        let params = this.popExpression();
        let hash = this.popExpression();
        this.push('block', path, params, hash, template, inverse);
    }
    component(tag, template) {
        let attrs = this.popExpression();
        this.push('component', tag, attrs, template);
    }
    openElement(tag, blockParams) {
        this.push('openElement', tag, blockParams);
    }
    closeElement() {
        this.push('closeElement');
    }
    addClass(name) {
        let value = this.popExpression();
        this.push('addClass', value);
    }
    staticAttr(name, namespace) {
        let value = this.popExpression();
        this.push('staticAttr', name, value, namespace);
    }
    dynamicAttr(name, namespace) {
        let value = this.popExpression();
        this.push('dynamicAttr', name, value, namespace);
    }
    dynamicProp(name) {
        let value = this.popExpression();
        this.push('dynamicProp', name, value);
    }
    /// Expressions
    literal(value) {
        this.pushValue(value);
    }
    unknown(path) {
        this.pushExpression('unknown', path);
    }
    attr(path) {
        this.namedAttrs[path[0]] = true;
        this.pushExpression('attr', path);
    }
    get(path) {
        this.pushExpression('get', path);
    }
    concat() {
        this.pushExpression('concat', this.popExpression());
    }
    helper(path) {
        let params = this.popExpression();
        let hash = this.popExpression();
        this.pushExpression('helper', path, params, hash);
    }
    /// Stack Management Opcodes
    pushLiteral(literal) {
        this.pushValue(literal);
    }
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popExpression());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        assert(this.expressions.length >= size, `Expected ${size} expressions on the stack, found ${this.expressions.length}`);
        let pairs = [];
        for (let i = 0; i < size; i++) {
            pairs.push(this.popExpression(), this.popExpression());
        }
        this.pushValue(pairs);
    }
    /// Utilities
    push(name, ...args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.output.push([name, ...args]);
    }
    pushExpression(name, ...args) {
        this.expressions.push([name, ...args]);
    }
    pushValue(val) {
        this.expressions.push(val);
    }
    popExpression() {
        assert(this.expressions.length, "No expression found on stack");
        return this.expressions.pop();
    }
}
export default class TemplateCompiler {
    constructor(options = {}) {
        this.templateId = 0;
        this.templateIds = [];
        this.opcodes = [];
        this.includeMeta = false;
        this.options = options;
    }
    static compile(options, ast) {
        let templateVisitor = new TemplateVisitor();
        templateVisitor.visit(ast);
        let compiler = new TemplateCompiler(options);
        let opcodes = compiler.process(templateVisitor.actions);
        return JavaScriptCompiler.process(opcodes);
    }
    process(actions) {
        actions.forEach(([name, ...args]) => {
            if (!this[name]) {
                throw new Error(`Unimplemented ${name} on TemplateCompiler`);
            }
            this[name](...args);
        });
        return this.opcodes;
    }
    startProgram(program) {
        this.templateId++;
        this.opcode('startProgram', program, program);
    }
    endProgram() {
        this.templateIds.push(this.templateId - 1);
        this.opcode('endProgram', null);
    }
    text([action]) {
        this.opcode('text', action, action.chars);
    }
    comment([action]) {
        this.opcode('comment', action, action.value);
    }
    openElement([action]) {
        this.opcode('openElement', action, action.tag, action.blockParams);
        for (let i = 0; i < action.attributes.length; i++) {
            this.attribute([action.attributes[i]]);
        }
        for (let i = 0; i < action.modifiers.length; i++) {
            this.modifier([action.modifiers[i]]);
        }
    }
    closeElement() {
        this.opcode('closeElement', null);
    }
    component([action]) {
        let { attributes, tag } = action;
        for (let i = 0; i < attributes.length; i++) {
            let { name, value } = attributes[i];
            this.prepareAttributeValue(value);
            this.opcode('pushLiteral', name, name);
        }
        this.opcode('prepareObject', null, attributes.length);
        this.opcode('component', action, tag, this.templateIds.pop());
    }
    attribute([action]) {
        let { name, value } = action;
        let namespace = getAttrNamespace(name);
        let isStatic = this.prepareAttributeValue(value);
        // REFACTOR TODO: escaped?
        if (name === 'class') {
            this.opcode('addClass', action);
        }
        else if (isStatic) {
            this.opcode('staticAttr', action, name, namespace);
        }
        else if (action.value.type === 'MustacheStatement') {
            this.opcode('dynamicProp', action, name);
        }
        else {
            this.opcode('dynamicAttr', action, name, namespace);
        }
    }
    modifier([action]) {
        let { path: { parts } } = action;
        this.prepareHelper(action);
        this.opcode('modifier', action, parts);
    }
    mustache([action]) {
        if (action.path.data) {
            this.attr([action.path]);
        }
        else if (isHelper(action)) {
            this.SubExpression(action);
        }
        else {
            this.ambiguous([action]);
        }
        this.opcode('append', action, !action.escaped);
    }
    block([action /*, index, count*/]) {
        this.prepareHelper(action);
        let templateId = this.templateIds.pop();
        let inverseId = action.inverse === null ? null : this.templateIds.pop();
        this.opcode('block', action, action.path.parts, templateId, inverseId);
    }
    /// Internal actions, not found in the original processed actions
    attributeMustache([action]) {
        let { path } = action;
        if (path.data) {
            this.attr([action.path]);
        }
        else if (isHelper(action)) {
            this.prepareHelper(action);
            this.opcode('helper', action, path.parts);
        }
        else if (path.type === 'PathExpression') {
            this.opcode('get', action, path.parts);
        }
        else {
            this.opcode('literal', action, path.value);
        }
    }
    attr([path]) {
        let { parts, data } = path;
        if (data) {
            parts = parts.slice();
            parts[0] = `@${parts[0]}`;
        }
        this.opcode('attr', path, parts);
    }
    ambiguous([action]) {
        this.opcode('unknown', action, action.path.parts);
    }
    /// Expressions, invoked recursively from prepareParams and prepareHash
    SubExpression(expr) {
        this.prepareHelper(expr);
        this.opcode('helper', expr, expr.path.parts);
    }
    PathExpression(expr) {
        if (expr.data) {
            this.attr([expr]);
        }
        else {
            this.opcode('get', expr, expr.parts);
        }
    }
    StringLiteral(action) {
        this.opcode('pushLiteral', null, action.value);
    }
    BooleanLiteral(action) {
        this.opcode('pushLiteral', null, action.value);
    }
    NumberLiteral(action) {
        this.opcode('pushLiteral', null, action.value);
    }
    NullLiteral(action) {
        this.opcode('pushLiteral', null, action.value);
    }
    UndefinedLiteral(action) {
        this.opcode('pushLiteral', null, action.value);
    }
    /// Utilities
    opcode(name, action, ...args) {
        let opcode = [name, ...args];
        if (this.includeMeta && action) {
            opcode.push(this.meta(action));
        }
        this.opcodes.push(opcode);
    }
    prepareHelper({ params, hash }) {
        this.prepareHash(hash);
        this.prepareParams(params);
    }
    preparePath(path) {
        this.opcode('pushLiteral', path, path.parts);
    }
    prepareParams(params) {
        if (!params.length) {
            this.opcode('pushLiteral', null, null);
            return;
        }
        for (let i = params.length - 1; i >= 0; i--) {
            let param = params[i];
            if (param.type === 'MustacheStatement') {
                this.attributeMustache([param]);
            }
            else {
                assert(this[param.type], `Unimplemented ${param.type} on TemplateCompiler`);
                this[param.type](param);
            }
        }
        this.opcode('prepareArray', null, params.length);
    }
    prepareHash(hash) {
        let pairs = hash.pairs;
        if (!pairs.length) {
            this.opcode('pushLiteral', null, null);
            return;
        }
        for (let i = pairs.length - 1; i >= 0; i--) {
            let { key, value } = pairs[i];
            assert(this[value.type], `Unimplemented ${value.type} on TemplateCompiler`);
            this[value.type](value);
            this.opcode('pushLiteral', null, key);
        }
        this.opcode('prepareObject', null, pairs.length);
    }
    prepareAttributeValue(value) {
        // returns the static value if the value is static
        switch (value.type) {
            case 'TextNode':
                this.opcode('literal', value, value.chars);
                return true;
            case 'MustacheStatement':
                this.attributeMustache([value]);
                return false;
            case 'ConcatStatement':
                this.prepareParams(value.parts);
                this.opcode('concat', value);
                return false;
        }
    }
    meta(node) {
        let loc = node.loc;
        if (!loc) {
            return [];
        }
        let { source, start, end } = loc;
        return ['loc', [source || null, [start.line, start.column], [end.line, end.column]]];
    }
}
//# sourceMappingURL=data:application/json;base64,