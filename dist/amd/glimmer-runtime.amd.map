{"version":3,"sources":["glimmer-runtime/index.js","glimmer-runtime/lib/bounds.ts","glimmer-runtime/lib/builder.ts","glimmer-runtime/lib/compiled/expressions/args.ts","glimmer-runtime/lib/compiled/expressions/concat.ts","glimmer-runtime/lib/compiled/expressions/helper.ts","glimmer-runtime/lib/compiled/expressions/named-args.ts","glimmer-runtime/lib/compiled/expressions/positional-args.ts","glimmer-runtime/lib/compiled/expressions/ref.ts","glimmer-runtime/lib/compiled/expressions/value.ts","glimmer-runtime/lib/compiled/expressions.ts","glimmer-runtime/lib/compiled/opcodes/component.ts","glimmer-runtime/lib/compiled/opcodes/content.ts","glimmer-runtime/lib/compiled/opcodes/dom.ts","glimmer-runtime/lib/compiled/opcodes/lists.ts","glimmer-runtime/lib/compiled/opcodes/vm.ts","glimmer-runtime/lib/compiler.ts","glimmer-runtime/lib/component/interfaces.ts","glimmer-runtime/lib/dom.ts","glimmer-runtime/lib/environment.ts","glimmer-runtime/lib/opcodes.ts","glimmer-runtime/lib/references.ts","glimmer-runtime/lib/scanner.ts","glimmer-runtime/lib/static-stack.ts","glimmer-runtime/lib/symbol-table.ts","glimmer-runtime/lib/symbols.ts","glimmer-runtime/lib/syntax/core.ts","glimmer-runtime/lib/syntax/statements.ts","glimmer-runtime/lib/syntax.ts","glimmer-runtime/lib/template.ts","glimmer-runtime/lib/utils.ts","glimmer-runtime/lib/vm.ts","handlebars/safe-string.js","handlebars/utils.js"],"sourcesContent":["export {\n  StatementSyntax,\n  ExpressionSyntax,\n  AttributeSyntax,\n  ATTRIBUTE_SYNTAX,\n  default as Syntax\n} from './lib/syntax';\n\nexport { default as Template } from './lib/template';\n\nexport {\n  Templates,\n  Append,\n  Unknown,\n  StaticAttr,\n  DynamicAttr,\n  DynamicProp,\n  AddClass,\n  Args as ArgsSyntax,\n  NamedArgs as NamedArgsSyntax,\n  PositionalArgs as PositionalArgsSyntax,\n  Get as GetSyntax,\n  Value as ValueSyntax,\n  OpenElement,\n  Helper as HelperSyntax,\n  Block as BlockSyntax,\n  OpenPrimitiveElement as OpenPrimitiveElementSyntax,\n  CloseElement as CloseElementSyntax\n} from './lib/syntax/core';\n\nexport {\n  default as Compiler,\n  RawTemplate\n} from './lib/compiler';\n\nexport {\n  OpSeq,\n  OpSeqBuilder\n} from './lib/opcodes';\n\nexport {\n  PushChildScopeOpcode,\n  PopScopeOpcode,\n  PutArgsOpcode,\n  BindArgsOpcode,\n  NoopOpcode,\n  EnterOpcode,\n  ExitOpcode,\n  EvaluateOpcode,\n  TestOpcode,\n  JumpOpcode,\n  JumpIfOpcode,\n  JumpUnlessOpcode,\n} from './lib/compiled/opcodes/vm';\n\nexport {\n  OpenComponentOpcode\n} from './lib/compiled/opcodes/component';\n\n\nexport {\n  CloseElementOpcode\n} from './lib/compiled/opcodes/dom';\n\nexport {\n  CompiledArgs,\n  CompiledNamedArgs,\n  CompiledPositionalArgs,\n  EvaluatedArgs,\n  EvaluatedNamedArgs,\n  EvaluatedPositionalArgs\n} from './lib/compiled/expressions/args';\n\nexport {\n  EnterListOpcode,\n  ExitListOpcode,\n  EnterWithKeyOpcode,\n  NextIterOpcode\n} from './lib/compiled/opcodes/lists';\n\nexport { VM, UpdatingVM, RenderResult } from './lib/vm';\n\nexport {\n  Scope,\n  default as Environment,\n  Helper,\n} from './lib/environment';\n\nexport {\n  ComponentClass,\n  ComponentDefinition,\n  ComponentDefinitionOptions,\n  ComponentInvocation,\n  ComponentHooks,\n  CompileComponentOptions,\n  Component\n} from './lib/component/interfaces';\n\nexport { default as DOMHelper, isWhitespace } from './lib/dom';\nexport { ElementStack } from './lib/builder';","export interface Bounds {\n  // a method to future-proof for wormholing; may not be needed ultimately\n  parentElement(): Element;\n  firstNode(): Node;\n  lastNode(): Node;\n}\n\nexport default Bounds;\n\nexport class ConcreteBounds implements Bounds {\n  public parentNode: Element;\n  private first: Node;\n  private last: Node;\n\n  constructor(parent: Element, first: Node, last: Node) {\n    this.parentNode = parent;\n    this.first = first;\n    this.last = last;\n  }\n\n  parentElement() { return this.parentNode; }\n  firstNode() { return this.first; }\n  lastNode() { return this.last; }\n}\n\nexport class SingleNodeBounds implements Bounds {\n  private parentNode: Element;\n  private node: Node;\n\n  constructor(parentNode: Element, node: Node) {\n    this.parentNode = parentNode;\n    this.node = node;\n  }\n\n  parentElement() { return this.parentNode; }\n  firstNode() { return this.node; }\n  lastNode() { return this.node; }\n}\n\nexport function bounds(parent: Element, first: Node, last: Node): Bounds {\n  return new ConcreteBounds(parent, first, last);\n}\n\nexport function single(parent: Element, node: Node): Bounds {\n  return new SingleNodeBounds(parent, node);\n}\n\nexport function move(bounds: Bounds, reference: Node) {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let node = first;\n\n  while (node) {\n    let next = node.nextSibling;\n    parent.insertBefore(node, reference);\n    if (node === last) return next;\n    node = next;\n  }\n\n  return null;\n}\n\nexport function clear(bounds: Bounds) {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let node = first;\n\n  while (node) {\n    let next = node.nextSibling;\n    parent.removeChild(node);\n    if (node === last) return next;\n    node = next;\n  }\n\n  return null;\n}\n","import Bounds from './bounds';\n\nimport DOMHelper from './dom';\n\nimport { InternedString, Stack, LinkedList, LinkedListNode, assert } from 'glimmer-util';\n\nimport {\n  ChainableReference,\n  PushPullReference,\n} from 'glimmer-reference';\n\ninterface FirstNode {\n  firstNode(): Node;\n}\n\ninterface LastNode {\n  lastNode(): Node;\n}\n\nclass First {\n  private node: Node;\n\n  constructor(node) {\n    this.node = node;\n  }\n\n  firstNode(): Node {\n    return this.node;\n  }\n}\n\nclass Last {\n  private node: Node;\n\n  constructor(node) {\n    this.node = node;\n  }\n\n  lastNode(): Node {\n    return this.node;\n  }\n}\n\nexport class ClassList extends PushPullReference {\n  private list: ChainableReference[] = [];\n\n  append(reference: ChainableReference) {\n    this.list.push(reference);\n    // this._addSource(reference);\n  }\n\n  value(): string {\n    if (this.list.length === 0) return null;\n    return this.list.map(i => i.value()).join(' ');\n  }\n}\n\ninterface ElementStackOptions {\n  parentNode: Element;\n  nextSibling: Node;\n  dom: DOMHelper;\n}\n\ninterface ElementStackClass<T extends ElementStack> {\n  new (options: ElementStackOptions): T;\n}\n\nclass BlockStackElement {\n  public firstNode: Node = null;\n  public lastNode: Node = null;\n}\n\nexport class ElementStack {\n  public nextSibling: Node;\n  public dom: DOMHelper;\n  public element: Element;\n  public classList: ClassList = null;\n\n  private elementStack = new Stack<Element>();\n  private nextSiblingStack = new Stack<Node>();\n  private classListStack = new Stack<ClassList>();\n  private blockStack = new Stack<Tracker>();\n\n  constructor({ dom, parentNode, nextSibling }: ElementStackOptions) {\n    this.dom = dom;\n    this.element = parentNode;\n    this.nextSibling = nextSibling;\n    if (nextSibling && !(nextSibling instanceof Node)) throw new Error(\"NOPE\");\n\n    this.elementStack.push(this.element);\n    this.nextSiblingStack.push(this.nextSibling);\n  }\n\n  block(): Tracker {\n    return this.blockStack.current;\n  }\n\n  private pushElement(element) {\n    this.elementStack.push(element);\n    this.classListStack.push(null);\n    this.nextSiblingStack.push(null);\n    this.element = element;\n    this.classList = null;\n    this.nextSibling = null;\n  }\n\n  private popElement() {\n    let { elementStack, nextSiblingStack, classListStack }  = this;\n    let topElement = elementStack.pop();\n\n    nextSiblingStack.pop();\n    classListStack.pop();\n\n    this.element = elementStack.current;\n    this.nextSibling = nextSiblingStack.current;\n    this.classList = classListStack.current;\n\n    return topElement;\n  }\n\n  private pushBlock() {\n    let tracker = new BlockTracker(this.element);\n\n    if (this.blockStack.current !== null) this.blockStack.current.newBounds(tracker);\n\n    this.blockStack.push(tracker);\n  }\n\n  private pushBlockList(list: LinkedList<Bounds & LinkedListNode>) {\n    let tracker = new BlockListTracker(this.element, list);\n\n    if (this.blockStack.current !== null) this.blockStack.current.newBounds(tracker);\n\n    this.blockStack.push(tracker);\n  }\n\n  private popBlock(): Bounds {\n    this.blockStack.current.finalize(this);\n\n    return this.blockStack.pop();\n  }\n\n  openElement(tag: string): Element {\n    let element = this.dom.createElement(tag, this.element);\n    this.pushElement(element);\n    this.blockStack.current.openElement(element);\n    return element;\n  }\n\n  openBlock() {\n    this.pushBlock();\n  }\n\n  closeBlock(): Bounds {\n    return this.popBlock();\n  }\n\n  openBlockList(list: LinkedList<Bounds & LinkedListNode>) {\n    this.pushBlockList(list);\n  }\n\n  newBounds(bounds: Bounds) {\n    this.blockStack.current.newBounds(bounds);\n  }\n\n  appendText(string: string): Text {\n    let { dom } = this;\n    let text = dom.createTextNode(string);\n    dom.insertBefore(this.element, text, this.nextSibling);\n    this.blockStack.current.newNode(text);\n    return text;\n  }\n\n  appendComment(string: string): Comment {\n    let { dom } = this;\n    let comment = dom.createComment(string);\n    dom.insertBefore(this.element, comment, this.nextSibling);\n    this.blockStack.current.newNode(comment);\n    return comment;\n  }\n\n  insertHTMLBefore(nextSibling: Node, html: string): Bounds {\n    if (!(this.element instanceof HTMLElement)) {\n      throw new Error(`You cannot insert HTML (using triple-curlies or htmlSafe) into an SVG context: ${this.element.tagName}`);\n    }\n\n    let bounds = this.dom.insertHTMLBefore(<HTMLElement & Element>this.element, nextSibling, html);\n    this.blockStack.current.newBounds(bounds);\n    return bounds;\n  }\n\n  setAttribute(name: InternedString, value: any) {\n    this.dom.setAttribute(<HTMLElement & Element>this.element, name, value);\n  }\n\n  setAttributeNS(name: InternedString, value: any, namespace: InternedString) {\n    this.dom.setAttributeNS(this.element, name, value, namespace);\n  }\n\n  addClass(ref: ChainableReference) {\n    let classList = this.classList;\n    if (classList === null) {\n      classList = this.classList = new ClassList();\n      this.classListStack.push(classList);\n    }\n\n    classList.append(ref);\n  }\n\n  closeElement(): { element: Element, classList: ClassList, classNames: string } {\n    let { classList } = this;\n    this.blockStack.current.closeElement();\n    let child = this.popElement();\n    this.dom.insertBefore(this.element, child, this.nextSibling);\n\n    let classNames = classList ? classList.value() : null;\n    if (classNames !== null) {\n      this.dom.setAttribute(child, 'class', classNames);\n    }\n\n    return { element: child, classList, classNames };\n  }\n\n  appendHTML(html: string): Bounds {\n    return this.dom.insertHTMLBefore(<HTMLElement>this.element, this.nextSibling, html);\n  }\n}\n\ninterface Tracker extends Bounds {\n  openElement(element: Element);\n  closeElement();\n  newNode(node: Node);\n  newBounds(bounds: Bounds);\n  finalize(stack: ElementStack);\n}\n\nclass BlockTracker implements Tracker {\n  private first: FirstNode = null;\n  private last: LastNode = null;\n  private nesting = 0;\n\n  private parent: Element;\n\n  constructor(parent: Element){\n    this.parent = parent;\n  }\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode() {\n    return this.first && this.first.firstNode();\n  }\n\n  lastNode() {\n    return this.last && this.last.lastNode();\n  }\n\n  openElement(element: Element) {\n    this.newNode(element);\n    this.nesting++;\n  }\n\n  closeElement() {\n    this.nesting--;\n  }\n\n  newNode(node: Node) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = new First(node);\n    }\n\n    this.last = new Last(node);\n  }\n\n  newBounds(bounds: Bounds) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = bounds;\n    }\n\n    this.last = bounds;\n  }\n\n  finalize(stack: ElementStack) {\n    if (!this.first) {\n      stack.appendComment('');\n    }\n  }\n}\n\nclass BlockListTracker implements Tracker {\n  private last: Node = null;\n  private parent: Element;\n  private boundList: LinkedList<Bounds & LinkedListNode>;\n\n  constructor(parent: Element, boundList: LinkedList<Bounds & LinkedListNode>) {\n    this.parent = parent;\n    this.boundList = boundList;\n  }\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode() {\n    let head = this.boundList.head();\n\n    return head ? head.firstNode() : this.last;\n  }\n\n  lastNode() {\n    return this.last;\n  }\n\n  openElement(element: Element) {\n    assert(false, 'Cannot openElement directly inside a block list');\n  }\n\n  closeElement() {\n    assert(false, 'Cannot closeElement directly inside a block list');\n  }\n\n  newNode(node: Node) {\n    assert(false, 'Cannot create a new node directly inside a block list');\n  }\n\n  newBounds(bounds: Bounds) {\n  }\n\n  finalize(stack: ElementStack) {\n    let { dom, element: parent, nextSibling } = stack;\n\n    let comment = dom.createComment('');\n    dom.insertBefore(parent, comment, nextSibling);\n\n    this.last = comment;\n  }\n}\n","import { COMPILED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_POSITIONAL_ARGS, CompiledPositionalArgs, EvaluatedPositionalArgs } from './positional-args';\nimport { COMPILED_EMPTY_NAMED_ARGS, EVALUATED_EMPTY_NAMED_ARGS, CompiledNamedArgs, EvaluatedNamedArgs } from './named-args';\nimport VM from '../../vm';\nimport { PathReference } from 'glimmer-reference';\n\ninterface CompiledArgOptions {\n  positional: CompiledPositionalArgs;\n  named: CompiledNamedArgs;\n}\n\nexport abstract class CompiledArgs {\n  public type: string;\n  public positional: CompiledPositionalArgs;\n  public named: CompiledNamedArgs;\n\n  static create({ positional, named }: CompiledArgOptions): CompiledArgs {\n    if (positional === COMPILED_EMPTY_POSITIONAL_ARGS && named ===  COMPILED_EMPTY_NAMED_ARGS) {\n      return COMPILED_EMPTY_ARGS;\n    } else {\n      return new CompiledNonEmptyArgs({ positional, named });\n    }\n  }\n\n  static empty(): CompiledArgs {\n    return COMPILED_EMPTY_ARGS;\n  }\n\n  abstract evaluate(vm: VM): EvaluatedArgs;\n}\n\nclass CompiledNonEmptyArgs extends CompiledArgs {\n  public type = \"named-args\";\n  public positional: CompiledPositionalArgs;\n  public named: CompiledNamedArgs;\n\n  constructor({ positional, named }: CompiledArgOptions) {\n    super();\n    this.positional = positional;\n    this.named = named;\n  }\n\n  evaluate(vm: VM): EvaluatedArgs {\n    return EvaluatedArgs.create({\n      positional: this.positional.evaluate(vm),\n      named: this.named.evaluate(vm)\n    });\n  }\n}\n\nexport const COMPILED_EMPTY_ARGS = new (class extends CompiledArgs {\n  public type = \"empty-named-args\";\n\n  evaluate(vm): EvaluatedArgs {\n    return EvaluatedArgs.empty();\n  }\n});\n\ninterface EvaluatedArgsOptions {\n  positional: EvaluatedPositionalArgs;\n  named: EvaluatedNamedArgs;\n}\n\nexport abstract class EvaluatedArgs {\n  static empty(): EvaluatedArgs {\n    return EMPTY_EVALUATED_ARGS;\n  }\n\n  static create(options: EvaluatedArgsOptions): EvaluatedArgs {\n    return new NonEmptyEvaluatedArgs(options);\n  }\n\n  static positional(values: PathReference[]): EvaluatedArgs {\n    return new NonEmptyEvaluatedArgs({ positional: EvaluatedPositionalArgs.create({ values }), named: EvaluatedNamedArgs.empty() });\n  }\n\n  public type: string;\n  public positional: EvaluatedPositionalArgs;\n  public named: EvaluatedNamedArgs;\n}\n\nclass NonEmptyEvaluatedArgs extends EvaluatedArgs {\n  constructor({ positional, named }: EvaluatedArgsOptions) {\n    super();\n    this.positional = positional;\n    this.named = named;\n  }\n}\n\nexport const EMPTY_EVALUATED_ARGS = new (class extends EvaluatedArgs {\n  public positional = EVALUATED_EMPTY_POSITIONAL_ARGS;\n  public named = EVALUATED_EMPTY_NAMED_ARGS;\n});\n\nexport { CompiledPositionalArgs, EvaluatedPositionalArgs, CompiledNamedArgs, EvaluatedNamedArgs };","import { CompiledExpression } from '../expressions';\nimport VM from '../../vm';\nimport { PathReference, ChainableReference } from 'glimmer-reference';\n\nexport default class CompiledConcat {\n  public type = \"concat\";\n  public parts: CompiledExpression[];\n\n  constructor({ parts }: { parts: CompiledExpression[] }) {\n    this.parts = parts;\n  }\n\n  evaluate(vm: VM): ConcatReference {\n    let parts = this.parts.map(p => p.evaluate(vm));\n    return new ConcatReference(parts);\n  }\n}\n\nclass ConcatReference implements ChainableReference {\n  private parts: PathReference[];\n\n  constructor(parts: PathReference[]) {\n    this.parts = parts;\n  }\n\n  isDirty() {\n    return true;\n  }\n\n  value() {\n    return this.parts.map(p => p.value()).join('');\n  }\n\n  destroy() {}\n}\n","import { CompiledExpression } from '../expressions';\nimport { CompiledArgs, EvaluatedArgs } from './args';\nimport VM from '../../vm';\nimport { Helper } from '../../environment';\nimport { PathReference } from 'glimmer-reference';\n\nexport default class CompiledHelper implements CompiledExpression {\n  public type = \"helper\";\n  public helper: Helper;\n  public args: CompiledArgs;\n\n  constructor({ helper, args }: { helper: Helper, args: CompiledArgs }) {\n    this.helper = helper;\n    this.args = args;\n  }\n\n  evaluate(vm: VM): PathReference {\n    return new HelperInvocationReference(this.helper, this.args.evaluate(vm));\n  }\n}\n\nclass HelperInvocationReference implements PathReference {\n  private helper: Helper;\n  private args: EvaluatedArgs;\n\n  constructor(helper: Helper, args: EvaluatedArgs) {\n    this.helper = helper;\n    this.args = args;\n  }\n\n  get(): PathReference {\n    throw new Error(\"Unimplemented: Yielding the result of a helper call.\");\n  }\n\n  isDirty() {\n    return true;\n  }\n\n  value(): any {\n    let { helper, args: { positional, named } }  = this;\n    return helper(positional.value(), named.value(), null);\n  }\n\n  destroy() {}\n}\n","import { NULL_REFERENCE } from '../../references';\nimport { CompiledExpression } from '../expressions';\nimport VM from '../../vm';\nimport { PathReference } from 'glimmer-reference';\nimport { InternedString, Dict, dict } from 'glimmer-util';\n\nexport abstract class CompiledNamedArgs {\n  static create({ keys, values }: { keys: InternedString[], values: CompiledExpression[] }): CompiledNamedArgs {\n    if (keys.length) {\n      return new CompiledNonEmptyNamedArgs({ keys, values });\n    } else {\n      return COMPILED_EMPTY_NAMED_ARGS;\n    }\n  }\n\n  public type: string;\n  abstract evaluate(vm: VM): EvaluatedNamedArgs;\n}\n\nclass CompiledNonEmptyNamedArgs extends CompiledNamedArgs {\n  public type = \"named-args\";\n  public keys: InternedString[];\n  public values: CompiledExpression[];\n\n  constructor({ keys, values }: { keys: InternedString[], values: CompiledExpression[] }) {\n    super();\n    this.keys = keys;\n    this.values = values;\n  }\n\n  evaluate(vm: VM): EvaluatedNamedArgs {\n    let { keys, values } = this;\n\n    let valueReferences = values.map((value, i) => {\n      return <PathReference>value.evaluate(vm);\n    });\n\n    return EvaluatedNamedArgs.create({ keys, values: valueReferences });\n  }\n}\n\nexport const COMPILED_EMPTY_NAMED_ARGS = new (class extends CompiledNamedArgs {\n  public type = \"empty-named-args\";\n\n  evaluate(vm): EvaluatedNamedArgs {\n    return EvaluatedNamedArgs.empty();\n  }\n});\n\nexport abstract class EvaluatedNamedArgs {\n  static empty(): EvaluatedNamedArgs {\n    return EVALUATED_EMPTY_NAMED_ARGS;\n  }\n\n  static create({ keys, values }: { keys: InternedString[], values: PathReference[] }) {\n    return new NonEmptyEvaluatedNamedArgs({ keys, values });\n  }\n\n  public type: string;\n  public values: PathReference[];\n  public keys: InternedString[];\n\n  forEach(callback: (key: InternedString, value: PathReference) => void) {\n    let { keys, values } = this;\n    keys.forEach((key, i) => callback(key, values[i]));\n  }\n\n  abstract get(key: InternedString): PathReference;\n  abstract value(): Dict<any>;\n}\n\nclass NonEmptyEvaluatedNamedArgs extends EvaluatedNamedArgs {\n  public values: PathReference[];\n  public keys: InternedString[];\n  public map: Dict<PathReference>;\n\n  constructor({ keys, values }: { keys: InternedString[], values: PathReference[] }) {\n    super();\n\n    let map = dict<PathReference>();\n\n    values.forEach((v, i) => map[<string>keys[i]] = v);\n\n    this.keys = keys;\n    this.values = values;\n    this.map = map;\n  }\n\n  get(key: InternedString): PathReference {\n    return this.map[<string>key];\n  }\n\n  value(): Dict<any> {\n    let hash = dict();\n    let refs = this.values;\n\n    this.keys.forEach((k, i) => {\n      hash[<string>k] = refs[i].value();\n    });\n\n    return hash;\n  }\n}\n\nexport const EVALUATED_EMPTY_NAMED_ARGS = new (class extends EvaluatedNamedArgs {\n  get(): PathReference {\n    return NULL_REFERENCE;\n  }\n\n  value(): Dict<any> {\n    return null;\n  }\n});","import { NULL_REFERENCE } from '../../references';\nimport { CompiledExpression } from '../expressions';\nimport VM from '../../vm';\nimport { PathReference } from 'glimmer-reference';\n\nexport abstract class CompiledPositionalArgs {\n  static create({ values }: { values: CompiledExpression[] }): CompiledPositionalArgs {\n    if (values.length) {\n      return new CompiledNonEmptyPositionalArgs({ values });\n    } else {\n      return COMPILED_EMPTY_POSITIONAL_ARGS;\n    }\n  }\n\n  public type: string;\n  abstract evaluate(vm: VM): EvaluatedPositionalArgs;\n}\n\nclass CompiledNonEmptyPositionalArgs extends CompiledPositionalArgs {\n  public type = \"named-args\";\n  public values: CompiledExpression[];\n\n  constructor({ values }: { values: CompiledExpression[] }) {\n    super();\n    this.values = values;\n  }\n\n  evaluate(vm: VM): EvaluatedPositionalArgs {\n    let { values } = this;\n\n    let valueReferences = values.map((value, i) => {\n      return <PathReference>value.evaluate(vm);\n    });\n\n    return EvaluatedPositionalArgs.create({ values: valueReferences });\n  }\n}\n\nexport const COMPILED_EMPTY_POSITIONAL_ARGS = new (class extends CompiledPositionalArgs {\n  public type = \"empty-named-args\";\n\n  evaluate(vm): EvaluatedPositionalArgs {\n    return EvaluatedPositionalArgs.empty();\n  }\n});\n\nexport abstract class EvaluatedPositionalArgs {\n  static empty(): EvaluatedPositionalArgs {\n    return EVALUATED_EMPTY_POSITIONAL_ARGS;\n  }\n\n  static create({ values }: { values: PathReference[] }) {\n    return new NonEmptyEvaluatedPositionalArgs({ values });\n  }\n\n  public type: string;\n  public values: PathReference[];\n\n  forEach(callback: (value: PathReference) => void) {\n    let values = this.values;\n    values.forEach((key, i) => callback(values[i]));\n  }\n\n  abstract at(index: number): PathReference;\n  abstract value(): any[];\n}\n\nclass NonEmptyEvaluatedPositionalArgs extends EvaluatedPositionalArgs {\n  public values: PathReference[];\n\n  constructor({ values }: { values: PathReference[] }) {\n    super();\n    this.values = values;\n  }\n\n  at(index: number): PathReference {\n    return this.values[index];\n  }\n\n  value(): any[] {\n    return this.values.map(v => v.value());\n  }\n}\n\nexport const EVALUATED_EMPTY_POSITIONAL_ARGS = new (class extends EvaluatedPositionalArgs {\n  at(): PathReference {\n    return NULL_REFERENCE;\n  }\n\n  value(): any[] {\n    return null;\n  }\n});","import { CompiledExpression } from '../expressions';\nimport VM from '../../vm';\nimport { InternedString } from 'glimmer-util';\nimport { PathReference, referenceFromParts } from 'glimmer-reference';\n\nexport class CompiledLocalRef implements CompiledExpression {\n  public type = \"local-ref\";\n  private symbol: number;\n  private lookup: InternedString[];\n\n  constructor({ symbol, lookup }: { symbol: number, lookup: InternedString[] }) {\n    this.symbol = symbol;\n    this.lookup = lookup;\n  }\n\n  evaluate(vm: VM): PathReference {\n    let base: PathReference = vm.referenceForSymbol(this.symbol);\n    return referenceFromParts(base, this.lookup);\n  }\n}\n\nexport class CompiledSelfRef implements CompiledExpression {\n  public type = \"self-ref\";\n  private parts: InternedString[];\n\n  constructor({ parts }: { parts: InternedString[] }) {\n    this.parts = parts;\n  }\n\n  evaluate(vm: VM): PathReference {\n    return referenceFromParts(vm.getSelf(), this.parts);\n  }\n}\n","import VM from '../../vm';\nimport { CompiledExpression } from '../expressions';\nimport { ConstReference, PathReference } from 'glimmer-reference';\nimport { InternedString, Dict } from 'glimmer-util';\n\nexport default class CompiledValue implements CompiledExpression {\n  public type = \"value\";\n  private reference: ValueReference;\n\n  constructor({ value }: { value: any }) {\n    this.reference = new ValueReference(value);\n  }\n\n  clone() {\n    return new CompiledValue({ value: this.reference.value() });\n  }\n\n  evaluate(vm: VM): PathReference {\n    return this.reference;\n  }\n}\n\nclass ValueReference extends ConstReference<any> implements PathReference {\n  protected inner: any;\n  protected children: Dict<ValueReference>;\n\n  get(key: InternedString) {\n    let { children } = this;\n    let child = children[<string>key];\n\n    if (!child) {\n      child = children[<string>key] = new ValueReference(this.inner[<string>key]);\n    }\n\n    return child;\n  }\n\n  isDirty() { return false; }\n  value(): any { return this.inner; }\n  destroy() {}\n}",null,"import { Opcode } from '../../opcodes';\nimport { VM } from '../../vm';\nimport { ComponentInvocation } from '../../component/interfaces';\nimport { CompiledArgs } from '../../compiled/expressions/args';\n\nexport class OpenComponentOpcode extends Opcode {\n  public type = \"open-component\";\n  private invocation: ComponentInvocation;\n  private args: CompiledArgs;\n\n  constructor(invocation: ComponentInvocation, args: CompiledArgs) {\n    super();\n    this.invocation = invocation;\n    this.args = args;\n  }\n\n  evaluate(vm: VM) {\n    let { args, invocation: { templates, layout } } = this;\n    vm.invoke(layout, args, templates);\n  }\n}","import { Opcode, UpdatingOpcode } from '../../opcodes';\nimport { VM, UpdatingVM } from '../../vm';\nimport { PathReference } from 'glimmer-reference';\nimport Bounds, { clear } from '../../bounds';\n\nabstract class ContentOpcode implements Opcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: VM);\n}\n\nabstract class UpdatingContentOpcode implements UpdatingOpcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: UpdatingVM);\n}\n\nexport class AppendOpcode extends ContentOpcode {\n  evaluate(vm: VM) {\n    let reference = vm.frame.getOperand();\n    let value = reference.value();\n    let node = vm.stack().appendText(value);\n    vm.updateWith(new UpdateAppendOpcode(reference, value, node));\n  }\n}\n\nexport class UpdateAppendOpcode extends UpdatingContentOpcode {\n  private reference: PathReference;\n  private lastValue: string;\n  private textNode: Text;\n\n  constructor(reference: PathReference, lastValue: string, textNode: Text) {\n    super();\n    this.reference = reference;\n    this.lastValue = lastValue;\n    this.textNode = textNode;\n  }\n\n  evaluate() {\n    let val = this.reference.value();\n\n    if (val !== this.lastValue) {\n      this.lastValue = this.textNode.nodeValue = val;\n    }\n  }\n}\n\nexport class TrustingAppendOpcode extends ContentOpcode {\n  evaluate(vm: VM) {\n    let reference = vm.frame.getOperand();\n    let value = reference.value();\n\n    let bounds = vm.stack().insertHTMLBefore(null, value);\n    vm.updateWith(new UpdateTrustingAppendOpcode(reference, value, bounds));\n  }\n}\n\nexport class UpdateTrustingAppendOpcode extends UpdatingContentOpcode {\n  private reference: PathReference;\n  private lastValue: string;\n  private bounds: Bounds;\n\n  constructor(reference: PathReference, lastValue: string, bounds: Bounds) {\n    super();\n    this.reference = reference;\n    this.lastValue = lastValue;\n    this.bounds = bounds;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let val = this.reference.value();\n\n    if (val !== this.lastValue) {\n      let parent = <HTMLElement>this.bounds.parentElement();\n      let nextSibling = clear(this.bounds);\n      this.bounds = vm.dom.insertHTMLBefore(parent, nextSibling, val);\n    }\n  }\n}","import { Opcode, UpdatingOpcode } from '../../opcodes';\nimport { VM, UpdatingVM } from '../../vm';\nimport { InternedString } from 'glimmer-util';\nimport { StaticAttr, DynamicAttr, DynamicProp, Comment } from '../../syntax/core';\nimport { ChainableReference } from 'glimmer-reference';\n\nabstract class DOMOpcode implements Opcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: VM);\n}\n\nabstract class DOMUpdatingOpcode implements UpdatingOpcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: UpdatingVM);\n}\n\nexport class TextOpcode extends DOMOpcode {\n  public type = \"text\";\n  private text: InternedString;\n\n  constructor(text: InternedString) {\n    super();\n    this.text = text;\n  }\n\n  evaluate(vm: VM) {\n    vm.stack().appendText(this.text);\n  }\n}\n\nexport class OpenPrimitiveElementOpcode extends DOMOpcode {\n  public type = \"open-primitive-element\";\n  private tag: InternedString;\n\n  constructor(tag: InternedString) {\n    super();\n    this.tag = tag;\n  }\n\n  evaluate(vm: VM) {\n    vm.stack().openElement(this.tag);\n  }\n}\n\nexport class CloseElementOpcode extends DOMOpcode {\n  public type = \"close-element\";\n\n  evaluate(vm: VM) {\n    let { element, classList, classNames } = vm.stack().closeElement();\n\n    if (classList) {\n      vm.updateWith(new UpdateAttributeOpcode(element, \"class\", classList, classNames));\n    }\n  }\n}\n\nexport class StaticAttrOpcode extends DOMOpcode {\n  public type = \"static-attr\";\n  public name: InternedString;\n  public value: InternedString;\n  public namespace: InternedString;\n\n  constructor(attr: StaticAttr) {\n    super();\n    this.name = attr.name;\n    this.value = attr.value;\n    this.namespace = attr.namespace;\n  }\n\n  evaluate(vm: VM) {\n    let { name, value, namespace } = this;\n\n    if (this.namespace) {\n      vm.stack().setAttributeNS(name, value, namespace);\n    } else {\n      vm.stack().setAttribute(name, value);\n    }\n  }\n}\n\nexport class DynamicAttrOpcode extends DOMOpcode {\n  public type = \"dynamic-attr\";\n  public name: InternedString;\n  public value: InternedString;\n  public namespace: InternedString;\n\n  constructor(attr: DynamicAttr) {\n    super();\n    this.name = attr.name;\n    this.namespace = attr.namespace;\n  }\n\n  evaluate(vm: VM) {\n    let { name, namespace } = this;\n    let reference = vm.frame.getOperand();\n    let value = reference.value();\n\n    if (this.namespace) {\n      vm.stack().setAttributeNS(name, value, namespace);\n    } else {\n      vm.stack().setAttribute(name, value);\n    }\n\n    vm.updateWith(new UpdateAttributeOpcode(vm.stack().element, name, reference, value));\n  }\n}\n\nexport class UpdateAttributeOpcode extends DOMUpdatingOpcode {\n  public type = \"update-attribute\";\n\n  private element: Element;\n  private name: string;\n  private namespace: string;\n  private reference: ChainableReference;\n  private lastValue: string;\n\n  constructor(element: Element, name: string, reference: ChainableReference, lastValue: string, namespace?: string) {\n    super();\n    this.element = element;\n    this.name = name;\n    this.reference = reference;\n    this.lastValue = lastValue;\n    this.namespace = namespace;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let value = this.reference.value();\n\n    if (value !== this.lastValue) {\n      if (this.namespace) {\n        vm.dom.setAttributeNS(this.element, this.name, value, this.namespace);\n      } else {\n        vm.dom.setAttribute(this.element, this.name, value);\n      }\n\n      this.lastValue = value;\n    }\n  }\n}\n\nexport class DynamicPropOpcode extends DOMOpcode {\n  public type = \"dynamic-prop\";\n  public name: InternedString;\n  public value: InternedString;\n\n  constructor(attr: DynamicProp) {\n    super();\n    this.name = attr.name;\n  }\n\n  evaluate(vm: VM) {\n    let { name } = this;\n    let element = vm.stack().element;\n    let reference = vm.frame.getOperand();\n    let value = reference.value();\n\n    element[<string>name] = value;\n\n    vm.updateWith(new UpdatePropertyOpcode(element, name, reference, value));\n  }\n}\n\nexport class UpdatePropertyOpcode extends DOMUpdatingOpcode {\n  public type = \"update-property\";\n\n  private element: Element;\n  private name: string;\n  private reference: ChainableReference;\n  private lastValue: any;\n\n  constructor(element: Element, name: string, reference: ChainableReference, lastValue: any) {\n    super();\n    this.element = element;\n    this.name = name;\n    this.reference = reference;\n    this.lastValue = lastValue;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let value = this.reference.value();\n\n    if (value !== this.lastValue) {\n      this.lastValue = this.element[this.name] = value;\n    }\n  }\n}\n\nexport class AddClassOpcode extends DOMOpcode {\n  public type = \"add-class\";\n\n  evaluate(vm: VM) {\n    vm.stack().addClass(vm.frame.getOperand());\n  }\n}\n\nexport class CommentOpcode extends DOMOpcode {\n  public type = \"comment\";\n  public value: InternedString;\n\n  constructor(comment: Comment) {\n    super();\n    this.value = comment.value;\n  }\n\n  evaluate(vm: VM) {\n    vm.stack().appendComment(this.value);\n  }\n}\n","import { Opcode, UpdatingOpcode, UnflattenedOpcode } from '../../opcodes';\nimport { VM, UpdatingVM } from '../../vm';\nimport { BindArgsOpcode, NoopOpcode } from '../../compiled/opcodes/vm';\nimport { EvaluatedArgs } from '../expressions/args';\nimport { ListRange, Range } from '../../utils';\nimport { LITERAL, ListSlice, Slice, Dict, InternedString, assert } from 'glimmer-util';\nimport { RootReference, ConstReference, ListManager, ListDelegate } from 'glimmer-reference';\n\nabstract class ListOpcode implements Opcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: VM);\n}\n\nabstract class ListUpdatingOpcode implements UpdatingOpcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: UpdatingVM);\n}\n\nexport class EnterListOpcode extends ListOpcode {\n  public type = \"enter-list\";\n\n  private slice: Slice<Opcode>;\n\n  constructor(start: NoopOpcode, end: NoopOpcode) {\n    super();\n    this.slice = new ListSlice(start, end);\n  }\n\n  evaluate(vm: VM) {\n    let listRef = vm.frame.getOperand();\n    let keyPath = vm.frame.getArgs().named.get(LITERAL(\"key\")).value();\n\n    let manager =  new ListManager(<RootReference>listRef /* WTF */, keyPath);\n    let delegate = new IterateDelegate(vm);\n\n    vm.frame.setIterator(manager.iterator(delegate));\n\n    vm.enterList(manager, this.slice);\n  }\n}\n\nexport class ExitListOpcode extends ListOpcode {\n  public type = \"exit-list\";\n\n  evaluate(vm: VM) {\n    vm.exitList();\n  }\n}\n\nexport class EnterWithKeyOpcode extends ListOpcode {\n  public type = \"enter-with-key\";\n\n  private slice: Slice<Opcode>;\n\n  constructor(start: NoopOpcode, end: NoopOpcode) {\n    super();\n    this.slice = new ListSlice(start, end);\n  }\n\n  evaluate(vm: VM) {\n    vm.enterWithKey(vm.frame.getKey(), this.slice);\n  }\n}\n\nconst TRUE_REF = new ConstReference(true);\nconst FALSE_REF = new ConstReference(false);\n\nclass IterateDelegate implements ListDelegate {\n  private vm: VM;\n\n  constructor(vm: VM) {\n    this.vm = vm;\n  }\n\n  insert(key: InternedString, item: RootReference, before: InternedString) {\n    let { vm } = this;\n\n    assert(!before, \"Insertion should be append-only on initial render\");\n\n    vm.frame.setArgs(EvaluatedArgs.positional([item]));\n    vm.frame.setOperand(item);\n    vm.frame.setCondition(TRUE_REF);\n    vm.frame.setKey(key);\n  }\n\n  retain(key: InternedString, item: RootReference) {\n    assert(false, \"Insertion should be append-only on initial render\");\n  }\n\n  move(key: InternedString, item: RootReference, before: InternedString) {\n    assert(false, \"Insertion should be append-only on initial render\");\n  }\n\n  delete(key: InternedString) {\n    assert(false, \"Insertion should be append-only on initial render\");\n  }\n\n  done() {\n    this.vm.frame.setCondition(FALSE_REF);\n  }\n}\n\nexport class NextIterOpcode extends ListOpcode {\n  public type = \"next-iter\";\n\n  private end: NoopOpcode;\n\n  constructor(end: NoopOpcode) {\n    super();\n    this.end = end;\n  }\n\n  evaluate(vm: VM) {\n    if (vm.frame.getIterator().next()) {\n      vm.goto(this.end);\n    }\n  }\n}\n\nclass ReiterateOpcode extends ListUpdatingOpcode {\n  public type = \"reiterate\";\n\n  private initialize: (vm: VM) => void;\n\n  constructor(initialize: (vm: VM) => void) {\n    super();\n    this.initialize = initialize;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    vm.throw(this.initialize);\n  }\n}","import { Opcode, UpdatingOpcode } from '../../opcodes';\nimport { CompiledExpression } from '../expressions';\nimport { CompiledArgs } from '../expressions/args';\nimport { VM, UpdatingVM } from '../../vm';\nimport { RawTemplate } from '../../compiler';\nimport { Range } from '../../utils';\nimport { ListSlice, Slice, Dict, dict, assign } from 'glimmer-util';\nimport { ChainableReference } from 'glimmer-reference';\n\nabstract class VMOpcode implements Opcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: VM);\n}\n\nabstract class VMUpdatingOpcode implements UpdatingOpcode {\n  public type: string;\n  public next = null;\n  public prev = null;\n\n  abstract evaluate(vm: UpdatingVM);\n}\n\nexport class PushChildScopeOpcode extends VMOpcode {\n  public type = \"push-child-scope\";\n\n  evaluate(vm: VM) {\n    vm.pushChildScope();\n  }\n}\n\nexport class PopScopeOpcode extends VMOpcode {\n  public type = \"pop-scope\";\n\n  evaluate(vm: VM) {\n    vm.popScope();\n  }\n}\n\nexport class PutValue extends VMOpcode {\n  public type = \"put-value\";\n  private expression: CompiledExpression;\n\n  constructor(expression: CompiledExpression) {\n    super();\n    this.expression = expression;\n  }\n\n  evaluate(vm: VM) {\n    vm.evaluateOperand(this.expression);\n  }\n}\n\nexport class PutArgsOpcode extends VMOpcode {\n  public type = \"put-args\";\n\n  private args: CompiledArgs;\n\n  constructor(args: CompiledArgs) {\n    super();\n    this.args = args;\n  }\n\n  evaluate(vm: VM) {\n    vm.evaluateArgs(this.args);\n  }\n}\n\nexport class BindArgsOpcode extends VMOpcode {\n  public type = \"bind-args\";\n\n  private positional: number[] = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  private named: Dict<number>;\n\n  constructor(template: RawTemplate) {\n    super();\n\n    if (template.locals) {\n      template.locals.forEach((name, i) => {\n        this.positional[<number>i] = template.symbolTable.get(name);\n      });\n    }\n\n    if (template.isTop() && template.named) {\n      this.named = template.named.reduce(\n        (obj, name) => assign(obj, { [<string>name]: template.symbolTable.get(name) }),\n        dict<number>()\n      );\n    } else {\n      this.named = dict<number>();\n    }\n  }\n\n  evaluate(vm: VM) {\n    vm.bindArgs(this.positional, this.named);\n  }\n}\n\nexport class EnterOpcode extends VMOpcode {\n  public type = \"enter\";\n  private slice: Slice<Opcode>;\n\n  constructor(begin: NoopOpcode, end: NoopOpcode) {\n    super();\n    this.slice = new ListSlice(begin, end);\n  }\n\n  evaluate(vm: VM) {\n    vm.enter(this.slice);\n  }\n}\n\nexport class ExitOpcode extends VMOpcode {\n  public type = \"exit\";\n\n  evaluate(vm: VM) {\n    vm.exit();\n  }\n}\n\nexport class NoopOpcode extends VMOpcode {\n  public type = \"noop\";\n\n  public label: string = null;\n\n  constructor(label?: string) {\n    super();\n    if (label) this.label = label;\n  }\n\n  evaluate(vm: VM) {\n  }\n}\n\nexport class EvaluateOpcode extends VMOpcode {\n  public type = \"evaluate\";\n  private template: RawTemplate;\n\n  constructor(template: RawTemplate) {\n    super();\n    this.template = template;\n  }\n\n  evaluate(vm: VM) {\n    this.template.compile(vm.env);\n    vm.pushFrame(this.template.ops, vm.frame.getArgs());\n  }\n}\n\nexport class TestOpcode extends VMOpcode {\n  public type = \"test\";\n\n  evaluate(vm: VM) {\n    vm.frame.setCondition(vm.frame.getOperand());\n  }\n}\n\nexport class JumpOpcode extends VMOpcode {\n  public type = \"jump\";\n\n  public target: NoopOpcode;\n\n  constructor(target: NoopOpcode) {\n    super();\n    this.target = target;\n  }\n\n  evaluate(vm: VM) {\n    vm.goto(this.target)\n  }\n}\n\nexport class JumpIfOpcode extends JumpOpcode {\n  public type = \"jump-if\";\n\n  evaluate(vm: VM) {\n    let reference = vm.frame.getCondition();\n    let value = reference.value();\n\n    if (value) {\n      super.evaluate(vm);\n      vm.updateWith(new Assert(reference));\n    } else {\n      vm.updateWith(new AssertFalse(reference));\n    }\n  }\n}\n\nexport class JumpUnlessOpcode extends JumpOpcode {\n  public type = \"jump-unless\";\n\n  evaluate(vm: VM) {\n    let reference = vm.frame.getCondition();\n    let value = reference.value();\n\n    if (value) {\n      vm.updateWith(new Assert(reference));\n    } else {\n      super.evaluate(vm);\n      vm.updateWith(new AssertFalse(reference));\n    }\n  }\n}\n\nexport class Assert extends VMUpdatingOpcode {\n  public type = \"assert\";\n\n  private reference: ChainableReference;\n\n  constructor(reference: ChainableReference) {\n    super();\n    this.reference = reference;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    if (!this.reference.value()) {\n      vm.throw();\n    }\n  }\n}\n\nexport class AssertFalse extends VMUpdatingOpcode {\n  public type = \"assert\";\n\n  private reference: ChainableReference;\n\n  constructor(reference: ChainableReference) {\n    super();\n    this.reference = reference;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    if (this.reference.value()) {\n      vm.throw();\n    }\n  }\n}\n","import { Slice, ListSlice, LinkedList, InternedString, assert, dict } from 'glimmer-util';\nimport { OpSeq, OpSeqBuilder, Opcode } from './opcodes';\nimport { BindArgsOpcode } from './compiled/opcodes/vm';\nimport { ATTRIBUTE_SYNTAX, Program, StatementSyntax, AttributeSyntax } from './syntax';\nimport { Environment } from './environment';\nimport Template from './template';\nimport { OpenElement, OpenPrimitiveElement, CloseElement } from './syntax/core';\nimport SymbolTable from './symbol-table';\n\nexport interface RawTemplateOptions {\n  ops: OpSeq;\n  locals: InternedString[];\n  named: InternedString[];\n  program?: Program;\n}\n\nexport class RawTemplate {\n  public program: Program;\n  public ops: OpSeq = null;\n  public symbolTable: SymbolTable = null;\n  public locals: InternedString[];\n  public named: InternedString[];\n\n  constructor({ ops, locals, named, program }: RawTemplateOptions) {\n    this.ops = ops;\n    this.locals = locals;\n    this.named = named;\n    this.program = program || null;\n  }\n\n  cloneWith(callback: (builder: LinkedList<StatementSyntax>, table: SymbolTable) => void): RawTemplate {\n    let { program, locals, named } = this;\n\n    let newProgram = LinkedList.fromSlice(program);\n\n    let template = new RawTemplate({\n      ops: null,\n      locals: locals && locals.slice(),\n      named: named && named.slice(),\n      program: newProgram\n    });\n\n    template.symbolTable = this.symbolTable.cloneFor(template);\n    callback(newProgram, template.symbolTable);\n\n    return template;\n  }\n\n  compile(env: Environment) {\n    this.compileSyntax(env);\n  }\n\n  private compileSyntax(env: Environment) {\n    this.ops = this.ops || new Compiler(this, env).compile();\n  }\n\n  isTop(): boolean {\n    return this.symbolTable.isTop();\n  }\n\n  hasLocals(): boolean {\n    return !!(this.locals || this.named);\n  }\n}\n\nexport default class Compiler {\n  public env: Environment;\n  private template: RawTemplate;\n  private current: StatementSyntax;\n  private ops: OpSeqBuilder;\n  private symbolTable: SymbolTable;\n\n  constructor(template: RawTemplate, env: Environment) {\n    this.env = env;\n    this.template = template;\n    this.current = template.program.head();\n    this.ops = new LinkedList<Opcode>();\n    this.symbolTable = template.symbolTable;\n  }\n\n  compile(): OpSeqBuilder {\n    let { template, ops, env } = this;\n    let { program } = template;\n\n    if (template.hasLocals()) ops.append(new BindArgsOpcode(this.template));\n\n    while (this.current) {\n      let current = this.current;\n      this.current = program.nextNode(current);\n      env.statement(current).compile(this, env);\n    }\n\n    return ops;\n  }\n\n  append(op: Opcode) {\n    this.ops.append(op);\n  }\n\n  getSymbol(name: InternedString): number {\n    return this.symbolTable.get(name);\n  }\n\n  sliceAttributes(): Slice<AttributeSyntax> {\n    let { template: { program } } = this;\n\n    let begin: AttributeSyntax = null;\n    let end: AttributeSyntax = null;\n\n    while (this.current[ATTRIBUTE_SYNTAX]) {\n      let current = this.current;\n      this.current = program.nextNode(current);\n      begin = begin || <AttributeSyntax>current;\n      end = <AttributeSyntax>current;\n    }\n\n    return new ListSlice(begin, end);\n  }\n\n  templateFromTagContents(): Template {\n    let { template: { program } } = this;\n\n    let begin: StatementSyntax = null;\n    let end: StatementSyntax = null;\n    let nesting = 1;\n\n    while (true) {\n      let current = this.current;\n      this.current = program.nextNode(current);\n\n      if (current instanceof CloseElement && --nesting === 0) {\n        break;\n      }\n\n      begin = begin || current;\n      end = current;\n\n      if (current instanceof OpenElement || current instanceof OpenPrimitiveElement) {\n        nesting++;\n      }\n    }\n\n    let slice = new ListSlice(begin, end);\n    return Template.fromList(ListSlice.toList(slice));\n  }\n}","import { InternedString, Slice } from 'glimmer-util';\n\nimport Template from '../template';\n\nimport {\n  Templates,\n  Args\n} from '../syntax/core';\n\nimport {\n  EvaluatedNamedArgs,\n} from '../compiled/expressions/args';\n\nimport {\n  AttributeSyntax\n} from '../syntax';\n\nimport { RawTemplate } from '../compiler';\n\nexport interface ComponentClass {\n  new (attrs: Object): Component;\n}\n\nexport interface Component {\n  attrs: Object;\n}\n\nexport interface ComponentHooks {\n  begin(Component);\n  commit(Component);\n\n  didReceiveAttrs(Component);\n  didUpdateAttrs(Component);\n\n  didInsertElement(Component);\n\n  willRender(Component);\n  willUpdate(Component);\n  didRender(Component);\n  didUpdate(Component);\n}\n\nexport interface ComponentDefinitionOptions {\n  templates: Templates;\n  attrs: EvaluatedNamedArgs;\n  tag: InternedString;\n}\n\nexport interface ComponentHooks {\n  begin(Component: Component);\n  commit(Component: Component);\n\n  didReceiveAttrs(Component: Component);\n  didUpdateAttrs(Component: Component);\n\n  didInsertElement(Component: Component);\n\n  willRender(Component: Component);\n  willUpdate(Component: Component);\n  didRender(Component: Component);\n  didUpdate(Component: Component);\n}\n\nclass NullHooks implements ComponentHooks {\n  begin() {};\n  commit() {};\n\n  didReceiveAttrs() {};\n  didUpdateAttrs() {};\n\n  didInsertElement() {};\n\n  willRender() {};\n  willUpdate() {};\n  didRender() {};\n  didUpdate() {};\n}\n\nconst NULL_HOOKS = new NullHooks();\n\nexport interface CompileComponentOptions {\n  syntax: Slice<AttributeSyntax>;\n  args: Args;\n  locals: InternedString[];\n  named: InternedString[];\n}\n\nexport abstract class ComponentDefinition {\n  public hooks: ComponentHooks;\n  public ComponentClass: ComponentClass;\n  public layout: RawTemplate;\n  protected ComponentInvocation: ComponentInvocationClass;\n\n  constructor(hooks: ComponentHooks, ComponentClass: ComponentClass, layout: RawTemplate, ComponentInvocation: ComponentInvocationClass) {\n    this.hooks = hooks || NULL_HOOKS;\n    this.ComponentClass = ComponentClass;\n    this.layout = layout;\n    this.ComponentInvocation = ComponentInvocation;\n  }\n\n  abstract compile(options: CompileComponentOptions, yieldTo: Templates): ComponentInvocation;\n}\n\nexport interface ComponentInvocationClass {\n  new(templates: Templates, layout: RawTemplate): ComponentInvocation;\n}\n\nexport interface ComponentInvocation {\n  templates: Templates;\n  layout: RawTemplate;\n}","import { ConcreteBounds, Bounds } from './bounds';\nconst SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nexport default class DOMHelper {\n  private document: HTMLDocument;\n  private namespace: string;\n  private uselessElement: HTMLElement;\n\n  constructor(document) {\n    this.document = document;\n    this.namespace = null;\n    this.uselessElement = this.document.createElement('div');\n  }\n\n  setAttribute(element: Element, name: string, value: string) {\n    element.setAttribute(name, value);\n  }\n\n  setAttributeNS(element: Element, name: string, value: string, namespace: string) {\n    element.setAttributeNS(name, namespace, value);\n  }\n\n  removeAttribute(element: Element, name: string) {\n    element.removeAttribute(name);\n  }\n\n  createTextNode(text: string): Text {\n    return this.document.createTextNode(text);\n  }\n\n  createComment(data: string): Comment {\n    return this.document.createComment(data);\n  }\n\n  createElement(tag: string, context: Element): Element {\n    if (context.namespaceURI === SVG_NAMESPACE || tag === 'svg') {\n      // Note: This does not properly handle <font> with color, face, or size attributes, which is also\n      // disallowed by the spec. We should fix this.\n      if (BLACKLIST_TABLE[tag]) {\n        throw new Error(`Cannot create a ${tag} inside of a <${context.tagName}>, because it's inside an SVG context`);\n      }\n\n      return this.document.createElementNS(SVG_NAMESPACE, tag);\n    } else {\n      return this.document.createElement(tag);\n    }\n  }\n\n  insertHTMLBefore(parent: HTMLElement, nextSibling: Node, html: string): Bounds {\n    // REFACTOR TODO: table stuff in IE9; maybe just catch exceptions?\n\n    let prev = nextSibling && nextSibling.previousSibling;\n    let last;\n\n    if (html === null || html === '') {\n      return new ConcreteBounds(parent, null, null);\n    } if (nextSibling === null) {\n      parent.insertAdjacentHTML('beforeEnd', html);\n      last = parent.lastChild;\n    } else if (nextSibling instanceof HTMLElement) {\n      (<HTMLElement>nextSibling).insertAdjacentHTML('beforeBegin', html);\n      last = nextSibling.previousSibling;\n    } else {\n      parent.insertBefore(this.uselessElement, nextSibling);\n      this.uselessElement.insertAdjacentHTML('beforeBegin', html);\n      last = this.uselessElement.previousSibling;\n      parent.removeChild(this.uselessElement);\n    }\n\n    let first = prev ? prev.nextSibling : parent.firstChild;\n    return new ConcreteBounds(parent, first, last);\n  }\n\n  insertBefore(element: Element, node: Node, reference: Node) {\n    element.insertBefore(node, reference);\n  }\n}\n\n/* tslint:disable:no-unused-variable */\n\n// http://www.w3.org/TR/html/syntax.html#html-integration-point\nconst SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n\n/* tslint:enable:no-unused-variable */\n\n// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n// TODO: Adjust SVG attributes\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n// TODO: Adjust SVG elements\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\nexport const BLACKLIST_TABLE = Object.create(null);\n\n([\n  \"b\", \"big\", \"blockquote\", \"body\", \"br\", \"center\", \"code\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"embed\",\n  \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"hr\", \"i\", \"img\", \"li\", \"listing\", \"main\", \"meta\", \"nobr\",\n  \"ol\", \"p\", \"pre\", \"ruby\", \"s\", \"small\", \"span\", \"strong\", \"strike\", \"sub\", \"sup\", \"table\", \"tt\", \"u\",\n  \"ul\", \"var\"\n]).forEach(tag => BLACKLIST_TABLE[tag] = 1);\n\nconst WHITESPACE = /[\\t-\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/;\n\nexport function isWhitespace(string: string) {\n  return WHITESPACE.test(string);\n}","import {\n  YieldSyntax,\n  Helper as HelperSyntax,\n  Unknown,\n  Append,\n} from \"./syntax/core\";\n\nimport { StatementSyntax } from './syntax';\n\nimport { NULL_REFERENCE } from './references';\n\nimport {\n  Component,\n  ComponentHooks,\n  ComponentDefinition\n} from './component/interfaces';\n\nimport {\n  PathReference,\n  ConstReference,\n  MetaLookup\n} from 'glimmer-reference';\n\nimport {\n  HasGuid,\n  InternedString,\n  intern,\n  installGuid\n} from 'glimmer-util';\n\nimport { Dict } from 'glimmer-util';\n\nexport class Scope {\n  static root(parent: Scope, size = 0) {\n    let refs: PathReference[] = new Array(size + 1);\n\n    for (let i = 0; i <= size; i++) {\n      refs[i] = NULL_REFERENCE;\n    }\n\n    return new Scope(parent, refs);\n  }\n\n  private parent: Scope;\n\n  // the 0th slot is `self`\n  private references: PathReference[];\n\n  constructor(parent: Scope, references: PathReference[]) {\n    this.references = references;\n    this.parent = parent;\n  }\n\n  init({ self }: { self: PathReference }): this {\n    this.references[0] = self;\n    return this;\n  }\n\n  getSelf(): PathReference {\n    return this.references[0];\n  }\n\n  getSymbol(symbol: number): PathReference {\n    return this.references[symbol];\n  }\n\n  bindSymbol(symbol: number, value: PathReference) {\n    this.references[symbol] = value;\n  }\n\n  child() {\n    return new Scope(this, this.references.slice());\n  }\n}\n\nimport DOMHelper from './dom';\n\nexport abstract class Environment {\n  protected dom: DOMHelper;\n  protected meta: MetaLookup;\n  private createdComponents: Component[] = [];\n  private createdHooks: ComponentHooks[] = [];\n  private updatedComponents: Component[] = [];\n  private updatedHooks: ComponentHooks[] = [];\n\n  constructor(dom: DOMHelper, meta: MetaLookup) {\n    this.dom = dom;\n    this.meta = meta;\n  }\n\n  getDOM(): DOMHelper { return this.dom; }\n\n  getIdentity(object: HasGuid): InternedString {\n    return intern(installGuid(object) + '');\n  }\n\n  createRootScope(size: number): Scope {\n    return Scope.root(null, size);\n  }\n\n  statement(statement: StatementSyntax): StatementSyntax {\n    let type = statement.type;\n\n    if (type === 'append') {\n      let append = <Append>statement;\n      let unknown = append.value.type === 'unknown' ? <Unknown>append.value : null;\n      let helper = append.value.type === 'helper' ? <HelperSyntax>append.value : null;\n\n      if (unknown && unknown.simplePath() === 'yield') {\n        return new YieldSyntax({ args: null });\n      } else if (helper && helper.ref.simplePath() === 'yield') {\n        return new YieldSyntax({ args: helper.args });\n      }\n    }\n\n    return statement;\n  }\n\n  begin() {\n    this.createdComponents = [];\n    this.createdHooks = [];\n    this.updatedComponents = [];\n    this.updatedHooks = [];\n  }\n\n  didCreate(component: Component, hooks: ComponentHooks) {\n    this.createdComponents.push(component);\n    this.createdHooks.push(hooks);\n  }\n\n  didUpdate(component: Component, hooks: ComponentHooks) {\n    this.updatedComponents.push(component);\n    this.updatedHooks.push(hooks);\n  }\n\n  commit() {\n    this.createdComponents.forEach((component, i) => {\n      let hooks = this.createdHooks[i];\n      hooks.didInsertElement(component);\n      hooks.didRender(component);\n    });\n\n    this.updatedComponents.forEach((component, i) => {\n      let hooks = this.updatedHooks[i];\n      hooks.didUpdate(component);\n      hooks.didRender(component);\n    });\n  }\n\n  iteratorFor(iterable: PathReference) {\n    let position = 0;\n    let len = iterable.value().length;\n\n    return {\n      next() {\n        if (position >= len) return { done: true, value: undefined };\n\n        position++;\n\n        return {\n          done: false,\n          value: iterable.get(intern(\"\" + (position - 1)))\n        };\n      }\n    };\n  }\n\n  abstract hasHelper(helperName: InternedString[]): boolean;\n  abstract lookupHelper(helperName: InternedString[]): Helper;\n  abstract getComponentDefinition(tagName: InternedString[], syntax: StatementSyntax): ComponentDefinition;\n}\n\nexport default Environment;\n\n// TS does not allow us to use computed properties for this, so inlining for now\n// import { TRUSTED_STRING } from './symbols';\n\ninterface SafeString {\n  \"trusted string [id=7d10c13d-cdf5-45f4-8859-b09ce16517c2]\": boolean; // true\n  string: string;\n}\n\nexport type Insertion = string | SafeString | Node;\n\ntype PositionalArguments = any[];\ntype KeywordArguments = Dict<any>;\n\nexport interface Helper {\n  (positional: PositionalArguments, named: KeywordArguments, options: Object): Insertion;\n}\n\nexport function helper(h: Helper): ConstReference<Helper> {\n  return new ConstReference(h);\n}","import { LinkedList, LinkedListNode, Slice, Dict } from 'glimmer-util';\nimport { VM, UpdatingVM } from './vm';\n\nexport interface UpdatingOpcode extends LinkedListNode {\n  type: string;\n  next: Opcode;\n  prev: Opcode;\n\n  evaluate(vm: UpdatingVM);\n}\n\nexport type UpdatingOpSeq = Slice<UpdatingOpcode>;\n\nexport abstract class Opcode implements LinkedListNode {\n  type: string;\n  next: Opcode = null;\n  prev: Opcode = null;\n\n  abstract evaluate(vm: VM);\n}\n\nexport abstract class UnflattenedOpcode extends Opcode {\n  abstract flatten(list: Opcode[], labels: Dict<number>);\n\n  evaluate() {\n    throw new Error(\"Unreachable\");\n  }\n}\n\nexport type OpSeq = Slice<Opcode>;\nexport type OpSeqBuilder = LinkedList<Opcode>;\n","import { ConstReference, PathReference } from 'glimmer-reference';\n\nexport class PrimitiveReference extends ConstReference<any> implements PathReference {\n  get(): PathReference {\n    return NULL_REFERENCE;\n  }\n}\n\nexport const NULL_REFERENCE = new PrimitiveReference(null);","import { Program, StatementSyntax } from './syntax';\nimport StatementNodes from './syntax/statements';\nimport Template from './template';\nimport { Block } from './syntax/core';\nimport SymbolTable from './symbol-table';\nimport { EMPTY_SLICE, LinkedList } from 'glimmer-util';\n\nexport default class Scanner {\n  private specs: any[];\n\n  constructor(specs: any[]) {\n    this.specs = specs;\n  }\n\n  scan() {\n    let { specs } = this;\n\n    let templates = new Array<Template>(specs.length);\n\n    for (let i = 0; i < specs.length; i++) {\n      let spec = specs[i];\n\n      let { program, children } = buildStatements(spec.statements, templates);\n\n      templates[i] = new Template({\n        program,\n        children,\n        root: templates,\n        position: i,\n        meta: spec.meta,\n        locals: spec.locals,\n        named: spec.named,\n        isEmpty: spec.statements.length === 0,\n        spec: spec\n      });\n    }\n\n    let top = templates[templates.length - 1];\n    let table = top.raw.symbolTable =\n      new SymbolTable(null, top.raw).initNamed(top.raw.named);\n\n    top.children.forEach(t => initTemplate(t, table));\n\n    return top;\n  }\n}\n\nfunction initTemplate(template: Template, parent: SymbolTable) {\n  let { locals } = template.raw;\n  let table = parent;\n\n  table = new SymbolTable(parent, template.raw).initPositional(locals);\n\n  template.raw.symbolTable = table;\n  template.children.forEach(t => initTemplate(t, table));\n}\n\nexport function buildStatements(statements: any[], templates: Template[]): { program: Program, children: Template[] } {\n  if (statements.length === 0) { return { program: EMPTY_SLICE, children: [] }; }\n\n  let program = new LinkedList<StatementSyntax>();\n  let children: Template[] = [];\n\n  statements.forEach(s => {\n    let Statement: typeof StatementSyntax = StatementNodes(s[0]);\n    let statement = Statement.fromSpec(s, templates);\n\n    if (statement instanceof Block) {\n      if (statement.templates.default) children.push(statement.templates.default);\n      if (statement.templates.inverse) children.push(statement.templates.inverse);\n    }\n\n    program.append(statement);\n  });\n\n  return { program, children };\n}",null,"import { InternedString, dict, assign } from 'glimmer-util';\nimport { RawTemplate } from './compiler';\n\nexport default class SymbolTable {\n  private parent: SymbolTable;\n  private top: SymbolTable;\n  private template: RawTemplate;\n  private locals = dict<number>();\n  public size = 1;\n\n  constructor(parent: SymbolTable, template: RawTemplate) {\n    this.parent = parent;\n    this.top = parent ? parent.top : this;\n    this.template = template;\n  }\n\n  cloneFor(template: RawTemplate): SymbolTable {\n    let table = new SymbolTable(this.parent, template);\n    table.locals = assign({}, this.locals);\n    table.size = this.size;\n    return table;\n  }\n\n  initPositional(positional: InternedString[]): this {\n    if (positional) positional.forEach(s => this.putPositional(s));\n    return this;\n  }\n\n  initNamed(named: InternedString[]): this {\n    if (named) named.forEach(s => this.locals[<string>s] = this.size++);\n\n    return this;\n  }\n\n  putNamed(names: InternedString[]) {\n    let top = this.top;\n    names.forEach(s => top.putSingleNamed(s));\n  }\n\n  get(name: InternedString): number {\n    let { locals, parent } = this;\n\n    let symbol = locals[<string>name];\n\n    if (!symbol && parent) {\n      symbol = parent.get(name);\n    }\n\n    return symbol;\n  }\n\n  isTop(): boolean {\n    return this.top === this;\n  }\n\n  private putSingleNamed(name: InternedString) {\n    if (!this.locals[<string>name]) {\n      this.locals[<string>name] = this.size++;\n      this.template.named = this.template.named || [];\n      this.template.named.push(name);\n    }\n  }\n\n  private putPositional(name: InternedString): number {\n    let position = this.locals[<string>name];\n\n    if (!position) {\n      position = this.locals[<string>name] = this.top.size++;\n    }\n\n    return position;\n  }\n}\n","export const TRUSTED_STRING = \"trusted string [id=7d10c13d-cdf5-45f4-8859-b09ce16517c2]\";","import { VM } from '../vm';\nimport Compiler from '../compiler';\n\nimport Template from '../template';\n\nimport Syntax, {\n  AttributeSyntax,\n  ExpressionSyntax,\n  StatementSyntax,\n  PrettyPrintValue,\n  PrettyPrint\n} from '../syntax';\n\nimport {\n  Opcode\n} from '../opcodes';\n\nimport {\n  PutValue\n} from '../compiled/opcodes/vm';\n\nimport {\n  OpenComponentOpcode\n} from '../compiled/opcodes/component';\n\nimport {\n  CompileComponentOptions\n} from '../component/interfaces';\n\nimport {\n  CompiledArgs,\n  CompiledNamedArgs,\n  CompiledPositionalArgs,\n  EvaluatedArgs\n} from '../compiled/expressions/args';\n\nimport CompiledValue from '../compiled/expressions/value';\n\nimport {\n  CompiledLocalRef,\n  CompiledSelfRef\n} from '../compiled/expressions/ref';\n\nimport CompiledHelper from '../compiled/expressions/helper';\n\nimport CompiledConcat from '../compiled/expressions/concat';\n\nimport {\n  CompiledExpression\n} from '../compiled/expressions';\n\nimport {\n  PushPullReference,\n  PathReference\n} from 'glimmer-reference';\n\nimport { Environment, Insertion, Helper as EnvHelper } from '../environment';\n\nimport {\n  LinkedList,\n  InternedString,\n  Slice,\n  Dict,\n  dict,\n  intern,\n} from 'glimmer-util';\n\nimport {\n  TextOpcode,\n  OpenPrimitiveElementOpcode,\n  CloseElementOpcode,\n  StaticAttrOpcode,\n  DynamicAttrOpcode,\n  DynamicPropOpcode,\n  AddClassOpcode,\n  CommentOpcode\n} from '../compiled/opcodes/dom';\n\nimport {\n  AppendOpcode,\n  TrustingAppendOpcode\n} from '../compiled/opcodes/content';\n\ninterface Bounds {\n  parentNode(): Node;\n  firstNode(): Node;\n  lastNode(): Node;\n}\n\ninterface Reference {}\n\ntype Spec = any[];\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\ntype PathSexp = InternedString[];\ntype ExpressionSexp = any[];\ntype PositionalArgsSexp = ExpressionSexp[];\ntype NamedArgsSexp = any[];\n\ntype BlockSexp = [InternedString, PathSexp, PositionalArgsSexp, NamedArgsSexp, number, number];\n\nexport interface BlockOptions {\n\n}\n\nexport class Block extends StatementSyntax {\n  public type = \"block\";\n\n  static fromSpec(sexp: BlockSexp, children: Template[]): Block {\n    let [, path, params, hash, templateId, inverseId] = sexp;\n\n    return new Block({\n      path,\n      args: Args.fromSpec(params, hash),\n      templates: Templates.fromSpec(null, [templateId, inverseId, children])\n    });\n  }\n\n  static build(options): Block {\n    return new this(options);\n  }\n\n  path: InternedString[];\n  args: Args;\n  templates: Templates;\n\n  constructor(options: { path: InternedString[], args: Args, templates: Templates }) {\n    super();\n    this.path = options.path;\n    this.args = options.args;\n    this.templates = options.templates;\n  }\n\n  compile(ops: Compiler) {\n    throw new Error(\"SyntaxError\");\n  }\n\n  prettyPrint() {\n    return null;\n\n    // let [params, hash] = this.args.prettyPrint();\n    // let block = new PrettyPrint('expr', this.path.join('.'), params, hash);\n    // return new PrettyPrint('block', 'block', [block], null, this.templates.prettyPrint());\n  }\n}\n\ntype UnknownSexp = [string, PathSexp, boolean];\n\nexport class Unknown extends ExpressionSyntax {\n  public type = \"unknown\";\n\n  static fromSpec(sexp: UnknownSexp): Unknown {\n    let [, path, unsafe] = sexp;\n\n    return new Unknown({ ref: new Ref({ parts: path }), unsafe });\n  }\n\n  static build(path: string, unsafe: boolean): Unknown {\n    return new this({ ref: Ref.build(path), unsafe });\n  }\n\n  ref: Ref;\n  trustingMorph: boolean;\n\n  constructor(options) {\n    super();\n    this.ref = options.ref;\n    this.trustingMorph = !!options.unsafe;\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    let { ref } = this;\n\n    if (compiler.env.hasHelper(ref.parts)) {\n      return new CompiledHelper({ helper: compiler.env.lookupHelper(ref.parts), args: CompiledArgs.empty() });\n    } else {\n      return this.ref.compile(compiler);\n    }\n  }\n\n  simplePath(): InternedString {\n    return this.ref.simplePath();\n  }\n}\n\ntype AppendSexp = [InternedString, ExpressionSexp, boolean];\n\nexport class Append extends StatementSyntax {\n  public type = \"append\";\n\n  static fromSpec(sexp: AppendSexp) {\n    let [, value, trustingMorph] = sexp;\n\n    return new Append({ value: buildExpression(value), trustingMorph });\n  }\n\n  static build(value: ExpressionSyntax, trustingMorph: boolean) {\n    return new this({ value, trustingMorph });\n  }\n\n  value: ExpressionSyntax;\n  trustingMorph: boolean;\n\n  constructor({ value, trustingMorph }: { value: ExpressionSyntax, trustingMorph: boolean }) {\n    super();\n    this.value = value;\n    this.trustingMorph = trustingMorph;\n  }\n\n  prettyPrint(): PrettyPrint {\n    let operation = this.trustingMorph ? 'html' : 'text';\n    return new PrettyPrint('append', operation, [this.value.prettyPrint()]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new PutValue(this.value.compile(compiler)));\n\n    if (this.trustingMorph) {\n      compiler.append(new TrustingAppendOpcode());\n    } else {\n      compiler.append(new AppendOpcode());\n    }\n  }\n}\n\nclass HelperInvocationReference extends PushPullReference implements PathReference {\n  private helper: EnvHelper;\n  private args: EvaluatedArgs;\n\n  constructor(helper: EnvHelper, args: EvaluatedArgs) {\n    super();\n    this.helper = helper;\n    this.args = args;\n  }\n\n  get(): PathReference {\n    throw new Error(\"Unimplemented: Yielding the result of a helper call.\");\n  }\n\n  value(): Insertion {\n    let { args: { positional, named } }  = this;\n    return this.helper.call(undefined, positional.value(), named.value(), null);\n  }\n}\n\n/*\nexport class Modifier implements StatementSyntax {\n  static fromSpec(node) {\n    let [, path, params, hash] = node;\n\n    return new Modifier({\n      path,\n      params: Params.fromSpec(params),\n      hash: Hash.fromSpec(hash)\n    });\n  }\n\n  static build(path, options) {\n    return new Modifier({\n      path,\n      params: options.params,\n      hash: options.hash\n    });\n  }\n\n  constructor(options) {\n    this.path = options.path;\n    this.params = options.params;\n    this.hash = options.hash;\n  }\n\n  evaluate(stack) {\n    return stack.createMorph(Modifier);\n  }\n}\n*/\n\ntype DynamicPropSexp = [InternedString, InternedString, ExpressionSexp, InternedString];\n\nexport class DynamicProp extends AttributeSyntax {\n  \"e1185d30-7cac-4b12-b26a-35327d905d92\" = true;\n  type = \"dynamic-prop\";\n\n  static fromSpec(sexp: DynamicPropSexp): DynamicProp {\n    let [, name, value] = sexp;\n\n    return new DynamicProp({\n      name,\n      value: buildExpression(value)\n    });\n  }\n\n  static build(name: string, value: any): DynamicProp {\n    return new this({ name: intern(name), value });\n  }\n\n  public name: InternedString;\n  public value: ExpressionSyntax;\n\n  constructor(options: { name: InternedString, value: ExpressionSyntax }) {\n    super();\n    this.name = options.name;\n    this.value = options.value;\n  }\n\n  prettyPrint() {\n    let { name, value } = this;\n\n    return new PrettyPrint('attr', 'prop', [name, value.prettyPrint()]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new PutValue(this.value.compile(compiler)));\n    compiler.append(new DynamicPropOpcode(this));\n  }\n\n  valueSyntax(): ExpressionSyntax {\n    return this.value;\n  }\n\n  toLookup(): { syntax: DynamicProp, symbol: InternedString } {\n    let symbol = intern(`@${this.name}`);\n    let lookup = GetNamedParameter.build(symbol);\n\n    return { syntax: DynamicProp.build(this.name, lookup), symbol };\n  }\n}\n\ntype StaticAttrSexp = [InternedString, InternedString, InternedString, InternedString];\n\nexport class StaticAttr extends AttributeSyntax {\n  \"e1185d30-7cac-4b12-b26a-35327d905d92\" = true;\n  type = \"static-attr\";\n\n  static fromSpec(node: StaticAttrSexp): StaticAttr {\n    let [, name, value, namespace] = node;\n\n    return new StaticAttr({ name, value, namespace });\n  }\n\n  static build(name: string, value: string, namespace: string=null): StaticAttr {\n    return new this({ name: intern(name), value: intern(value), namespace: namespace && intern(namespace) });\n  }\n\n  name: InternedString;\n  value: InternedString;\n  namespace: InternedString;\n\n  constructor(options) {\n    super();\n    this.name = options.name;\n    this.value = options.value;\n    this.namespace = options.namespace;\n  }\n\n  prettyPrint() {\n    let { name, value, namespace } = this;\n\n    if (namespace) {\n      return new PrettyPrint('attr', 'attr', [name, value], { namespace });\n    } else {\n      return new PrettyPrint('attr', 'attr', [name, value]);\n    }\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new StaticAttrOpcode(this));\n  }\n\n  valueSyntax(): ExpressionSyntax {\n    return Value.build(this.value);\n  }\n\n  toLookup(): { syntax: DynamicAttr, symbol: InternedString } {\n    let symbol = intern(`@${this.name}`);\n    let lookup = GetNamedParameter.build(symbol);\n\n    return { syntax: DynamicAttr.build(this.name, lookup, this.namespace), symbol };\n  }\n}\n\ntype DynamicAttrSexp = [InternedString, InternedString, ExpressionSexp, InternedString];\n\nexport class DynamicAttr extends AttributeSyntax {\n  \"e1185d30-7cac-4b12-b26a-35327d905d92\" = true;\n  type = \"dynamic-attr\";\n\n  static fromSpec(sexp: DynamicAttrSexp): DynamicAttr {\n    let [, name, value, namespace] = sexp;\n\n    return new DynamicAttr({\n      name,\n      namespace,\n      value: buildExpression(value)\n    });\n  }\n\n  static build(_name: string, value: ExpressionSyntax, _namespace: string=null): DynamicAttr {\n    let name = intern(_name);\n    let namespace = _namespace ? intern(_namespace) : null;\n    return new this({ name, value, namespace });\n  }\n\n  name: InternedString;\n  value: ExpressionSyntax;\n  namespace: InternedString;\n\n  constructor(options: { name: InternedString, value: ExpressionSyntax, namespace: InternedString }) {\n    super();\n    this.name = options.name;\n    this.value = options.value;\n    this.namespace = options.namespace;\n  }\n\n  prettyPrint() {\n    let { name, value, namespace } = this;\n\n    if (namespace) {\n      return new PrettyPrint('attr', 'attr', [name, value.prettyPrint()], { namespace });\n    } else {\n      return new PrettyPrint('attr', 'attr', [name, value.prettyPrint()]);\n    }\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new PutValue(this.value.compile(compiler)));\n    compiler.append(new DynamicAttrOpcode(this));\n  }\n\n  valueSyntax(): ExpressionSyntax {\n    return this.value;\n  }\n\n  toLookup(): { syntax: DynamicAttr, symbol: InternedString } {\n    let symbol = intern(`@${this.name}`);\n    let lookup = GetNamedParameter.build(symbol);\n\n    return { syntax: DynamicAttr.build(this.name, lookup, this.namespace), symbol };\n  }\n}\n\ntype AddClassSexpr = [InternedString, ExpressionSexp];\n\nexport class AddClass extends AttributeSyntax {\n  \"e1185d30-7cac-4b12-b26a-35327d905d92\" = true;\n  type = \"add-class\";\n\n  static fromSpec(node: AddClassSexpr): AddClass {\n    let [, value] = node;\n\n    return new AddClass({ value: buildExpression(value) });\n  }\n\n  static build(value: ExpressionSyntax): AddClass {\n    return new this({ value });\n  }\n\n  public name = <InternedString>\"class\";\n  public value: ExpressionSyntax;\n\n  constructor({ value }: { value: ExpressionSyntax }) {\n    super();\n    this.value = value;\n  }\n\n  prettyPrint(): PrettyPrint {\n    return new PrettyPrint('attr', 'attr', ['class', this.value.prettyPrint()]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new PutValue(this.value.compile(compiler)));\n    compiler.append(new AddClassOpcode());\n  }\n\n  valueSyntax(): ExpressionSyntax {\n    return this.value;\n  }\n\n  toLookup(): { syntax: AddClass, symbol: InternedString } {\n    let symbol = intern(`@${this.name}`);\n    let lookup = GetNamedParameter.build(name);\n\n    return { syntax: AddClass.build(lookup), symbol };\n  }\n}\n\nexport class CloseElement extends StatementSyntax {\n  type = \"close-element\";\n\n  static fromSpec() {\n    return new CloseElement();\n  }\n\n  static build() {\n    return new this();\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('element', 'close-element');\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new CloseElementOpcode());\n  }\n}\n\ntype TextSexp = [InternedString, InternedString];\n\nexport class Text extends StatementSyntax {\n  type = \"text\";\n\n  static fromSpec(node: TextSexp): Text {\n    let [, content] = node;\n\n    return new Text({ content });\n  }\n\n  static build(content): Text {\n    return new this({ content });\n  }\n\n  public content: InternedString;\n\n  constructor(options: { content: InternedString }) {\n    super();\n    this.content = options.content;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('append', 'text', [this.content]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new TextOpcode(this.content));\n  }\n}\n\ntype CommentSexp = [InternedString, InternedString];\n\nexport class Comment extends StatementSyntax {\n  type = \"comment\";\n\n  static fromSpec(sexp: CommentSexp): Comment {\n    let [, value] = sexp;\n\n    return new Comment({ value });\n  }\n\n  static build(value: string): Comment {\n    return new this({ value: intern(value) });\n  }\n\n  public value: InternedString;\n\n  constructor(options) {\n    super();\n    this.value = options.value;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('append', 'append-comment', [this.value]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new CommentOpcode(this));\n  }\n}\n\ntype OpenElementSexp = [InternedString, InternedString, InternedString[]];\n\nexport class OpenElement extends StatementSyntax {\n  type = \"open-element\";\n\n  static fromSpec(sexp: OpenElementSexp): OpenElement {\n    let [, tag, blockParams] = sexp;\n\n    return new OpenElement({ tag, blockParams });\n  }\n\n  static build(tag: string, blockParams: string[]): OpenElement {\n    return new this({ tag: intern(tag), blockParams: blockParams && blockParams.map(intern) });\n  }\n\n  public tag: InternedString;\n  public blockParams: InternedString[];\n\n  constructor(options: { tag: InternedString, blockParams: InternedString[] }) {\n    super();\n    this.tag = options.tag;\n    this.blockParams = options.blockParams;\n  }\n\n  prettyPrint() {\n    let params = new PrettyPrint('block-params', 'as', this.blockParams);\n    return new PrettyPrint('element', 'open-element', [this.tag, params]);\n  }\n\n  compile(compiler: Compiler, env: Environment) {\n    let component = env.getComponentDefinition([this.tag], this);\n\n    if (component) {\n      let attrs = compiler.sliceAttributes();\n      let namedArgs = Args.fromHash(attributesToNamedArgs(attrs));\n      let lookup = attributeInvocationToLookup(attrs, namedArgs);\n      let template = compiler.templateFromTagContents();\n      let templates = new Templates({ template, inverse: null });\n      compiler.append(new OpenComponentOpcode(component.compile(lookup, templates), namedArgs.compile(compiler)));\n    } else {\n      compiler.append(new OpenPrimitiveElementOpcode(this.tag));\n    }\n  }\n\n  toIdentity(): OpenPrimitiveElement {\n    let { tag } = this;\n    return new OpenPrimitiveElement({ tag });\n  }\n}\n\nfunction attributesToNamedArgs(attrs: Slice<AttributeSyntax>): NamedArgs {\n  let map = dict<ExpressionSyntax>();\n\n  attrs.forEachNode(a => {\n    map[`@${a.name}`] = a.valueSyntax();\n  });\n\n  return NamedArgs.build(map);\n}\n\nfunction attributeInvocationToLookup(attrs: Slice<AttributeSyntax>, namedArgs: Args): CompileComponentOptions {\n  let builder = new LinkedList<AttributeSyntax>();\n  let symbols = dict<boolean>();\n\n  attrs.forEachNode(a => {\n    let { syntax, symbol } = a.toLookup();\n    builder.append(syntax);\n    symbols[<string>symbol] = true;\n  });\n\n  return {\n    args: namedArgs,\n    syntax: builder,\n    locals: null,\n    named: <InternedString[]>Object.keys(symbols)\n  };\n}\n\nexport class OpenPrimitiveElement extends StatementSyntax {\n  type = \"open-primitive-element\";\n\n  public tag: InternedString;\n\n  static build(tag: string): OpenPrimitiveElement {\n    return new this({ tag: intern(tag) });\n  }\n\n  constructor(options: { tag: InternedString }) {\n    super();\n    this.tag = options.tag;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('element', 'open-element', [this.tag]);\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new OpenPrimitiveElementOpcode(this.tag));\n  }\n}\n\nexport class YieldSyntax extends StatementSyntax {\n  type = \"yield\";\n  isStatic = false;\n  public args: Args;\n\n  constructor({ args }: { args: Args }) {\n    super();\n    this.args = args;\n  }\n\n  compile(compiler: Compiler) {\n    compiler.append(new InvokeBlockOpcode());\n  }\n}\n\nclass InvokeBlockOpcode extends Opcode {\n  type = \"invoke-block\";\n\n  evaluate(vm: VM) {\n    vm.invokeTemplate(<InternedString>'default');\n  }\n}\n\nexport class Value extends ExpressionSyntax {\n  type = \"value\";\n\n  static fromSpec(value): Value {\n    return new Value(value);\n  }\n\n  static build(value) {\n    return new this(value);\n  }\n\n  public value: boolean | string | number;\n\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n\n  prettyPrint() {\n    return String(this.value);\n  }\n\n  inner() {\n    return this.value;\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    return new CompiledValue(this);\n  }\n}\n\ntype Path = InternedString[];\ntype GetSexp = [InternedString, Path];\n\nexport class Get extends ExpressionSyntax {\n  type = \"get\";\n\n  static fromSpec(sexp: GetSexp): Get {\n    let [, parts] = sexp;\n\n    return new Get({ ref: new Ref({ parts }) });\n  }\n\n  static build(path: string): Get {\n    return new this({ ref: Ref.build(path) });\n  }\n\n  public ref: Ref;\n\n  constructor(options) {\n    super();\n    this.ref = options.ref;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('expr', 'get', [this.ref.prettyPrint()], null);\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    return this.ref.compile(compiler);\n  }\n}\n\ntype GetNamedParameterSexp = [InternedString, Path];\n\nexport class GetNamedParameter extends ExpressionSyntax {\n  type = \"get\";\n\n  static fromSpec(sexp: GetNamedParameterSexp): GetNamedParameter {\n    let [, parts] = sexp;\n\n    return new GetNamedParameter({ parts });\n  }\n\n  static build(path: string): GetNamedParameter {\n    return new this({ parts: path.split('.').map(intern) });\n  }\n\n  public parts: InternedString[];\n\n  constructor(options: { parts: InternedString[] }) {\n    super();\n    this.parts = options.parts;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('expr', 'get-named', [this.parts.join('.')], null);\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    let { parts } = this;\n    let front = parts[0];\n    let symbol = compiler.getSymbol(front);\n\n    let lookup = parts.slice(1);\n    return new CompiledLocalRef({ symbol, lookup });\n  }\n}\n\n// intern paths because they will be used as keys\nfunction internPath(path: string): InternedString[] {\n  return path.split('.').map(intern);\n}\n\n// this is separated out from Get because Unknown also has a ref, but it\n// may turn out to be a helper\nclass Ref extends ExpressionSyntax {\n  type = \"ref\";\n\n  static build(path: string): Ref {\n    return new this({ parts: internPath(path) });\n  }\n\n  public parts: InternedString[];\n\n  constructor({ parts }: { parts: InternedString[] }) {\n    super();\n    this.parts = parts;\n  }\n\n  prettyPrint() {\n    return this.parts.join('.');\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    let { parts } = this;\n    let front = parts[0];\n    let symbol = compiler.getSymbol(front);\n\n    if (symbol) {\n      let lookup = parts.slice(1);\n      return new CompiledLocalRef({ symbol, lookup });\n    } else {\n      return new CompiledSelfRef({ parts });\n    }\n  }\n\n  path(): InternedString[] {\n    return this.parts;\n  }\n\n  simplePath(): InternedString {\n    if (this.parts.length === 1) {\n      return this.parts[0];\n    }\n  }\n}\n\ntype HelperSexp = [string, PathSexp, PositionalArgsSexp, NamedArgsSexp];\n\nexport class Helper extends ExpressionSyntax {\n  type = \"helper\";\n\n  static fromSpec(sexp: HelperSexp): Helper {\n    let [, path, params, hash] = sexp;\n\n    return new Helper({\n      ref: new Ref({ parts: path }),\n      args: Args.fromSpec(params, hash)\n    });\n  }\n\n  static build(path: string, positional: PositionalArgs, named: NamedArgs): Helper {\n    return new this({ ref: Ref.build(path), args: new Args({ positional, named }) });\n  }\n\n  isStatic = false;\n  ref: Ref;\n  args: Args;\n\n  constructor(options: { ref: Ref, args: Args }) {\n    super();\n    this.ref = options.ref;\n    this.args = options.args;\n  }\n\n  prettyPrint() {\n    let [params, hash] = this.args.prettyPrint();\n    return new PrettyPrint('expr', this.ref.prettyPrint(), params, hash);\n  }\n\n  compile(compiler: Compiler): CompiledExpression {\n    if (compiler.env.hasHelper(this.ref.parts)) {\n      let { args, ref } = this;\n      return new CompiledHelper({ helper: compiler.env.lookupHelper(ref.parts), args: args.compile(compiler) });\n    } else {\n      throw new Error(`Compile Error: ${this.ref.prettyPrint()} is not a helper`);\n    }\n  }\n\n  simplePath(): InternedString {\n    return this.ref.simplePath();\n  }\n}\n\ntype ConcatSexp = [string, PositionalArgsSexp];\n\nexport class Concat extends Syntax<Concat> {\n  type = \"concat\";\n\n  static fromSpec(sexp: ConcatSexp): Concat {\n    let [, params] = sexp;\n\n    return new Concat({ parts: params.map(buildExpression) });\n  }\n\n  static build(parts): Concat {\n    return new this({ parts });\n  }\n\n  isStatic = false;\n  parts: ExpressionSyntax[];\n\n  constructor({ parts }: { parts: ExpressionSyntax[] }) {\n    super();\n    this.parts = parts;\n  }\n\n  prettyPrint() {\n    return new PrettyPrint('expr', 'concat', this.parts.map(p => p.prettyPrint()));\n  }\n\n  compile(compiler: Compiler): CompiledConcat {\n    return new CompiledConcat({ parts: this.parts.map(p => p.compile(compiler)) });\n  }\n}\n\nconst ExpressionNodes = {\n  get: Get,\n  attr: GetNamedParameter,\n  unknown: Unknown,\n  helper: Helper,\n  concat: Concat\n};\n\nfunction buildExpression(spec: Spec): ExpressionSyntax {\n  if (typeof spec !== 'object' || spec === null) {\n    return Value.fromSpec(spec);\n  } else {\n    return ExpressionNodes[spec[0]].fromSpec(spec);\n  }\n}\n\nexport class Args extends Syntax<Args> {\n  public type = \"args\";\n\n  static fromSpec(positional: PositionalArgsSexp, named: NamedArgsSexp): Args {\n    return new Args({ positional: PositionalArgs.fromSpec(positional), named: NamedArgs.fromSpec(named) });\n  }\n\n  static _empty: Args;\n\n  static empty(): Args {\n    return (this._empty = this._empty || new Args({ positional: PositionalArgs.empty(), named: NamedArgs.empty() }));\n  }\n\n  static fromPositionalArgs(positional: PositionalArgs): Args {\n    return new Args({ positional, named: NamedArgs.empty() });\n  }\n\n  static fromHash(named: NamedArgs): Args {\n    return new Args({ positional: PositionalArgs.empty(), named });\n  }\n\n  static build(positional: PositionalArgs, named: NamedArgs): Args {\n    return new this({ positional, named });\n  }\n\n  public positional: PositionalArgs;\n  public named: NamedArgs;\n  public isStatic = false;\n\n  constructor(options: { positional: PositionalArgs, named: NamedArgs }) {\n    super();\n    this.positional = options.positional;\n    this.named = options.named;\n  }\n\n  prettyPrint() {\n    // return [this.positional.prettyPrint(), this.named.prettyPrint()];\n    return null;\n  }\n\n  compile(compiler: Compiler): CompiledArgs {\n    let { positional, named } = this;\n    return CompiledArgs.create({ positional: positional.compile(compiler), named: named.compile(compiler) });\n  }\n}\n\nexport class PositionalArgs extends Syntax<PositionalArgs> {\n  public type = \"positional\";\n\n  static fromSpec(sexp: PositionalArgsSexp): PositionalArgs {\n    if (!sexp || sexp.length === 0) return PositionalArgs.empty();\n    return new PositionalArgs(sexp.map(buildExpression));\n  }\n\n  static build(exprs: ExpressionSyntax[]): PositionalArgs {\n    return new this(exprs);\n  }\n\n  static _empty: PositionalArgs;\n\n  static empty(): PositionalArgs {\n    return (this._empty = this._empty || new PositionalArgs([]));\n  }\n\n  values: ExpressionSyntax[];\n  length: number;\n  isStatic = false;\n\n  constructor(exprs: ExpressionSyntax[]) {\n    super();\n    this.values = exprs;\n    this.length = exprs.length;\n  }\n\n  push(expr: ExpressionSyntax) {\n    this.values.push(expr);\n    this.length = this.values.length;\n  }\n\n  at(index: number): ExpressionSyntax {\n    return this.values[index];\n  }\n\n  compile(compiler: Compiler): CompiledPositionalArgs {\n    return CompiledPositionalArgs.create({ values: this.values.map(v => v.compile(compiler)) });\n  }\n\n  prettyPrint(): PrettyPrintValue {\n    return <any>this.values.map(p => p.prettyPrint());\n  }\n}\n\nexport class NamedArgs extends Syntax<NamedArgs> {\n  public type = \"named\";\n\n  static fromSpec(rawPairs: NamedArgsSexp): NamedArgs {\n    if (!rawPairs) { return NamedArgs.empty(); }\n\n    let keys = [];\n    let values = [];\n    let map = dict<ExpressionSyntax>();\n\n    for (let i = 0, l = rawPairs.length; i < l; i += 2) {\n      let key = rawPairs[i];\n      let expr = rawPairs[i+1];\n      keys.push(key);\n      let value = buildExpression(expr);\n      values.push(value);\n      map[key] = value;\n    }\n\n    return new NamedArgs({ keys, values, map });\n  }\n\n  static build(map: Dict<ExpressionSyntax>): NamedArgs {\n    if (map === undefined) { return NamedArgs.empty(); }\n    let keys = [];\n    let values = [];\n\n    Object.keys(map).forEach(key => {\n      keys.push(key);\n      values.push(map[key]);\n    });\n\n    return new this({ keys, values, map });\n  }\n\n  static _empty;\n\n  static empty(): NamedArgs {\n    return (this._empty = this._empty || new NamedArgs({ keys: EMPTY_ARRAY, values: EMPTY_ARRAY, map: dict<ExpressionSyntax>() }));\n  }\n\n  public map: Dict<ExpressionSyntax>;\n  public keys: InternedString[];\n  public values: ExpressionSyntax[];\n  public isStatic = false;\n\n  constructor({ keys, values, map }: { keys: InternedString[], values: ExpressionSyntax[], map: Dict<ExpressionSyntax> }) {\n    super();\n    this.keys = keys;\n    this.values = values;\n    this.map = map;\n  }\n\n  prettyPrint() {\n    let out = dict<PrettyPrintValue>();\n    this.keys.forEach((key, i) => {\n      out[<string>key] = this.values[i].prettyPrint();\n    });\n    return JSON.stringify(out);\n  }\n\n  add(key: InternedString, value: ExpressionSyntax) {\n    this.keys.push(key);\n    this.values.push(value);\n    this.map[<string>key] = value;\n  }\n\n  at(key: InternedString): ExpressionSyntax {\n    return this.map[<string>key];\n  }\n\n  has(key: InternedString): boolean {\n    return !!this.map[<string>key];\n  }\n\n  compile(compiler: Compiler): CompiledNamedArgs {\n    let { keys, values: rawValues } = this;\n    let values = rawValues.map(v => v.compile(compiler));\n\n    return CompiledNamedArgs.create({ keys, values });\n  }\n}\n\nexport class Templates extends Syntax<Templates> {\n  public type = \"templates\";\n\n  static fromSpec(_, [templateId, inverseId, children]): Templates {\n    return new Templates({\n      template: templateId === null ? null : children[templateId],\n      inverse: inverseId === null ? null : children[inverseId],\n    });\n  }\n\n  static build(template: Template, inverse: Template=null, attributes: Template=null): Templates {\n    return new this({ template, inverse });\n  }\n\n  public default: Template;\n  public inverse: Template;\n\n  constructor(options: { template: Template, inverse: Template }) {\n    super();\n    this.default = options.template;\n    this.inverse = options.inverse;\n  }\n\n  prettyPrint(): string {\n    let { default: _default, inverse } = this;\n\n    return JSON.stringify({\n      default: _default && _default.position,\n      inverse: inverse && inverse.position\n    });\n  }\n\n  evaluate(vm: VM): PathReference {\n    throw new Error(\"unimplemented evaluate for ExpressionSyntax\");\n  }\n}","import {\n  Block,\n  Append,\n  DynamicAttr,\n  DynamicProp,\n  AddClass,\n  Text,\n  Comment,\n  OpenElement,\n  CloseElement,\n  StaticAttr\n} from './core';\n\nimport { StatementSyntax } from '../syntax';\n\n// these are all constructors, indexed by statement type\nexport default function(name: string): typeof StatementSyntax {\n  switch (name) {\n    case 'block': return <any>Block;\n    case 'append': return <any>Append;\n    case 'dynamicAttr': return <any>DynamicAttr;\n    case 'dynamicProp': return <any>DynamicProp;\n    case 'addClass': return <any>AddClass;\n    case 'text': return <any>Text;\n    case 'comment': return <any>Comment;\n    case 'openElement': return <any>OpenElement;\n    case 'closeElement': return <any>CloseElement;\n    case 'staticAttr': return <any>StaticAttr;\n  }\n};","import { Dict, LinkedListNode, Slice, InternedString } from 'glimmer-util';\nimport Template from './template';\nimport Compiler from './compiler';\nimport { Environment } from './environment';\nimport { CompiledExpression } from './compiled/expressions';\n\nexport type PrettyPrintValue = PrettyPrint | string | string[] | PrettyPrintValueArray | PrettyPrintValueDict;\n\ninterface PrettyPrintValueArray extends Array<PrettyPrintValue> {\n\n}\n\ninterface PrettyPrintValueDict extends Dict<PrettyPrintValue> {\n\n}\n\nexport class PrettyPrint {\n  type: string;\n  operation: string;\n  params: PrettyPrintValue[];\n  hash: Dict<PrettyPrintValue>;\n  templates: Dict<number>;\n\n  constructor(type: string, operation: string, params: PrettyPrintValue[]=null, hash: Dict<PrettyPrintValue>=null, templates: Dict<number>=null) {\n    this.type = type;\n    this.operation = operation;\n    this.params = params;\n    this.hash = hash;\n    this.templates = templates;\n  }\n}\n\nexport interface PrettyPrintable {\n  prettyPrint(): PrettyPrint;\n}\n\nabstract class Syntax<T extends LinkedListNode> implements LinkedListNode {\n  static fromSpec(spec: any, templates: Template[]): Syntax<any> {\n    throw new Error(`You need to implement fromSpec on ${this}`);\n  }\n\n  public type: string;\n  public next: T = null;\n  public prev: T = null;\n\n  prettyPrint(): PrettyPrintValue {\n    return `<${this.type}>`;\n  }\n}\n\nexport default Syntax;\n\nexport abstract class StatementSyntax extends Syntax<StatementSyntax> {\n  static fromSpec(spec: any, templates: Template[]): StatementSyntax {\n    throw new Error(`You need to implement fromSpec on ${this}`);\n  }\n\n  prettyPrint(): any {\n    return new PrettyPrint(this.type, this.type);\n  }\n\n  clone(): this {\n    // not type safe but the alternative is extreme boilerplate per\n    // syntax subclass.\n    return new (<new (any) => any>this.constructor)(this);\n  }\n\n  abstract compile(opcodes: Compiler, env: Environment);\n}\n\nexport type Program = Slice<StatementSyntax>;\n\nexport const ATTRIBUTE_SYNTAX = \"e1185d30-7cac-4b12-b26a-35327d905d92\";\n\nexport abstract class AttributeSyntax extends StatementSyntax {\n  \"e1185d30-7cac-4b12-b26a-35327d905d92\": boolean;\n  name: InternedString;\n  namespace: InternedString;\n\n  abstract toLookup(): { syntax: AttributeSyntax, symbol: InternedString };\n  abstract valueSyntax(): ExpressionSyntax;\n}\n\nexport abstract class ExpressionSyntax extends Syntax<ExpressionSyntax> {\n  public type: string;\n\n  prettyPrint(): PrettyPrintValue {\n    return `${this.type}`;\n  }\n\n  abstract compile(compiler: Compiler): CompiledExpression;\n}","import { InternedString, LinkedList } from 'glimmer-util';\nimport { UpdatableReference } from 'glimmer-reference';\nimport { Program, StatementSyntax } from './syntax';\nimport { RawTemplate } from './compiler';\nimport { Environment } from './environment';\nimport { ElementStack } from './builder';\nimport VM from './vm';\nimport Scanner from './scanner';\n\ninterface TemplateOptions {\n  meta?: Object;\n  root?: Template[];\n  parent?: Template;\n  children?: Template[];\n  position?: number;\n  locals?: InternedString[];\n  named?: InternedString[];\n  program?: Program;\n  spec?: any;\n  isEmpty?: boolean;\n}\n\ninterface RenderOptions {\n  hostOptions?: Object;\n  appendTo: Element;\n}\n\ninterface EvaluateOptions {\n  nextSibling?: Node;\n}\n\nexport default class Template {\n  static fromSpec(specs: any[]): Template {\n    let scanner = new Scanner(specs);\n    return scanner.scan();\n  }\n\n  static fromList(program: Program): Template {\n    return new Template({\n      program,\n      root: null,\n      position: null,\n      meta: null,\n      locals: null,\n      isEmpty: program.isEmpty(),\n      spec: null\n    });\n  }\n\n  static fromStatements(statements: StatementSyntax[]): Template {\n    let program = new LinkedList<StatementSyntax>();\n    statements.forEach(s => program.append(s));\n\n    return new Template({\n      program,\n      root: null,\n      position: null,\n      meta: null,\n      locals: null,\n      isEmpty: statements.length === 0,\n      spec: null\n    });\n  }\n\n  meta: Object;\n  parent: Template;\n  children: Template[];\n  root: Template[];\n  position: number;\n  arity: number;\n  spec: any[];\n  isEmpty: boolean;\n  raw: RawTemplate;\n\n  constructor({ meta, children, root, position, locals, named, program, spec, isEmpty }: TemplateOptions) {\n    this.meta = meta || {};\n    this.children = children;\n    this.root = root || null;\n    this.position = position === undefined ? null : position;\n    this.arity = locals ? locals.length : 0;\n    this.raw = new RawTemplate({ ops: null, locals, named, program });\n    this.spec = spec || null;\n    this.isEmpty = isEmpty === true ? isEmpty : program.isEmpty();\n    Object.seal(this);\n  }\n\n  prettyPrint() {\n    function pretty(obj) {\n      if (typeof obj.prettyPrint === 'function') return obj.prettyPrint();\n      else throw new Error(`Cannot pretty print ${obj.constructor.name}`);\n    }\n\n    return this.root.map(template => {\n      return template.raw.program.toArray().map(statement => pretty(statement));\n    });\n  }\n\n  render(self: any, env: Environment, options: RenderOptions, blockArguments: any[]=null) {\n    let elementStack = new ElementStack({ dom: env.getDOM(), parentNode: options.appendTo, nextSibling: null });\n    let vm = VM.initial(env, { self: new UpdatableReference(self), elementStack, size: this.raw.symbolTable.size });\n\n    this.raw.compile(env);\n    return vm.execute(this.raw.ops);\n  }\n}","import { intern } from 'glimmer-util';\n\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJECT = {};\n\nconst KEY = intern(`__glimmer${+ new Date()}`);\n\nexport function symbol(debugName): string {\n  let num = Math.floor(Math.random() * (+new Date()));\n  return intern(`${debugName} [id=${KEY}${num}]`);\n}\n\nexport function turbocharge(object: Object): Object {\n  function Constructor() {}\n  Constructor.prototype = object;\n  return object;\n}\n\ninterface EnumerableCallback<T> {\n  (item: T): void;\n}\n\nexport interface Enumerable<T> {\n  forEach(callback: EnumerableCallback<T>);\n}\n\nexport interface Destroyable {\n  destroy();\n}\n\nexport interface Range<T> {\n  min(): number;\n  max(): number;\n  at(index: number): T;\n}\n\nexport class ListRange<T> implements Range<T> {\n  private list: T[];\n\n  // [start, end]\n  private start: number;\n  private end: number;\n\n  constructor(list: T[], start: number, end: number) {\n    this.list = list;\n    this.start = start;\n    this.end = end;\n  }\n\n  at(index: number): T {\n    if (index >= this.list.length) return null;\n    return this.list[index];\n  }\n\n  min(): number {\n    return this.start;\n  }\n\n  max(): number {\n    return this.end;\n  }\n}","import { Scope, Environment } from './environment';\nimport { Bounds, clear, move } from './bounds';\nimport { ElementStack } from './builder';\nimport { Stack, LinkedList, InternedString, Dict, dict } from 'glimmer-util';\nimport { ConstReference, ChainableReference, PathReference, RootReference, ListManager, ListIterator, ListDelegate } from 'glimmer-reference';\nimport Template from './template';\nimport { Templates } from './syntax/core';\nimport { RawTemplate } from './compiler';\nimport { CompiledExpression } from './compiled/expressions';\nimport { CompiledArgs, EvaluatedArgs } from './compiled/expressions/args';\nimport { Opcode, OpSeq, UpdatingOpcode, UpdatingOpSeq } from './opcodes';\nimport { Range } from './utils';\nimport DOMHelper from './dom';\n\ninterface VMOptions {\n  self: RootReference;\n  elementStack: ElementStack;\n  size: number;\n}\n\ninterface Registers {\n  operand: PathReference;\n  args: EvaluatedArgs;\n  condition: ChainableReference;\n  iterator: ListIterator;\n  key: InternedString;\n  templates: Dict<Template>;\n}\n\ninterface FrameDidPop {\n  frameDidPop();\n}\n\ntype OpList = Range<Opcode>;\n\nexport class VM {\n  public env: Environment;\n  private scopeStack = new Stack<Scope>();\n  private elementStack: ElementStack;\n  public updatingOpcodeStack = new Stack<LinkedList<UpdatingOpcode>>();\n  public listBlockStack = new Stack<ListBlockOpcode>();\n  public frame = new FrameStack();\n\n  static initial(env: Environment, { elementStack, self, size }: VMOptions) {\n    let scope = env.createRootScope(size).init({ self });\n    return new VM(env, scope, elementStack);\n  }\n\n  constructor(env: Environment, scope: Scope, elementStack: ElementStack) {\n    this.env = env;\n    this.elementStack = elementStack;\n    this.scopeStack.push(scope);\n  }\n\n  goto(op: Opcode) {\n    this.frame.goto(op);\n  }\n\n  enter(ops: OpSeq) {\n    this.stack().openBlock();\n\n    let updating = new LinkedList<UpdatingOpcode>();\n\n    let tryOpcode = new TryOpcode({ ops, vm: this, updating });\n\n    this.didEnter(tryOpcode, updating);\n  }\n\n  enterWithKey(key: InternedString, ops: OpSeq) {\n    this.stack().openBlock();\n\n    let updating = new LinkedList<UpdatingOpcode>();\n\n    let tryOpcode = new TryOpcode({ ops, vm: this, updating });\n\n    this.listBlockStack.current.map[<string>key] = tryOpcode;\n\n    this.didEnter(tryOpcode, updating);\n  }\n\n  enterList(manager: ListManager, ops: OpSeq) {\n    let updating = new LinkedList<BlockOpcode>();\n    this.stack().openBlockList(updating);\n\n    let opcode = new ListBlockOpcode({ ops, vm: this, updating, manager });\n\n    this.listBlockStack.push(opcode);\n\n    this.didEnter(opcode, updating);\n  }\n\n  private didEnter(opcode: BlockOpcode, updating: LinkedList<UpdatingOpcode>) {\n    this.updateWith(opcode);\n    this.updatingOpcodeStack.push(updating);\n  }\n\n  exit() {\n    this.stack().closeBlock();\n    this.updatingOpcodeStack.pop();\n  }\n\n  exitList() {\n    this.exit();\n    this.listBlockStack.pop();\n  }\n\n  updateWith(opcode: UpdatingOpcode) {\n    this.updatingOpcodeStack.current.insertBefore(opcode, null);\n  }\n\n  stack(): ElementStack {\n    return this.elementStack;\n  }\n\n  scope(): Scope {\n    return this.scopeStack.current;\n  }\n\n  pushFrame(ops: OpSeq, args?: EvaluatedArgs, templates?: Templates, frameDidPop?: FrameDidPop) {\n    this.frame.push(ops);\n    if (args) this.frame.setArgs(args);\n    if (templates) this.frame.setTemplates(<any>templates);\n    if (frameDidPop) this.frame.setPopHandler(frameDidPop);\n  }\n\n  popFrame() {\n    let { frame } = this;\n\n    frame.pop();\n    let current = frame.getCurrent();\n\n    if (current === null) return;\n  }\n\n  pushChildScope() {\n    this.scopeStack.push(this.scopeStack.current.child());\n  }\n\n  popScope() {\n    this.scopeStack.pop();\n  }\n\n  /// SCOPE HELPERS\n\n  getSelf() {\n    return this.scope().getSelf();\n  }\n\n  referenceForSymbol(symbol: number) {\n    return this.scope().getSymbol(symbol);\n  }\n\n  /// EXECUTION\n\n  execute(opcodes: OpSeq, initialize?: (vm: VM) => void): RenderResult {\n    let { elementStack, frame, updatingOpcodeStack, env } = this;\n    let self = this.scope().getSelf();\n\n    elementStack.openBlock();\n\n    updatingOpcodeStack.push(new LinkedList<UpdatingOpcode>());\n    frame.push(opcodes);\n\n    if (initialize) initialize(this);\n\n    let opcode: Opcode;\n\n    while (frame.hasOpcodes()) {\n      if (opcode = frame.nextStatement()) opcode.evaluate(this);\n    }\n\n    return new RenderResult(updatingOpcodeStack.pop(), elementStack.closeBlock(), env.getDOM(), self);\n  }\n\n  evaluateOpcode(opcode: Opcode) {\n    opcode.evaluate(this);\n  }\n\n  invoke(template: RawTemplate, args: CompiledArgs, templates: Templates) {\n    this.elementStack.openBlock();\n    let evaledArgs = args.evaluate(this);\n    template.compile(this.env);\n    this.pushFrame(template.ops, evaledArgs, templates, this);\n  }\n\n  frameDidPop() {\n    this.elementStack.closeBlock();\n  }\n\n  evaluateOperand(expr: CompiledExpression) {\n    this.frame.setOperand(expr.evaluate(this));\n  }\n\n  evaluateArgs(args: CompiledArgs) {\n    let evaledArgs = this.frame.setArgs(args.evaluate(this));\n    this.frame.setOperand(evaledArgs.positional.at(0));\n  }\n\n  bindArgs(positionalParams: number[], namedParams: Dict<number>) {\n    let args = this.frame.getArgs();\n    if (!args) return;\n\n    let { positional, named } = args;\n\n    let scope = this.scope();\n\n    if (positionalParams) {\n      for(let i = 0; i < positionalParams.length; i++) {\n        let symbol = positionalParams[i];\n\n        if (symbol !== 0) {\n          scope.bindSymbol(symbol, positional.at(i));\n        }\n      }\n    }\n\n    if (namedParams) {\n      Object.keys(namedParams).forEach(p => {\n        scope.bindSymbol(namedParams[p], named.get(<InternedString>p));\n      });\n    }\n  }\n\n  setTemplates(templates: Dict<Template>) {\n    this.frame.setTemplates(templates);\n  }\n\n  invokeTemplate(name: InternedString) {\n    let template = this.frame.getTemplates()[<string>name].raw;\n    template.compile(this.env);\n    this.pushFrame(template.ops);\n  }\n}\n\nexport default VM;\n\nexport class UpdatingVM {\n  private frameStack: Stack<UpdatingVMFrame> = new Stack<UpdatingVMFrame>();\n  public dom: DOMHelper;\n\n  constructor(dom: DOMHelper) {\n    this.dom = dom;\n  }\n\n  execute(opcodes: UpdatingOpSeq, handler: ExceptionHandler) {\n    let { frameStack } = this;\n\n    this.try(opcodes, handler);\n\n    while (true) {\n      if (frameStack.isEmpty()) break;\n\n      let opcode = this.frameStack.current.nextStatement();\n\n      if (opcode === null) {\n        this.frameStack.pop();\n        continue;\n      }\n\n      opcode.evaluate(this);\n    }\n  }\n\n  try(ops: UpdatingOpSeq, handler: ExceptionHandler) {\n    this.frameStack.push(new UpdatingVMFrame(this, ops, handler));\n  }\n\n  throw(initialize?: (vm: VM) => void) {\n    this.frameStack.current.handleException(initialize);\n  }\n\n  evaluateOpcode(opcode: UpdatingOpcode) {\n    opcode.evaluate(this);\n  }\n}\n\ninterface ExceptionHandler {\n  handleException(initialize?: (vm: VM) => void);\n}\n\ninterface BlockOpcodeOptions {\n  ops: OpSeq;\n  vm: VM;\n  updating: LinkedList<UpdatingOpcode>;\n}\n\nabstract class BlockOpcode implements UpdatingOpcode, Bounds {\n  public type = \"block\";\n  public next = null;\n  public prev = null;\n\n  protected env: Environment;\n  protected scope: Scope;\n  protected updating: LinkedList<UpdatingOpcode>;\n  protected bounds: Bounds;\n  public ops: OpSeq;\n\n  constructor({ ops, vm, updating }: BlockOpcodeOptions) {\n    this.ops = ops;\n    this.updating = updating;\n    this.env = vm.env;\n    this.scope = vm.scope();\n    this.bounds = vm.stack().block();\n  }\n\n  parentElement() {\n    return this.bounds.parentElement();\n  }\n\n  firstNode() {\n    return this.bounds.firstNode();\n  }\n\n  lastNode() {\n    return this.bounds.lastNode();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    vm.try(this.updating, null);\n  }\n}\n\nclass TryOpcode extends BlockOpcode implements UpdatingOpcode, ExceptionHandler {\n  public type = \"try\";\n\n  evaluate(vm: UpdatingVM) {\n    vm.try(this.updating, this);\n  }\n\n  handleException(initialize?: (vm: VM) => void) {\n    let stack = new ElementStack({\n      dom: this.env.getDOM(),\n      parentNode: this.bounds.parentElement(),\n      nextSibling: initialize ? this.bounds.lastNode().nextSibling : clear(this.bounds)\n    });\n\n    let vm = new VM(this.env, this.scope, stack);\n    let result = vm.execute(this.ops, initialize);\n\n    if (!initialize) {\n      this.updating = result.opcodes();\n    }\n\n    this.bounds = result;\n  }\n}\n\nclass ListRevalidationDelegate implements ListDelegate {\n  private opcode: ListBlockOpcode;\n  private map: Dict<BlockOpcode>;\n  private updating: LinkedList<UpdatingOpcode>;\n\n  constructor(opcode: ListBlockOpcode) {\n    let { map, updating } = opcode;\n    this.opcode = opcode;\n    this.map = map;\n    this.updating = updating;\n  }\n\n  insert(key: InternedString, item: RootReference, before: InternedString) {\n    let { map, opcode, updating } = this;\n    let nextSibling: Node = null;\n    let reference = null;\n\n    if (before) {\n      reference = map[<string>before];\n      nextSibling = reference.bounds.firstNode();\n    }\n\n    let vm = opcode.vmForInsertion(nextSibling);\n    let tryOpcode;\n\n    vm.execute(opcode.ops, vm => {\n      vm.frame.setArgs(EvaluatedArgs.positional([item]));\n      vm.frame.setOperand(item);\n      vm.frame.setCondition(new ConstReference(true));\n      vm.frame.setKey(key);\n\n      tryOpcode = new TryOpcode({\n        vm,\n        ops: opcode.ops,\n        updating: vm.updatingOpcodeStack.current\n      });\n    });\n\n    updating.insertBefore(tryOpcode, reference);\n\n    map[<string>key] = tryOpcode;\n  }\n\n  retain(key: InternedString, item: RootReference) {\n  }\n\n  move(key: InternedString, item: RootReference, before: InternedString) {\n    let { map, updating } = this;\n\n    let entry = map[<string>key];\n    let reference = map[<string>before] || null;\n\n    if (before) {\n      move(entry, reference.firstNode());\n    } else {\n      move(entry, this.opcode.lastNode());\n    }\n\n    updating.remove(entry);\n    updating.insertBefore(entry, reference);\n  }\n\n  delete(key: InternedString) {\n    let { map } = this;\n    let opcode = map[<string>key];\n    clear(opcode);\n    this.updating.remove(opcode);\n    delete map[<string>key];\n  }\n\n  done() {\n    // this.vm.registers.condition = new ConstReference(false);\n  }\n}\n\ninterface ListBlockOpcodeOptions extends BlockOpcodeOptions {\n  manager: ListManager;\n}\n\nclass ListBlockOpcode extends BlockOpcode {\n  public type = \"list-block\";\n  public map = dict<BlockOpcode>();\n  public manager: ListManager;\n\n  constructor(options: ListBlockOpcodeOptions) {\n    super(options);\n    this.manager = options.manager;\n  }\n\n  firstNode(): Node {\n    let head: BlockOpcode = <any>this.updating.head();\n\n    if (head) {\n      return head.firstNode();\n    } else {\n      return this.lastNode();\n    }\n  }\n\n  lastNode(): Node {\n    return this.bounds.lastNode();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    // Revalidate list somehow....\n    let delegate = new ListRevalidationDelegate(this);\n\n    this.manager.sync(delegate);\n\n    // Run now-updated updating opcodes\n    super.evaluate(vm);\n  }\n\n  vmForInsertion(nextSibling?: Node) {\n    let stack = new ElementStack({\n      dom: this.env.getDOM(),\n      parentNode: this.bounds.parentElement(),\n      nextSibling: nextSibling || this.bounds.lastNode()\n    });\n\n    return new VM(this.env, this.scope, stack);\n  }\n}\n\nclass UpdatingVMFrame {\n  private vm: UpdatingVM;\n  private ops: UpdatingOpSeq;\n  private current: UpdatingOpcode;\n  private exceptionHandler: ExceptionHandler;\n\n  constructor(vm: UpdatingVM, ops: UpdatingOpSeq, handler: ExceptionHandler) {\n    this.vm = vm;\n    this.ops = ops;\n    this.current = ops.head();\n    this.exceptionHandler = handler;\n  }\n\n  nextStatement(): UpdatingOpcode {\n    let { current, ops } = this;\n    if (current) this.current = ops.nextNode(current);\n    return current;\n  }\n\n  handleException(initialize?: (vm: VM) => void) {\n    this.exceptionHandler.handleException(initialize);\n  }\n}\n\nexport class RenderResult implements Bounds, ExceptionHandler {\n  private updating: LinkedList<UpdatingOpcode>;\n  private bounds: Bounds;\n  private dom: DOMHelper;\n  private self: PathReference;\n\n  constructor(updating: LinkedList<UpdatingOpcode>, bounds: Bounds, dom: DOMHelper, self: PathReference) {\n    this.updating = updating;\n    this.bounds = bounds;\n    this.dom = dom;\n    this.self = self;\n  }\n\n  rerender(self?: any) {\n    let vm = new UpdatingVM(this.dom);\n\n    if (self !== undefined) {\n      this.self.update(self);\n    }\n\n    vm.execute(this.updating, this);\n  }\n\n  parentElement() {\n    return this.bounds.parentElement();\n  }\n\n  firstNode() {\n    return this.bounds.firstNode();\n  }\n\n  lastNode() {\n    return this.bounds.lastNode();\n  }\n\n  opcodes(): LinkedList<UpdatingOpcode> {\n    return this.updating;\n  }\n\n  handleException() {\n    throw \"this should never happen\";\n  }\n}\n\ninterface ReturnHandler {\n  setRenderResult(renderResult: RenderResult);\n}\n\nclass Frame {\n  ops: OpSeq;\n  op: Opcode;\n  operand: PathReference = null;\n  args: EvaluatedArgs = null;\n  condition: ChainableReference = null;\n  iterator: ListIterator = null;\n  key: InternedString = null;\n  templates: Dict<Template> = null;\n  popHandler: FrameDidPop = null;\n\n  constructor(ops: OpSeq) {\n    this.ops = ops;\n    this.op = ops.head();\n  }\n}\n\nclass FrameStack {\n  private frames: Frame[] = [];\n  private frame: number = undefined;\n\n  push(ops: OpSeq) {\n    let frame = (this.frame === undefined) ? (this.frame = 0) : ++this.frame;\n\n    if (this.frames.length <= frame) {\n      this.frames.push(null);\n    }\n\n    this.frames[frame] = new Frame(ops);\n  }\n\n  pop() {\n    let popHandler = this.getPopHandler();\n    if (popHandler) popHandler.frameDidPop();\n\n    let { frames, frame } = this;\n    frames[frame] = null;\n    this.frame = frame === 0 ? undefined : frame - 1;\n  }\n\n  getOps(): OpSeq {\n    return this.frames[this.frame].ops;\n  }\n\n  getCurrent(): Opcode {\n    return this.frames[this.frame].op;\n  }\n\n  setCurrent(op: Opcode): Opcode {\n    return this.frames[this.frame].op = op;\n  }\n\n  getOperand(): PathReference {\n    return this.frames[this.frame].operand;\n  }\n\n  setOperand(operand: PathReference): PathReference {\n    return this.frames[this.frame].operand = operand;\n  }\n\n  getArgs(): EvaluatedArgs {\n    return this.frames[this.frame].args;\n  }\n\n  setArgs(args: EvaluatedArgs): EvaluatedArgs {\n    return this.frames[this.frame].args = args;\n  }\n\n  getCondition(): ChainableReference {\n    return this.frames[this.frame].condition;\n  }\n\n  setCondition(condition: ChainableReference): ChainableReference {\n    return this.frames[this.frame].condition = condition;\n  }\n\n  getIterator(): ListIterator {\n    return this.frames[this.frame].iterator;\n  }\n\n  setIterator(iterator: ListIterator): ListIterator {\n    return this.frames[this.frame].iterator = iterator;\n  }\n\n  getKey(): InternedString {\n    return this.frames[this.frame].key;\n  }\n\n  setKey(key: InternedString): InternedString {\n    return this.frames[this.frame].key = key;\n  }\n\n  getTemplates(): Dict<Template> {\n    return this.frames[this.frame].templates;\n  }\n\n  setTemplates(templates: Dict<Template>): Dict<Template> {\n    return this.frames[this.frame].templates = templates;\n  }\n\n  getPopHandler(): FrameDidPop {\n    return this.frames[this.frame].popHandler;\n  }\n\n  setPopHandler(handler: FrameDidPop): FrameDidPop {\n    return this.frames[this.frame].popHandler = handler;\n  }\n\n  goto(op: Opcode) {\n    this.setCurrent(op);\n  }\n\n  hasOpcodes(): boolean {\n    return this.frame !== undefined;\n  }\n\n  nextStatement(): Opcode {\n    let op = this.frames[this.frame].op;\n    let ops = this.getOps();\n\n    if (op) {\n      this.setCurrent(ops.nextNode(op));\n      return op;\n    } else {\n      this.pop();\n      return null;\n    }\n  }\n}\n\nenum Slots {\n  Ops = 0,\n  Current = 1,\n  Operand = 2,\n  Args = 3,\n  Condition = 4,\n  Iterator = 5,\n  Key = 6,\n  Templates = 7\n}","// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n","const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;'\n};\n\nconst badChars = /[&<>\"'`]/g,\n      possible = /[&<>\"'`]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/*eslint-disable func-style, no-var */\nvar isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexport var isFunction;\n/*eslint-enable func-style, no-var */\n\n/* istanbul ignore next */\nexport const isArray = Array.isArray || function(value) {\n  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;\n};\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) { return string; }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n"],"names":[],"mappings":"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","file":"glimmer-runtime.amd.js"}